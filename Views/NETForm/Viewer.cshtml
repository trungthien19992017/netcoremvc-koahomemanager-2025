@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using KOAHome.Helpers
@{
    Layout = "~/Views/Shared/_ContentNavbarLayout.cshtml";
    // lay thong tin
    var id = ViewData["id"] as int?;
    var formCode = ViewData["formCode"] as string;
    var formData = ViewData["formData"] as IDictionary<string, object>;
    // truyen cau hinh form de xu ly giao dien
    var config_form = ViewData["config_form"] as IDictionary<string, object>;
    var config_formOptions = null as IDictionary<string, object>;
    var form_colCount = 3;
    string formTitle = "";
    if (config_form != null)
    {
        config_formOptions = ParseDataHelper.ParseOptionsToDictionary(config_form.ContainsKey("options") ? config_form["options"].ToString() : "{}");
        // tra ve title cho page
        formTitle = config_form.ContainsKey("formtitle") ? config_form["formtitle"].ToString() : "Thông tin";
        ViewData["Title"] = formTitle;
        // mac dinh col count cua form = 3
        form_colCount = config_formOptions.ContainsKey("colCount") ? Convert.ToInt32(config_formOptions["colCount"]) : 3;
    }

    // truyen danh sach cấu hình form field len giao dien
    var config_formfield = ViewData["config_formfield"] as List<dynamic>;
    var dynamicServiceSelectOptions = ViewData["DynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;

    // nhan thong tin attachment neu co
    var fileUrlsDict = ViewData["fileUrls"] as Dictionary<string, List<string>>;


    var reportResultList = ViewData["reportResultList"] as List<dynamic>;

    // tao bien dem de dem row num cho report
    var reportRowIndex = 1;
}


@section VendorStyles {
    <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
}

@section VendorScripts {
    <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
}

@section PageScripts {
    <script src="~/js/dashboards-analytics.js"></script>
    @* thong bao day *@
    <script src="~/js/ui-toasts.js"></script>
    @* validate, kem cac file js ho tro *@
    <script src="~/js/helper.js"></script>
    <script src="~/js/flatpickr.js"></script>
    <script src="~/js/form-validation.js"></script>

    <script>
        //   // Common function to parse Query String
        //   function getQueryParams() {
        //       var params = {};
        //       var queryString = window.location.search.substring(1); // remove '?'
        //       if (queryString.length === 0) return params;

        //       var pairs = queryString.split("&");
        //       for (var i = 0; i < pairs.length; i++) {
        //           var pair = pairs[i].split('=');
        //           if (pair.length === 2) {
        //               params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1].replace(/\+/g, ' '));
        //           }
        //       }
        //       return params;
        //   }

        // // load report editor động trong form
        // function loadFormReportEditor(reportCode, containerId) {
        //     var queryParams = getQueryParams();
        //     queryParams.reportCode = reportCode; // Inject thêm reportCode

        //     $.ajax({
        //         url: '/NETReport/Form_Report_Editor',
        //         type: 'GET',
        //         data: queryParams,
        //         success: function (response) {
        //             // Nếu trả về thành công và có HTML, chèn vào container
        //             if (response.success === false) {
        //                 // Nếu không thành công, hiển thị thông báo lỗi
        //                 rplm({
        //                        title: "Lỗi khi hiển thị danh sách!",
        //                        text: response.errorMessage || "Có vấn đề xảy ra.",
        //                        type: "error",
        //                        timer: 2000,
        //                        confirmButtonText: 'Xác nhận',
        //                        html: true
        //                    });
        //             } else {
        //                 // Nếu không có lỗi, chèn HTML vào container
        //                 let html = response;
        //                 $("#" + containerId).html(html);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             console.error('Error loading report editor:', error);
        //         }
        //     });
        // }

        // // load report viewer động trong form
        // function loadFormReportViewer(reportCode, containerId) {
        //     var queryParams = getQueryParams();
        //     queryParams.reportCode = reportCode; // Inject thêm reportCode

        //     $.ajax({
        //         url: '/NETReport/Form_Report_Viewer',
        //         type: 'GET',
        //         data: queryParams,
        //         success: function (response) {
        //             // Nếu trả về thành công và có HTML, chèn vào container
        //             if (response.success === false) {
        //                 // Nếu không thành công, hiển thị thông báo lỗi
        //                 rplm({
        //                        title: "Lỗi khi hiển thị danh sách!",
        //                        text: response.errorMessage || "Có vấn đề xảy ra.",
        //                        type: "error",
        //                        timer: 2000,
        //                        confirmButtonText: 'Xác nhận',
        //                        html: true
        //                    });
        //             } else {
        //                 // Nếu không có lỗi, chèn HTML vào container
        //                 let html = response;
        //                 $("#" + containerId).html(html);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //           rplm({
        //                   title: "Lỗi khi hiển thị danh sách!",
        //                   text: error || "Có vấn đề xảy ra.",
        //                   type: "error",
        //                   timer: 2000,
        //                   confirmButtonText: 'Xác nhận',
        //                   html: true
        //               });
        //         }
        //     });
        // }

        // xử lý hiển thị dynamic report trong form nếu có
        $(document).ready(function () {
            // Khi trang load, tìm tất cả div có class "form-report-editor" để load report editor
            $('.form-report-editor').each(function () {
                var reportCode = $(this).data('reportcode'); // lấy thuộc tính data-reportcode
                var containerId = $(this).attr('id');         // lấy id của div
                if (reportCode && containerId) {
                    loadFormReportEditor(reportCode, containerId);
                }
            });
            // Khi trang load, tìm tất cả div có class "form-report-viewer" để load report viewer
            $('.form-report-viewer').each(function () {
                var reportCode = $(this).data('reportcode'); // lấy thuộc tính data-reportcode
                var containerId = $(this).attr('id');         // lấy id của div
                if (reportCode && containerId) {
                    loadFormReportViewer(reportCode, containerId);
                }
            });
        });

    </script>
}

@section success
{
    @if (ViewData["success"] != null)
    {

        <!-- Toast with Placements -->
        <div class="bs-toast toast  top-0 end-0 show toast-placement-ex1 m-2" style="position:absolute;" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="2000">
            <div class="toast-header">
                <i class="ri-home-4-fill me-2 text-success"></i>
                <div class="me-auto fw-medium">Thông báo</div><small class="text-muted">1 giây trước</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body text-success">@ViewData["success"].</div>
        </div>
        <!-- Toast with Placements -->
    }
}

@section ErrorMessage
{
    @if (ViewData["ErrorMessage"] != null)
    {
        <!-- Toast with Placements -->
        <div class="bs-toast toast  top-0 end-0 show toast-placement-ex1 m-2" style="position:absolute;" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="2000">
            <div class="toast-header">
                <i class="ri-home-4-fill me-2 text-danger"></i>
                <div class="me-auto fw-medium">Thông báo</div><small class="text-muted">1 giây trước</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body text-danger">@ViewData["ErrorMessage"].</div>
        </div>
        <!-- Toast with Placements -->
    }
}

@* ************** Content ************** *@
<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->

    <div class="container-xxl flex-grow-1 container-p-y">
        <!-- Booking form -->
        <div class="row">
            <div class="col-xl">
              <form id="create-form" class="needs-validation" novalidate="" method="post" asp-controller="NETForm" asp-action="Viewer" asp-route-formCode="@formCode"
                    asp-route-id="@id" enctype="multipart/form-data">
                <div class="card mb-6">
                    <div class="card-header sticky-element bg-label-primary d-flex justify-content-sm-between align-items-sm-center flex-column flex-sm-row">
                        <h5 class="card-title mb-sm-0 me-2">@formTitle</h5>
                        <div class="action-btns">
                            <button type="submit" class="btn btn-primary">Lưu</button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (config_form != null)
                        {
                          @* hidden input để xử lý ẩn truyền dữ liệu từ param link vào bằng js *@
                          <div id="hiddenInputs"></div>
                          @* xu ly form dong *@
                          @* xu ly voi moi field *@
                          <div class="row gx-5">
                            @* chi lay cac field group hoac field không có parentId *@
                            @foreach (var field in config_formfield.Where(p => p.parentid == 0).OrderBy(p => p.tabindex).ToList())
                            {
                                @* name: Key cua field truyen vao, label: Ten field, type: Loại field, value: giá trị field
                                , field width: độ rộng field *@
                                string name = field.code;
                                string label = field.name;
                                string type = field.formfieldtypecode;
                                string field_options = field.options;
                                // chuyen thong tin options thanh Dictionary cho dễ xử lý
                                var field_optionsDict = ParseDataHelper.ParseOptionsToDictionary(field_options);
                                // chuyen thong tin editor options thanh Dictionary cho dễ xử lý
                                var field_editoroptionsDict = ParseDataHelper.ParseEditorOptionsToDictionary(field_options);
                                // col span mặc định là 3
                                int field_colspan = Convert.ToInt32(field_optionsDict.ContainsKey("colSpan") ? Convert.ToInt32(field_optionsDict["colSpan"]) : 3);
                                // col span mặc định là 1
                                int field_colcount = Convert.ToInt32(field_optionsDict.ContainsKey("colCount") ? Convert.ToInt32(field_optionsDict["colCount"]) : 1);
                                // tinh do rong cua field dua tren gia tri config
                                int field_width = (12 / form_colCount * field_colspan);

                                // lay thong tin validation
                                string field_validates = field.validates;
                                // parse validation thanh List<Dictionary<string, object>>
                                var field_validatesListDict = ParseDataHelper.ParseJsonToListDict(field_validates);

                                // kiem tra bat buoc nhap
                                bool isrequired = false;
                                string required_message = "";
                                var required_rule = ParseDataHelper.GetFormFieldValidate(field_validatesListDict,"required");
                                if (required_rule != null && required_rule.Count > 0)
                                {
                                  isrequired = true;
                                  required_message = required_rule.ContainsKey("message") ? required_rule["message"].ToString() : "Không được bỏ trống";
                                }

                                // kiem tra readonly
                                bool isreadonly = field_editoroptionsDict.ContainsKey("readOnly") ? Convert.ToBoolean(field_editoroptionsDict["readOnly"]) : false;

                                // nhan gia tri cua field
                                var value = formData.ContainsKey(name) ? formData[name] : "";

                                // neu type la GroupItem thi hiển thị group và gọi các field con
                                if (type == "GroupItem")
                                {
                                  <div class="@("col-md-" + field_width)">
                                    <div class="row gx-5">
                                        <div class="col-md-12 card-header"><strong class="mb-0 text-primary">@label</strong></div>
                                        @* goi vong lap de lay cac field con *@
                                        @foreach (var fieldchild in config_formfield.Where(p => p.parentid == field.id).OrderBy(p => p.tabindex).ToList())
                                        {
                                            @* name: Key cua field truyen vao, label: Ten field, type: Loại field, value: giá trị field
                                            , field width: độ rộng field *@
                                            string child_name = fieldchild.code;
                                            string child_label = fieldchild.name;
                                            string child_type = fieldchild.formfieldtypecode;
                                            string child_field_options = fieldchild.options;
                                            // chuyen thong tin options thanh Dictionary cho dễ xử lý
                                            var child_field_optionsDict = ParseDataHelper.ParseOptionsToDictionary(child_field_options);
                                            // chuyen thong tin editor options thanh Dictionary cho dễ xử lý
                                            var child_field_editoroptionsDict = ParseDataHelper.ParseEditorOptionsToDictionary(child_field_options);
                                            // col span mặc định là 3
                                            int child_field_colspan = Convert.ToInt32(child_field_optionsDict.ContainsKey("colSpan") ? Convert.ToInt32(child_field_optionsDict["colSpan"]) : 3);
                                            // col span mặc định là 1
                                            int child_field_colcount = Convert.ToInt32(child_field_optionsDict.ContainsKey("colCount") ? Convert.ToInt32(child_field_optionsDict["colCount"]) : 1);
                                            // tinh do rong cua field dua tren gia tri config
                                            int child_field_width = (12 / field_colcount * child_field_colspan);

                                            // lay thong tin validation
                                            string child_field_validates = fieldchild.validates;
                                            // parse validation thanh List<Dictionary<string, object>>
                                            var child_field_validatesListDict = ParseDataHelper.ParseJsonToListDict(child_field_validates);

                                            // kiem tra bat buoc nhap
                                            bool child_isrequired = false;
                                            string child_required_message = "";
                                            var child_required_rule = ParseDataHelper.GetFormFieldValidate(child_field_validatesListDict,"required");
                                            if (child_required_rule != null && child_required_rule.Count > 0)
                                            {
                                              child_isrequired = true;
                                              child_required_message = child_required_rule.ContainsKey("message") ? child_required_rule["message"].ToString() : "Không được bỏ trống";
                                            }

                                            // kiem tra readonly
                                            bool child_isreadonly = child_field_editoroptionsDict.ContainsKey("readOnly") ? Convert.ToBoolean(child_field_editoroptionsDict["readOnly"]) : false;

                                            // nhan gia tri cua field
                                            var child_value = formData.ContainsKey(child_name) ? formData[child_name] : "";
                                            string[] noclasslabel_fieldtypes = ["RadioGroup","FileUploader","HTMLEditor"];
                                          
                                            <div class="col-md-@(Convert.ToInt32(child_field_width) == 0 ? "4" : child_field_width)">
                                              <div class="@(
                                                              noclasslabel_fieldtypes.Contains(child_type) ? "" : child_type == "CheckBox" ? "form-check mt-4" : child_type == "Switch" ? "form-check form-switch me-n3" : "form-floating form-floating-outline mb-6"
                                                            )">
                                                @if (child_type == "TextBox")
                                                {
                                                    <input class="form-control form-control-sm" type="text" id="@child_name" name="@child_name" value="@child_value" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "") />
                                                }
                                                @if (child_type == "TextArea")
                                                {
                                                    // lấy thông tin chiều cao (mặc định 200)
                                                    int height = child_field_editoroptionsDict.ContainsKey("height") ? Convert.ToInt32(child_field_editoroptionsDict["height"]) : 200;
                                                    <textarea style="height:@(height + "px")" class="form-control" placeholder="@child_label" name="@child_name" id="@child_name" aria-label="@child_label" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "")>@child_value</textarea>
                                                }
                                                else if (child_type == "NumberBox")
                                                {
                                                    <input class="form-control form-control-sm" type="number" id="@child_name"  name="@child_name" value="@child_value" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "") />
                                                }
                                                else if (child_type == "DateBox")
                                                {
                                                    @* mac dinh datetype la date *@
                                                    string datetype = child_field_editoroptionsDict.ContainsKey("type") ? (child_field_editoroptionsDict["type"].ToString() ?? "date") : "date";
                                                    <input class="form-control form-control-sm" type="@datetype" id="@child_name" name="@child_name" value="@child_value" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "")/>
                                                }
                                                else if (child_type == "EmptyBox")
                                                {
                                                    @* bỏ trống *@
                                                }
                                                else if (child_type == "SelectBox")
                                                {
                                                    @* kiem tra neu co data fill store thi truyen vao (fill giá trị cho các field khác dựa vào giá trị của select box thông qua store) *@
                                                    var dataFillStore = child_field_editoroptionsDict.ContainsKey("dataFillStore") ? (child_field_editoroptionsDict["dataFillStore"].ToString() ?? "") : "";
                                                    @* check selected cho item dung voi gia tri *@
                                                    var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();
                
                                                    <select name="@child_name"
                                                            id="@child_name"
                                                            class="form-select color-dropdown form-select-sm"
                                                            data-datafillstore="@dataFillStore"
                                                            @(child_isrequired ? "required" : "")
                                                            @(child_isreadonly == true ? "disabled" : "")
                                                    >
                                                        <option value="">-- Chọn --</option>
                                                        @foreach (var item in selectList)
                                                        {
                                                            <option value="@item.Value"
                                                                    selected="@(item.Value.ToString() == (child_value ?? "").ToString() ? "selected" : null)">
                                                                @item.Text
                                                            </option>
                                                        }
                                                    </select>
                                                }
                                                else if (child_type == "DropDownBox")
                                                {
                                                        @* check selected cho item dung voi gia tri *@
                                                        var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();

                                                        <select name="@child_name"
                                                                id="@child_name"
                                                                class="form-select color-dropdown form-select-sm"
                                                                @(child_isrequired ? "required" : "")
                                                                @(child_isreadonly == true ? "disabled" : "")
                                                                multiple>
                                                            <option value="">-- Chọn --</option>
                                                            @foreach (var item in selectList)
                                                            {
                                                                child_value ??= "";
                                                                // split chuoi value thanh List string để xử lý
                                                                var splitvalue = child_value.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries);
                                                                // kiểm tra cac giá trị có khớp không
                                                                <option value="@item.Value"
                                                                        selected="@((splitvalue.Any(s => s.Trim().Equals(item.Value.ToString(), StringComparison.OrdinalIgnoreCase))) ? "selected" : null)">
                                                                    @item.Text
                                                                </option>
                                                            }
                                                        </select>
                                                }
                                                else if (child_type == "TagBox")
                                                {
                                                    // check selected cho item dung voi gia tri
                                                    var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                    var tagBoxWhitelist = selectList.Select(x => new {
                                                        value = x.Value,
                                                        label = x.Text
                                                    });

                                                    // serialize whitelist tiếng Việt không bị escape unicode
                                                    var whitelistJson = JsonConvert.SerializeObject(tagBoxWhitelist, new JsonSerializerSettings
                                                    {
                                                        StringEscapeHandling = StringEscapeHandling.Default
                                                    });

                                                    <input id="@child_name" class="tag-input form-control h-auto" name="@child_name" value="@child_value" data-jsonwhitelist='@whitelistJson' aria-label="@child_label" tabindex="-1">
                                                }
                                                else if (child_type == "ListSelection")
                                                {
                                                    // check selected cho item dung voi gia tri
                                                    var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                    string inputName = child_name; // ví dụ: "ListSelectionInput"
                                                    var selectedValues = (value.ToString() ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries).ToList();
                                                    string hiddenInputId = $"hidden_{inputName}";

                                                    <div class="selection-container">
                                                        <label>@label <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                                        <input type="hidden" name="@inputName" id="@hiddenInputId" value="@value" />
    
                                                        <div class="selection-list" data-target="@hiddenInputId">
                                                            @foreach (var item in selectList)
                                                            {
                                                                bool isSelected = selectedValues.Contains(item.Value);
                                                                <div class="selection-item @(isSelected ? "selected" : "")"
                                                                     data-value="@item.Value">
                                                                    @item.Text
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                                else if (child_type == "RadioGroup")
                                                {
                                                    <div class="d-lg-inline-block"><p class="text-light fw-medium d-block">@child_label: </p></div>
                                                    // check selected cho item dung voi gia tri
                                                    var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();

                                                    @if (selectList != null)
                                                    {
                                                      foreach (var item in selectList)
                                                      {
                                                          <div class="form-check form-check-inline">
                                                              <input type="radio" class="form-check-input"
                                                                      name="@child_name"
                                                                      id="@(child_name + "_" + item.Value)"
                                                                      value="@item.Value"
                                                              @((child_value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                              <label class="form-check-label" for="@(child_name + "_" + item.Value)">@item.Text</label>
                                                          </div>
                                                      }
                                                    }
                                                }
                                                else if (child_type == "CheckBox" || child_type == "Switch")
                                                {
                                                    <input class="form-check-input" type="checkbox" id="@child_name" name="@child_name" value="true" @((child_value ?? "").ToString().ToLower() == "true" ? "checked" : "") @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "")/>
                                                }
                                                else if (child_type == "FileUploader")
                                                {
                                                  string codeUpload = child_field_optionsDict.ContainsKey("codeUpload") ? (child_field_optionsDict["codeUpload"].ToString() ?? "") : "";
                                                  var fileList = new List<string>();
                                                  if (fileUrlsDict != null)
                                                  {
                                                      fileList = fileUrlsDict != null && fileUrlsDict.ContainsKey(codeUpload)
                                                      ? fileUrlsDict[codeUpload]
                                                      : new List<string>();
                                                  }
                                                  <div class="row gx-5">
                                                    <div class="col-md-4 card-header">
                                                        <div class="mb-4">
                                                            <label for="@child_name" class="form-label">@child_label  <span class='text-danger'>@(child_isrequired == true ? "*" : "")</span></label>
                                                            <input class="form-control" type="file" id="@codeUpload" name="@codeUpload" data-target="@("#fileList-"+codeUpload)" data-carousel="@("#carouselSlideImage-"+codeUpload)" multiple />
                                                            @* tao danh sach file rong de xu ly js hiển thị *@
                                                            <ul id="@("fileList-"+codeUpload)"></ul>
                                                        </div>
                                                    </div>
                                                      @* Image slide *@
                                                       <div class="col-md-8">
                                                          <div id="@("carouselSlideImage-"+codeUpload)"
                                                                class="carousel slide carousel-fade w-50"
                                                                data-bs-ride="carousel">
                                                              <div class="carousel-indicators">
                                                                  @if (fileList != null)
                                                                  {
                                                                      bool isPreviousImg = true;
                                                                      for (int i = 0; i < fileList.Count; i++)
                                                                      {
                                                                          var fileUrl = fileList[i];
                                                                          int index = i;
                                                                          // kiem tra khong phai la img thi bo qua
                                                                          @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                          {
                                                                              isPreviousImg = false;
                                                                          }
                                                                          else
                                                                          {
                                                                              // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                              index = isPreviousImg == true ? index : index - 1;
                                                                              <button type="button"
                                                                                      data-bs-target="@("#carouselSlideImage-"+codeUpload)"
                                                                                      data-bs-slide-to="@index"
                                                                                      class="@(index == 0 ? "active" : "")"
                                                                                      aria-current="@(index == 0 ? "true" : "false")"
                                                                                      aria-label="Slide @(index + 1)">
                                                                              </button>
                                                                          }
                                                                      }
                                                                  }
                                                              </div>
                                                              <div class="carousel-inner">
                                                                  @if (fileList != null)
                                                                  {
                                                                      bool isPreviousImg = true;
                                                                      for (int i = 0; i < fileList.Count; i++)
                                                                      {
                                                                          var fileUrl = fileList[i];
                                                                          string fileName = fileUrl.Substring(fileUrl.LastIndexOf('/') + 1);
                                                                          int index = i;
                                                                          // kiem tra khong phai la img thi bo qua
                                                                          @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                          {
                                                                              isPreviousImg = false;
                                                                          }
                                                                          else
                                                                          {
                                                                              // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                              index = isPreviousImg == true ? index : index - 1;
                                                                              <div class="carousel-item @(index == 0 ? "active" : "")">
                                                                                  <img class="d-block w-100" src="@fileUrl" alt="@fileName" />
                                                                                  <div class="carousel-caption d-none d-md-block">
                                                                                      <h3 style="font-family: 'Shrikhand', cursive;font-weight:bold;"><a class="text-white" href="@fileUrl" target="_blank">@(fileUrl.Substring(fileUrl.LastIndexOf('/') + 1))</a></h3>
                                                                                  </div>
                                                                              </div>
                                                                          }
                                                                      }
                                                                  }
                                                              </div>
                                                              <a class="carousel-control-prev" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="prev">
                                                                  <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                                  <span class="visually-hidden">Previous</span>
                                                              </a>
                                                              <a class="carousel-control-next" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="next">
                                                                  <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                                  <span class="visually-hidden">Next</span>
                                                              </a>
                                                          </div>
                                                      </div>
                                                      @* end slide *@
                                                  </div>
                                                }
                                                else if (child_type == "HTMLEditor")
                                                {
                                                    <label for="@child_name" class="htmleditor-form-label">@child_label <span class='text-danger'>@(child_isrequired == true ? "*" : "")</span></label>
                                                    // Quill Editor hiển thị
                                                    <div id="@("editor-container-"+child_name)" style="height:300px;" class="quill-editor"></div>
                                                    // Hidden input để submit
                                                    <input type="hidden" id="@("editor-content-"+child_name)" name="@child_name" value="@child_value" />
                                                }
                                                else if (child_type == "DynamicReport")
                                                {
                                                    @* lấy các thông tin cấu hình riêng *@
                                                    string reportCode = field_editoroptionsDict.ContainsKey("reportCode") ? (field_editoroptionsDict["reportCode"].ToString() ?? "") : "";
                                                    bool isViewerUtility = field_editoroptionsDict.ContainsKey("isViewerUtility") ? Convert.ToBoolean(field_editoroptionsDict["isViewerUtility"]) : false;
                                                    bool isEditor = field_editoroptionsDict.ContainsKey("isEditor") ? Convert.ToBoolean(field_editoroptionsDict["isEditor"]) : false;

                                                    <div class="row gx-5">
                                                        <div class="col-md-12 card-header"><strong class="mb-0 text-primary">@child_label</strong></div>                        
                                                        <div class="col-md-12 card-body">
                                                            @* Khu vực chứa Report Editor *@
                                                            <div id="@("ReportEditor-" + child_name)" class="form-report-editor" data-reportcode = "@reportCode">

                                                            </div>
                                                        </div>
                                                    </div>
                                                }

                                                @{
                                                  // mot số trường sử dụng label riêng
                                                  string[] nolabel_fieldtypes = ["DynamicReport","FileUploader","HTMLEditor","RadioGroup","EmptyBox","ListSelection"];
                                                  if (!nolabel_fieldtypes.Contains(child_type))
                                                  {
                                                      <label for="@child_name">@child_label <span class='text-danger'>@(child_isrequired == true ? "*" : "")</span></label>
                                                  }
                                                }
                                                <div class="valid-feedback"> Chính xác! </div>
                                                <div class="invalid-feedback"> @child_required_message </div>
                                            </div>
                                          </div>
                                        }
                                    </div>
                                  </div>                              

                                }
                                else
                                {
                                  // nếu không phải là group item và không có parentId thì xử lý bình thường
                                  string[] noclasslabel_fieldtypes = ["RadioGroup","FileUploader","HTMLEditor"];
                                  <div class="col-md-@(Convert.ToInt32(field_width) == 0 ? "4" : field_width)">
                                    <div class="@(
                                                    noclasslabel_fieldtypes.Contains(type) ? "" : type == "CheckBox" ? "form-check mt-4" : type == "Switch" ? "form-check form-switch me-n3" : "form-floating form-floating-outline mb-6"
                                                  )">
                                      @if (type == "TextBox")
                                      {
                                          <input class="form-control form-control-sm" type="text" id="@name" name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "") />
                                      }
                                      else if (type == "TextArea")
                                      {
                                          // lấy thông tin chiều cao (mặc định 200)
                                          int height = field_editoroptionsDict.ContainsKey("height") ? Convert.ToInt32(field_editoroptionsDict["height"]) : 200;
                                          <textarea style="height:@(height + "px")" class="form-control" placeholder="@label" name="@name" id="@name" aria-label="@label" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "")>@value</textarea>
                                      }
                                      else if (type == "NumberBox")
                                      {
                                          <input class="form-control form-control-sm" type="number" id="@name"  name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "") />
                                      }
                                      else if (type == "DateBox")
                                      {
                                          @* mac dinh datetype la date *@
                                          string datetype = field_editoroptionsDict.ContainsKey("type") ? (field_editoroptionsDict["type"].ToString() ?? "date") : "date";
                                          <input class="form-control form-control-sm" type="@datetype" id="@name" name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "")/>
                                      }
                                      else if (type == "EmptyBox")
                                      {
                                          @* bỏ trống *@
                                      }
                                      else if (type == "SelectBox")
                                      {
                                          @* kiem tra neu co data fill store thi truyen vao (fill giá trị cho các field khác dựa vào giá trị của select box thông qua store) *@
                                          var dataFillStore = field_editoroptionsDict.ContainsKey("dataFillStore") ? (field_editoroptionsDict["dataFillStore"].ToString() ?? "") : "";
                                          @* check selected cho item dung voi gia tri *@
                                          var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                
                                          <select name="@name"
                                                  id="@name"
                                                  class="form-select color-dropdown form-select-sm"
                                                  data-datafillstore="@dataFillStore"
                                                  @(isrequired ? "required" : "")
                                                  @(isreadonly == true ? "disabled" : "")
                                          >
                                              <option value="">-- Chọn --</option>
                                              @foreach (var item in selectList)
                                              {
                                                  <option value="@item.Value"
                                                          selected="@(item.Value.ToString() == (value ?? "").ToString() ? "selected" : null)">
                                                      @item.Text
                                                  </option>
                                              }
                                          </select>
                                      }
                                      else if (type == "DropDownBox")
                                      {
                                              @* check selected cho item dung voi gia tri *@
                                              var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();

                                              <select name="@name"
                                                      id="@name"
                                                      class="form-select color-dropdown form-select-sm"
                                                      @(isrequired ? "required" : "")
                                                      @(isreadonly == true ? "disabled" : "")
                                                      multiple>
                                                  <option value="">-- Chọn --</option>
                                                  @foreach (var item in selectList)
                                                  {
                                                      value ??= "";
                                                      // split chuoi value thanh List string để xử lý
                                                      var splitvalue = value.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries);
                                                      // kiểm tra cac giá trị có khớp không
                                                      <option value="@item.Value"
                                                              selected="@((splitvalue.Any(s => s.Trim().Equals(item.Value.ToString(), StringComparison.OrdinalIgnoreCase))) ? "selected" : null)">
                                                          @item.Text
                                                      </option>
                                                  }
                                              </select>
                                      }
                                      else if (type == "TagBox")
                                      {
                                          // check selected cho item dung voi gia tri
                                          var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                          var tagBoxWhitelist = selectList.Select(x => new {
                                              value = x.Value,
                                              label = x.Text
                                          });

                                          // serialize whitelist tiếng Việt không bị escape unicode
                                          var whitelistJson = JsonConvert.SerializeObject(tagBoxWhitelist, new JsonSerializerSettings
                                          {
                                              StringEscapeHandling = StringEscapeHandling.Default
                                          });

                                          <input id="@name" class="tag-input form-control h-auto" name="@name" value="@value" data-jsonwhitelist='@whitelistJson' aria-label="@label" tabindex="-1">
                                      }
                                      else if (type == "ListSelection")
                                      {
                                          // check selected cho item dung voi gia tri
                                          var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                          string inputName = name; // ví dụ: "ListSelectionInput"
                                          var selectedValues = (value?.ToString() ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries).ToList();
                                          string hiddenInputId = $"hidden_{inputName}";

                                          <div class="selection-container">
                                              <label>@label  <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                              <input type="hidden" name="@inputName" id="@hiddenInputId" value="@value" />
    
                                              <div class="selection-list" data-target="@hiddenInputId">
                                                  @foreach (var item in selectList)
                                                  {
                                                      bool isSelected = selectedValues.Contains(item.Value);
                                                      <div class="selection-item @(isSelected ? "selected" : "")"
                                                           data-value="@item.Value">
                                                          @item.Text
                                                      </div>
                                                  }
                                              </div>
                                          </div>
                                      }
                                      else if (type == "RadioGroup")
                                      {
                                          <div class="d-lg-inline-block"><p class="text-light fw-medium d-block">@label: </p></div>
                                          // check selected cho item dung voi gia tri
                                          var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();

                                          @if (selectList != null)
                                          {
                                            foreach (var item in selectList)
                                            {
                                              <div class="form-check form-check-inline">
                                                  <input type="radio" class="form-check-input"
                                                          name="@name"
                                                          id="@(name + "_" + item.Value)"
                                                          value="@item.Value"
                                                  @((value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                  <label class="form-check-label" for="@(name + "_" + item.Value)">@item.Text</label>
                                              </div>
                                            }
                                          }
                                      }
                                      else if (type == "CheckBox" || type == "Switch")
                                      {
                                          <input class="form-check-input" type="checkbox" id="@name" name="@name" value="true" @((value ?? "").ToString().ToLower() == "true" ? "checked" : "") @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "")/>
                                      }
                                      else if (type == "FileUploader")
                                      {
                                        string codeUpload = field_optionsDict.ContainsKey("codeUpload") ? (field_optionsDict["codeUpload"].ToString() ?? "") : "";
                                        var fileList = new List<string>();
                                        if (fileUrlsDict != null)
                                        {
                                            fileList = fileUrlsDict != null && fileUrlsDict.ContainsKey(codeUpload)
                                            ? fileUrlsDict[codeUpload]
                                            : new List<string>();
                                        }
                                        <div class="row gx-5">
                                          <div class="col-md-4 card-header">
                                              <div class="mb-4">
                                                  <label for="@name" class="form-label">@label <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                                  <input class="form-control" type="file" id="@codeUpload" name="@codeUpload" data-target="@("#fileList-"+codeUpload)" data-carousel="@("#carouselSlideImage-"+codeUpload)" multiple />
                                                  @* tao danh sach file rong de xu ly js hiển thị *@
                                                  <ul id="@("fileList-"+codeUpload)"></ul>
                                              </div>
                                          </div>
                                            @* Image slide *@
                                             <div class="col-md-8">
                                                <div id="@("carouselSlideImage-"+codeUpload)"
                                                      class="carousel slide carousel-fade w-50"
                                                      data-bs-ride="carousel">
                                                    <div class="carousel-indicators">
                                                        @if (fileList != null)
                                                        {
                                                            bool isPreviousImg = true;
                                                            for (int i = 0; i < fileList.Count; i++)
                                                            {
                                                                var fileUrl = fileList[i];
                                                                int index = i;
                                                                // kiem tra khong phai la img thi bo qua
                                                                @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                {
                                                                    isPreviousImg = false;
                                                                }
                                                                else
                                                                {
                                                                    // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                    index = isPreviousImg == true ? index : index - 1;
                                                                    <button type="button"
                                                                            data-bs-target="@("#carouselSlideImage-"+codeUpload)"
                                                                            data-bs-slide-to="@index"
                                                                            class="@(index == 0 ? "active" : "")"
                                                                            aria-current="@(index == 0 ? "true" : "false")"
                                                                            aria-label="Slide @(index + 1)">
                                                                    </button>
                                                                }
                                                            }
                                                        }
                                                    </div>
                                                    <div class="carousel-inner">
                                                        @if (fileList != null)
                                                        {
                                                            bool isPreviousImg = true;
                                                            for (int i = 0; i < fileList.Count; i++)
                                                            {
                                                                var fileUrl = fileList[i];
                                                                string fileName = fileUrl.Substring(fileUrl.LastIndexOf('/') + 1);
                                                                int index = i;
                                                                // kiem tra khong phai la img thi bo qua
                                                                @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                {
                                                                    isPreviousImg = false;
                                                                }
                                                                else
                                                                {
                                                                    // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                    index = isPreviousImg == true ? index : index - 1;
                                                                    <div class="carousel-item @(index == 0 ? "active" : "")">
                                                                        <img class="d-block w-100" src="@fileUrl" alt="@fileName" />
                                                                        <div class="carousel-caption d-none d-md-block">
                                                                            <h3 style="font-family: 'Shrikhand', cursive;font-weight:bold;"><a class="text-white" href="@fileUrl" target="_blank">@(fileUrl.Substring(fileUrl.LastIndexOf('/') + 1))</a></h3>
                                                                        </div>
                                                                    </div>
                                                                }
                                                            }
                                                        }
                                                    </div>
                                                    <a class="carousel-control-prev" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="prev">
                                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                        <span class="visually-hidden">Previous</span>
                                                    </a>
                                                    <a class="carousel-control-next" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="next">
                                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                        <span class="visually-hidden">Next</span>
                                                    </a>
                                                </div>
                                            </div>
                                            @* end slide *@
                                        </div>
                                      }
                                      else if (type == "HTMLEditor")
                                      {
                                          <label for="@name" class="htmleditor-form-label">@label</label>
                                          // Quill Editor hiển thị
                                          <div id="@("editor-container-"+name)" style="height:300px;" class="quill-editor"></div>
                                          // Hidden input để submit
                                          <input type="hidden" id="@("editor-content-"+name)" name="@name" value="@value" />
                                      }
                                      else if (type == "DynamicReport")
                                      {
                                          @* lấy các thông tin cấu hình riêng *@
                                          string form_reportCode = field_editoroptionsDict.ContainsKey("reportCode") ? (field_editoroptionsDict["reportCode"].ToString() ?? "") : "";
                                          bool form_isViewerUtility = field_editoroptionsDict.ContainsKey("isViewerUtility") ? Convert.ToBoolean(field_editoroptionsDict["isViewerUtility"]) : false;
                                          bool form_isEditor = field_editoroptionsDict.ContainsKey("isEditor") ? Convert.ToBoolean(field_editoroptionsDict["isEditor"]) : false;

                                          <div class="row gx-5">
                                              <div class="col-md-12 card-header"><strong class="mb-0 text-primary">@label</strong></div>                        
                                              <div class="col-md-12 card-body">
                                                @* neu report dang editor thi load report editor, neu report dang viewer thi load report viewer *@
                                                @if (form_isEditor)
                                                {
                                                  @* Khu vực chứa Report Editor *@
                                                  <div id="@("ReportEditor-" + name)" class="form-report-editor" data-reportcode = "@form_reportCode">

                                                  </div>
                                                }
                                                else if (form_isViewerUtility)
                                                {
                                                  @* Khu vực chứa Report Viewer *@
                                                  <div id="@("ReportViewer-" + name)" class="form-report-viewer" data-reportcode = "@form_reportCode">

                                                  </div>
                                                }
                                                else{
                                                  @* Khu vực chứa Report Viewer *@
                                                  <div id="@("ReportViewer-" + name)" class="form-report-viewer" data-reportcode = "@form_reportCode">

                                                  </div>
                                                }
                                              </div>
                                          </div>
                                      }

                                      @* neu type dynamic report hoac file uploadder thì tự check label riêng *@
                                      @{
                                        string[] nolabel_fieldtypes = ["DynamicReport","FileUploader","HTMLEditor","RadioGroup","EmptyBox","ListSelection"];
                                        if (!nolabel_fieldtypes.Contains(type))
                                        {
                                          <label for="@name">@label <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                        }
                                      }
                                      <div class="valid-feedback"> Chính xác! </div>
                                      <div class="invalid-feedback"> @required_message </div>
                                  </div>
                                </div>
                                }
                            }
                              </div>
                            }
                    </div>
                </div>
              </form>
            </div>
        </div>
        <!-- end Booking form -->
    </div>
    <!-- / Content -->

    <div>
        <a type="button" class="btn btn-primary" href="javascript:history.back()"><i class="ri-arrow-left-circle-line"></i> Trở về</a>
    </div>

    @* @section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
 *@
