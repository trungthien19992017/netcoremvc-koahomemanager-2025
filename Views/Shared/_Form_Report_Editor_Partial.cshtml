@using KOAHome.Helpers
@using System.Text.Json
@{
    var resultList = ViewData["resultList"] as List<dynamic>;

    // truyen cau hinh report de xu ly giao dien
    var report = ViewData["report"] as IDictionary<string, object>;
    string ReportCode = ViewData["ReportCode"] as string;

    // truyen danh sach gia tri loc len giao dien
    var listFilterValue = ViewData["ListFilterValue"] as IDictionary<string, object>;
    var listFilterConfig = ViewData["ListFilterConfig"] as List<dynamic>;
    // danh sách select list chứa danh mục của các selectbox, radio, dropdownbox thuoc filter
    var dynamicServiceSelectOptions = ViewData["DynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;
    // danh sách select list chứa danh mục của các selectbox, radio, dropdownbox thuoc display editor
    var editorDynamicServiceSelectOptions = ViewData["EditorDynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;

    // truyen danh sach gia tri cot du lieu len giao dien
    var displayList = ViewData["displayList"] as List<dynamic>;
    // tính cấp cha con display (mac dinh chi lay 1)
    int displayParentLevelNum = ViewData.ContainsKey("displayParentLevelNum") ? Convert.ToInt32(ViewData["displayParentLevelNum"]) : 1;

    // tao bien dem de dem row num cho report
    var reportRowIndex = 1;

}

<div>
      @* table *@
      <div class="card mb-6">
          @if (report != null)
          {
          <div class="card-body" id="vertical-example">
            @* boc cac thanh phan cua table lai *@
            <div id="@("table-editor-" + (ReportCode ?? "emptycode") + "-wrap")">
                @* action top *@
                <div class="gx-3 gy-2 align-items-center report-top-action">
                </div>
                @* end action top *@
                <div class="d-flex justify-content-between align-items-center mt-3">
                    @* hien thi so dong duoc hien thi *@
                    <div class="report-info d-flex gap-2"></div>
                    @* button xu ly add row và submit *@
                    <div class="d-flex gap-2">
                        <button type="button" class="btn text-muted p-0" onclick="addNewRow('@("table-editor-" + ReportCode ?? "emptycode")')"><i class="ri-add-line ri-24px"></i></button>
                    </div>
                </div>
                @* hidden input để xử lý ẩn truyền dữ liệu từ param link vào bằng js *@
                <div id="hiddenInputs"></div>
                <div class="table-responsive" style="max-height: 300px">
                    <table id="@("table-editor-" + ReportCode ?? "emptycode")" data-table-displayname = "@(report.ContainsKey("Name") ? (report["Name"].ToString() ?? "Danh sách") : "Danh sách")" border="1" cellpadding="5" cellspacing="0" style="width: 100%; text-align: center; table-layout: auto;" class="table table-sm table-bordered table-hover display table-with-exportexcel">
                        <thead class="freepanze-head">
                            <tr>
                                @* neu display khong null thi tiep tuc *@
                                @if (displayList != null)
                                {
                                    @* voi moi cot dang co *@
                                    @* neu cot isdisplay = false thi không hien thi (chỉ lấy giá trị)  *@
                                    @foreach (var display in displayList.Where(p => p.IsDisplay == false).OrderBy(p => p.ColNum ?? 0).ToList())
                                    {
                                        <th class="text-center d-none" rowspan="@displayParentLevelNum" data-code="@display.Code" data-index="@(display.ColNum ?? "0")" data-isexport="@(display.IsExport ?? "True")">@Html.Raw(display.Name)</th>
                                    }
                                    @* hien thi cot stt dau tien neu co *@
                                    @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.Code == "stt" && p.IsParent == false && string.IsNullOrEmpty(p.ParentCode)).OrderBy(p => p.ColNum ?? 0).ToList())
                                    {
                                        @* co dinh cot neu co cau hinh (chi ap dung cho cot 1 rowspan) *@
                                        <th class="text-center @(display.IsFreePane == true ? "freepanze-col" : "")" rowspan="@displayParentLevelNum" data-code="@display.Code" data-index="@(display.ColNum ?? "0")" data-isexport="@(display.IsExport ?? "True")" style="min-width:@((display.Width ?? "200") + "px");@(display.CssHeader ?? "")">@Html.Raw(display.Name)</th>
                                    }
                                    @* neu cot khong co parent code cung khong phai is parent thi xu ly rieng *@
                                    @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.Code != "stt" && p.IsParent == false && string.IsNullOrEmpty(p.ParentCode)).OrderBy(p => p.ColNum ?? 0).ToList())
                                    {
                                        @* co dinh cot neu co cau hinh (chi ap dung cho cot 1 rowspan) *@
                                        <th class="text-center @(display.IsFreePane == true ? "freepanze-col" : "")" rowspan="@displayParentLevelNum" data-code="@display.Code" data-index="@(display.ColNum ?? "0")" data-isexport="@(display.IsExport ?? "True")" style="min-width:@((display.Width ?? "200") + "px");@(display.CssHeader ?? "")">@Html.Raw(display.Name)</th>
                                    }
                                    @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                    @if (displayList.Any(p => p.IsParent == true))
                                    {
                                        @* hien thi cot cha *@
                                        @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.IsParent == true).OrderBy(p => p.ColNum ?? 0).ToList())
                                        {
                                            @* dem so cot con de tinh colspan *@
                                            var countChild = displayList.Count(p => p.ParentCode == display.Code);
                                            @* neu co cot con thi xu ly tiep *@
                                            if (countChild > 0)
                                            {
                                                <th class="text-center" colspan="@countChild" data-code="@display.Code" data-isexport="@(display.IsExport ?? "True")" style="@(display.CssHeader ?? "")">@Html.Raw(display.Name)</th>
                                            }

                                        }
                                      }
                                      @* them nut xoa cuoi dòng *@
                                      <th class="text-center" style="width:100px;">Hành động</th>

                                  }
                            </tr>
                            @* neu co cap cha con thi tiep tuc *@
                            @if (displayParentLevelNum > 1)
                            {
                                <tr>
                                    @* neu display khong null thi tiep tuc *@
                                    @if (displayList != null)
                                    {
                                        @* voi moi cot dang co *@
                                        @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                        @if (displayList.Any(p => p.IsParent == true))
                                        {
                                            @* hien thi cot cha *@
                                            @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.IsParent == true).OrderBy(p => p.ColNum ?? 0).ToList())
                                            {
                                                @* dem so cot con de tinh colspan *@
                                                var countChild = displayList.Count(p => p.ParentCode == display.Code);
                                                @* neu co cot con thi xu ly tiep *@
                                                @if (countChild > 0)
                                                {
                                                    @foreach (var displaychild in displayList.Where(p => p.IsDisplay == true && p.ParentCode == display.Code).OrderBy(p => p.ColNum ?? 0).ToList())
                                                    {
                                                        <th class="text-center" data-code="@display.Code" data-index="@(displaychild.ColNum ?? "0")" data-isexport="@(displaychild.IsExport ?? "True")" style="min-width:@(displaychild.Width ?? "200")px;@(displaychild.CssHeader ?? "")">@Html.Raw(displaychild.Name)</th>
                                                    }
                                                }

                                            }
                                        }
                                    }
                                </tr>
                            }
                        </thead>
                        <tbody class="overflow-auto">
                            @if (resultList != null && displayList != null)
                            {
                                // Thêm dòng template rỗng
                                var templateRow = new Dictionary<string, object>();

                                foreach (var display in displayList)
                                {
                                   templateRow[display.Code] = null; // hoặc "" nếu cần
                                }

                                // Đánh dấu là dòng mẫu
                                templateRow["IsTemplateRow"] = true;

                                // Thêm lên đầu danh sách
                                resultList.Insert(0, templateRow);

                                @* voi moi dong resultlist *@
                                @foreach (var result in resultList
                                                                  .OrderBy(p =>
                                                                  {
                                                                      try
                                                                      {
                                                                          object sttObj;
                                                                          if (((IDictionary<string, object>)p).TryGetValue("stt", out sttObj) && sttObj != null)
                                                                          {
                                                                              return Convert.ToInt32(sttObj);
                                                                          }
                                                                      }
                                                                      catch { }
                                                                      return 0;
                                                                  })
                                                                  .ToList()
                                          )
                                {
                                    var dictionary = (IDictionary<string, object>)result;
                                    var Id = dictionary.ContainsKey("Id") ? Convert.ToInt32(dictionary["Id"]) : 0;
                                    @* lay gia tri to mau background row (BGColorRowClass) *@
                                    var bgColorRowClass = dictionary.ContainsKey("BGColorRowClass") ? Convert.ToString(dictionary["BGColorRowClass"]) : "";
                                    @* kiểm tra nếu là TemplateRow thì ẩn *@
                                    var isTemplateRow = dictionary.ContainsKey("IsTemplateRow") && (bool)dictionary["IsTemplateRow"];

                                    <tr class="@bgColorRowClass @(Convert.ToBoolean(isTemplateRow) ? "d-none" : "")" data-changed="false" data-template="@(Convert.ToBoolean(isTemplateRow) ? "true" : "false")">
                                        @* voi moi cot dang co *@
                                        @* neu cot isdisplay = false thi khong hien thi  *@
                                        @foreach (var display in displayList.Where(p => p.IsDisplay == false).OrderBy(p => p.ColNum ?? 0).ToList())
                                        {
                                            <td class="@FormatHelper.ParseTextAlignToClass(display.TextAlign) d-none" data-isexport="@(display.IsExport ?? "True")">
                                                @{
                                                    object value;
                                                    if (dictionary.TryGetValue(display.Code, out value))
                                                    {
                                                        <input class="form-control text-center" type="text" name="@("grid["+@reportRowIndex+"]."+display.Code)" value="@value" readonly />
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                    }
                                                }
                                            </td>
                                        }
                                        @* hien thi cot stt dau tien neu co *@
                                        @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.Code == "stt" && p.IsParent == false && string.IsNullOrEmpty(p.ParentCode)).OrderBy(p => p.ColNum ?? 0).ToList())
                                        {
                                            @* neu isFreePane bang true thi them class freepanze-col *@
                                            <td class="text-center @(display.IsFreePane == true ? "freepanze-col" : "")" data-isexport="@(display.IsExport ?? "True")">
                                                @{
                                                    object value;
                                                    if (dictionary.TryGetValue(display.Code, out value))
                                                    {
                                                        <input class="form-control text-center" type="text" name="@("grid["+@reportRowIndex+"]."+display.Code)" value="@value" readonly />
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                    }
                                                }
                                            </td>
                                        }
                                        @* neu cot khong co parent code cung khong phai is parent thi xu ly rieng *@
                                        @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.Code != "stt" && p.IsParent == false && string.IsNullOrEmpty(p.ParentCode)).OrderBy(p => p.ColNum ?? 0).ToList())
                                        {
                                            @* mặc định type là string *@
                                            var displayType = display.Type as string ?? "string";
                                            var displayFormat = display.Format as string ?? "";
                                            string[] numberTypeArray = ["int", "float", "long"];
                                            string[] dateTypeArray = ["date", "datetime"];
                                            @* neu isFreePane bang true thi them class freepanze-col *@
                                            <td class="@FormatHelper.ParseTextAlignToClass(display.TextAlign) @(display.IsFreePane == true ? "freepanze-col" : "")" data-isexport="@(display.IsExport ?? "True")" data-displaytype="@displayType" data-displayformat="@displayFormat">
                                                @{
                                                    object value;
                                                    if (dictionary.TryGetValue(display.Code, out value))
                                                    {
                                                        string valueType = "";
                                                        // kiem tra kieu du lieu cua value
                                                        if (@value != null)
                                                        {
                                                            valueType = value.GetType().ToString();
                                                        }
                                                            // uu tien kiem tra kieu du lieu cua value roi den display
                                                        // neu kieu du lieu cua value la boolean thi su dung check box
                                                        @if (valueType == "System.Boolean" || displayType == "boolean")
                                                        {
                                                            <input class="form-check-input track-change" type="checkbox" name="@("grid["+@reportRowIndex+"]."+display.Code)" value="true" @(Convert.ToBoolean(value ?? false) ? "checked" : "") @(display.ValidationRule != "[]" ? "required" : "") @(Convert.ToBoolean(display.IsReadOnly ?? false) ? "disabled" : "") />

                                                        }
                                                        else if (displayType == "icons")
                                                        {
                                                            var iconsJson = value?.ToString()?.Trim() ?? "";

                                                            // Nếu rỗng thì bỏ qua
                                                            if (!string.IsNullOrEmpty(iconsJson))
                                                            {
                                                            // Đảm bảo chuỗi JSON luôn là mảng
                                                                if (iconsJson.TrimStart().StartsWith("{"))
                                                                {
                                                                    iconsJson = "[" + iconsJson + "]";
                                                                }

                                                                try
                                                                {
                                                                    var icons = JsonSerializer.Deserialize<List<JsonElement>>(iconsJson);

                                                                    <ul class="list-unstyled m-0 avatar-group d-flex align-items-center">
                                                                        @foreach (var icon in icons)
                                                                        {
                                                                            var title = icon.GetProperty("title").GetString();
                                                                            var image = icon.GetProperty("image").GetString();
                                                                            <li data-bs-toggle="tooltip"
                                                                            data-popup="tooltip-custom"
                                                                            data-bs-placement="top"
                                                                            class="avatar avatar-xs pull-up"
                                                                            aria-label="@title"
                                                                            data-bs-original-title="@title">
                                                                                <img src="@image" alt="Avatar" class="rounded-circle" />
                                                                            </li>
                                                                        }
                                                                    </ul>
                                                                }
                                                                catch (Exception ex)
                                                                {
                                                                    <span class="text-danger">N/A</span>
                                                                }
                                                            }
                                                        }
                                                        // neu dang file thi hien thi icon tải nhiều file
                                                        else if (displayType == "file")
                                                        {
                                                            var filesJson = value?.ToString()?.Trim() ?? "";

                                                            // Nếu rỗng thì bỏ qua
                                                            if (!string.IsNullOrEmpty(filesJson))
                                                            {
                                                            // Nếu là object đơn, bao lại thành mảng
                                                                if (filesJson.StartsWith("{"))
                                                                {
                                                                    filesJson = "[" + filesJson + "]";
                                                                }

                                                                try
                                                                {
                                                                    var fileList = JsonSerializer.Deserialize<List<JsonElement>>(filesJson);

                                                                    if (fileList?.Count > 0)
                                                                    {
                                                                        <div class="d-flex flex-wrap gap-1">
                                                                            @foreach (var file in fileList)
                                                                            {
                                                                                var fileName = file.GetProperty("fileName").GetString();
                                                                                var url = file.GetProperty("url").GetString();
                                                                                var displayName = fileName?.Length > 50 ? fileName.Substring(0, 50) + "..." : fileName;

                                                                                <a href="@url" download class="btn btn-sm btn-outline-primary file-download-link" title="@fileName">
                                                                                    <i class="ri-download-2-fill"></i> @displayName
                                                                                </a>
                                                                            }
                                                                        </div>
                                                                    }
                                                                }
                                                                catch
                                                                {
                                                                    <span class="text-danger">Lỗi định dạng file JSON</span>
                                                                }
                                                            }
                                                        }
                                                        // neu la kieu link thi parse thanh html
                                                        else if (displayType == "link")
                                                        {
                                                            @Html.Raw(value);
                                                        }
                                                        // kiểu string
                                                        else if (displayType == "string")
                                                        {
                                                            <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(display.TextAlign)" type="text" name="@("grid["+@reportRowIndex+"]."+display.Code)" value="@value" @(Convert.ToBoolean(display.IsReadOnly ?? false) ? "readonly" : "") @(display.ValidationRule != "[]" ? "required" : "") />
                                                        }
                                                        // kiểu textarea
                                                        else if (displayType == "textarea")
                                                        {
                                                            <textarea row="2" class="form-control track-change @FormatHelper.ParseTextAlignToClass(display.TextAlign)" name="@("grid["+@reportRowIndex+"]."+display.Code)" aria-label="@display.Name" value="@value" @(Convert.ToBoolean(display.IsReadOnly ?? false) ? "readonly" : "") @(display.ValidationRule != "[]" ? "required" : "")></textarea>
                                                        }
                                                        // neu la kieu number thi hien thi input number 
                                                        else if (numberTypeArray.Contains(displayType))
                                                        {
                                                            <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(display.TextAlign)" type="number" placeholder="" name="@("grid["+@reportRowIndex+"]."+display.Code)" aria-label="@display.Name" value="@value" @(Convert.ToBoolean(display.IsReadOnly ?? false) ? "readonly" : "") @(display.ValidationRule != "[]" ? "required" : "")>
                                                        }
                                                        // kiểu ngày
                                                        else if (dateTypeArray.Contains(displayType))
                                                        {
                                                            string[] dateFormatArray = ["dd/MM/yyyy", ""];
                                                            string dateBoxType = "";
                                                            if (displayType == "date" && dateFormatArray.Contains(displayFormat)){
                                                                dateBoxType = "date";
                                                            }
                                                            else {
                                                                dateBoxType = "datetime-local";
                                                            }

                                                            <input type="@dateBoxType" class="form-control track-change @FormatHelper.ParseTextAlignToClass(display.TextAlign)" name="@("grid["+@reportRowIndex+"]."+display.Code)" aria-label="@display.Name" value="@value" @(Convert.ToBoolean(display.IsReadOnly ?? false) ? "readonly" : "") @(display.ValidationRule != "[]" ? "required" : "")>
                                                        }
                                                        else if (displayType == "combobox")
                                                        {
                                                            // check selected cho item dung voi gia tri
                                                            var selectList = editorDynamicServiceSelectOptions[display.Code] as List<SelectListItem> ?? new List<SelectListItem>();
                                                            @foreach (var item in selectList)
                                                            {
                                                                if (value != null)
                                                                {
                                                                  item.Selected = (item.Value.ToString() == value.ToString()); // currentValue là giá trị đang được chọn
                                                                }
                                                            }
                                                            var selectAttributes = new Dictionary<string, object>
                                                            {
                                                                { "class", "form-select color-dropdown form-select-sm track-change" },
                                                                { "name", ("grid["+@reportRowIndex+"]."+display.Code) }
                                                            };

                                                            // neu bat buoc thi them truong bat buoc
                                                            if (display.ValidationRule != "[]")
                                                            {
                                                                selectAttributes["required"] = "required";
                                                            }

                                                            @Html.DropDownList(("grid["+@reportRowIndex+"]."+display.Code), selectList, "-- Chọn --", selectAttributes)
                                                        }
                                                        else if (displayType == "radio")
                                                        {
                                                            // check selected cho item dung voi gia tri
                                                            var selectList = editorDynamicServiceSelectOptions[display.Code] as List<SelectListItem> ?? new List<SelectListItem>();

                                                            @if (selectList != null)
                                                            {
                                                                foreach (var item in selectList)
                                                                {
                                                                    <div class="form-check form-check-inline track-change">
                                                                        <input type="radio" class="form-check-input"
                                                                                name="@("grid["+@reportRowIndex+"]."+display.Code)"
                                                                                id="@(("grid["+@reportRowIndex+"]."+display.Code) + "_" + item.Value)"
                                                                                value="@item.Value"
                                                                        @((value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                                        <label class="form-check-label" for="@(("grid["+@reportRowIndex+"]."+display.Code) + "_" + item.Value)">@item.Text</label>
                                                                    </div>
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(display.TextAlign)" type="text" name="@("grid["+@reportRowIndex+"]."+display.Code)" value="@value" @(Convert.ToBoolean(display.IsReadOnly ?? false) ? "readonly" : "") @(display.ValidationRule != "[]" ? "required" : "") />
                                                                                  
                                                        }                                              }
                                                    else
                                                    {
                                                        <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                    }
                                                }
                                            </td>
                                        }
                                        @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                        @if (displayList.Any(p => p.IsParent == true))
                                        {
                                            @* hien thi cot cha *@
                                            @foreach (var display in displayList.Where(p => p.IsDisplay == true && p.IsParent == true).OrderBy(p => p.ColNum ?? 0).ToList())
                                            {
                                                @* dem so cot con de tinh colspan *@
                                                var countChild = displayList.Count(p => p.ParentCode == display.Code);
                                                @* neu co cot con thi xu ly tiep *@
                                                if (countChild > 0)
                                                {
                                                    @foreach (var displaychild in displayList.Where(p => p.IsDisplay == true && p.ParentCode == display.Code).OrderBy(p => p.ColNum ?? 0).ToList())
                                                    {
                                                        @* mặc định type là string *@
                                                        var displayType = displaychild.Type as string ?? "string";
                                                        var displayFormat = displaychild.Format as string ?? "";
                                                        string[] numberTypeArray = ["int", "float", "long"];
                                                        string[] dateTypeArray = ["date", "datetime"];
                                                        <td class="@FormatHelper.ParseTextAlignToClass(displaychild.TextAlign)" data-isexport="@(displaychild.IsExport ?? "0")" data-displaytype="@displayType" data-displayformat="@displayFormat">
                                                            @{
                                                                object value;
                                                                if (dictionary.TryGetValue(displaychild.Code, out value))
                                                                {
                                                                    string valueType = "";
                                                                    // kiem tra kieu du lieu cua value
                                                                    if (@value != null)
                                                                    {
                                                                        valueType = value.GetType().ToString();
                                                                    }
                                                                                          
                                                                    // uu tien kiem tra kieu du lieu cua value roi den display
                                                                    // neu kieu du lieu cua value la boolean thi su dung check box
                                                                    @if (valueType == "System.Boolean" || displayType == "boolean")
                                                                    {
                                                                        <input class="form-check-input track-change" type="checkbox" name="@("grid["+@reportRowIndex+"]."+displaychild.Code)" value="true" @(Convert.ToBoolean(value ?? false) ? "checked" : "") @(displaychild.ValidationRule != "[]" ? "required" : "") @(Convert.ToBoolean(displaychild.IsReadOnly ?? false) ? "disabled" : "") />

                                                                    }
                                                                    else if (displayType == "icons")
                                                                    {
                                                                        var iconsJson = value?.ToString()?.Trim() ?? "";

                                                                        // Nếu rỗng thì bỏ qua
                                                                        if (!string.IsNullOrEmpty(iconsJson))
                                                                        {
                                                                        // Đảm bảo chuỗi JSON luôn là mảng
                                                                            if (iconsJson.TrimStart().StartsWith("{"))
                                                                            {
                                                                                iconsJson = "[" + iconsJson + "]";
                                                                            }

                                                                            try
                                                                            {
                                                                                var icons = JsonSerializer.Deserialize<List<JsonElement>>(iconsJson);

                                                                                <ul class="list-unstyled m-0 avatar-group d-flex align-items-center">
                                                                                    @foreach (var icon in icons)
                                                                                    {
                                                                                        var title = icon.GetProperty("title").GetString();
                                                                                        var image = icon.GetProperty("image").GetString();
                                                                                        <li data-bs-toggle="tooltip"
                                                                                        data-popup="tooltip-custom"
                                                                                        data-bs-placement="top"
                                                                                        class="avatar avatar-xs pull-up"
                                                                                        aria-label="@title"
                                                                                        data-bs-original-title="@title">
                                                                                            <img src="@image" alt="Avatar" class="rounded-circle" />
                                                                                        </li>
                                                                                    }
                                                                                </ul>
                                                                            }
                                                                            catch (Exception ex)
                                                                            {
                                                                                <span class="text-danger">N/A</span>
                                                                            }
                                                                        }
                                                                    }
                                                                    // neu dang file thi hien thi icon tải nhiều file
                                                                    else if (displayType == "file")
                                                                    {
                                                                        var filesJson = value?.ToString()?.Trim() ?? "";

                                                                        // Nếu rỗng thì bỏ qua
                                                                        if (!string.IsNullOrEmpty(filesJson))
                                                                        {
                                                                        // Nếu là object đơn, bao lại thành mảng
                                                                            if (filesJson.StartsWith("{"))
                                                                            {
                                                                                filesJson = "[" + filesJson + "]";
                                                                            }

                                                                            try
                                                                            {
                                                                                var fileList = JsonSerializer.Deserialize<List<JsonElement>>(filesJson);

                                                                                if (fileList?.Count > 0)
                                                                                {
                                                                                    <div class="d-flex flex-wrap gap-1">
                                                                                        @foreach (var file in fileList)
                                                                                        {
                                                                                            var fileName = file.GetProperty("fileName").GetString();
                                                                                            var url = file.GetProperty("url").GetString();
                                                                                            var displayName = fileName?.Length > 50 ? fileName.Substring(0, 50) + "..." : fileName;

                                                                                            <a href="@url" download class="btn btn-sm btn-outline-primary file-download-link" title="@fileName">
                                                                                                <i class="ri-download-2-fill"></i> @displayName
                                                                                            </a>
                                                                                        }
                                                                                    </div>
                                                                                }
                                                                            }
                                                                            catch
                                                                            {
                                                                                <span class="text-danger">Lỗi định dạng file JSON</span>
                                                                            }
                                                                        }
                                                                    }
                                                                    // neu la kieu link thi parse thanh html
                                                                    else if (displayType == "link")
                                                                    {
                                                                        @Html.Raw(value);
                                                                    }
                                                                    // kiểu string
                                                                    else if (displayType == "string")
                                                                    {
                                                                        <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.TextAlign)" type="text" name="@("grid["+@reportRowIndex+"]."+displaychild.Code)" value="@value" @(Convert.ToBoolean(displaychild.IsReadOnly ?? false) ? "readonly" : "") @(displaychild.ValidationRule != "[]" ? "required" : "") />
                                                                    }
                                                                    // kiểu textarea
                                                                    else if (displayType == "textarea")
                                                                    {
                                                                        <textarea row="2" class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.TextAlign)" name="@("grid["+@reportRowIndex+"]."+displaychild.Code)" aria-label="@displaychild.Name" value="@value" @(Convert.ToBoolean(displaychild.IsReadOnly ?? false) ? "readonly" : "") @(displaychild.ValidationRule != "[]" ? "required" : "")></textarea>
                                                                    }
                                                                    // neu la kieu number thi hien thi input number 
                                                                    else if (numberTypeArray.Contains(displayType))
                                                                    {
                                                                        <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.TextAlign)" type="number" placeholder="" name="@("grid["+@reportRowIndex+"]."+displaychild.Code)" aria-label="@displaychild.Name" value="@value" @(Convert.ToBoolean(displaychild.IsReadOnly ?? false) ? "readonly" : "") @(displaychild.ValidationRule != "[]" ? "required" : "")>
                                                                    }
                                                                    // kiểu ngày
                                                                    else if (dateTypeArray.Contains(displayType))
                                                                    {
                                                                        string[] dateFormatArray = ["dd/MM/yyyy", ""];
                                                                        string dateBoxType = "";
                                                                        if (displayType == "date" && dateFormatArray.Contains(displayFormat)){
                                                                            dateBoxType = "date";
                                                                        }
                                                                        else {
                                                                            dateBoxType = "datetime-local";
                                                                        }

                                                                        <input type="@dateBoxType" class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.TextAlign)" name="@("grid["+@reportRowIndex+"]."+displaychild.Code)" aria-label="@displaychild.Name" value="@value" @(Convert.ToBoolean(displaychild.IsReadOnly ?? false) ? "readonly" : "") @(displaychild.ValidationRule != "[]" ? "required" : "")>
                                                                    }
                                                                    else if (displayType == "combobox")
                                                                    {
                                                                        // check selected cho item dung voi gia tri
                                                                        var selectList = editorDynamicServiceSelectOptions[displaychild.Code] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                        @foreach (var item in selectList)
                                                                        {
                                                                            if (value != null)
                                                                            {
                                                                              item.Selected = (item.Value.ToString() == value.ToString()); // currentValue là giá trị đang được chọn
                                                                            }
                                                                        }
                                                                        var selectAttributes = new Dictionary<string, object>
                                                                        {
                                                                            { "class", "form-select track-change" },
                                                                            { "name", ("grid["+@reportRowIndex+"]."+displaychild.Code) }
                                                                        };

                                                                        // neu bat buoc thi them truong bat buoc
                                                                        if (displaychild.ValidationRule != "[]")
                                                                        {
                                                                            selectAttributes["required"] = "required";
                                                                        }

                                                                        @Html.DropDownList(("grid["+@reportRowIndex+"]."+display.Code), selectList, "-- Chọn --", selectAttributes)
                                                                    }
                                                                    else if (displayType == "radio")
                                                                    {
                                                                        // check selected cho item dung voi gia tri
                                                                        var selectList = editorDynamicServiceSelectOptions[displaychild.Code] as List<SelectListItem> ?? new List<SelectListItem>();

                                                                        @if (selectList != null)
                                                                        {
                                                                            foreach (var item in selectList)
                                                                            {
                                                                                <div class="form-check form-check-inline track-change">
                                                                                    <input type="radio" class="form-check-input"
                                                                                            name="@("grid["+@reportRowIndex+"]."+displaychild.Code)"
                                                                                            id="@(("grid["+@reportRowIndex+"]."+displaychild.Code) + "_" + item.Value)"
                                                                                            value="@item.Value"
                                                                                    @((value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                                                    <label class="form-check-label" for="@(("grid["+@reportRowIndex+"]."+displaychild.Code) + "_" + item.Value)">@item.Text</label>
                                                                                </div>
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                          <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.TextAlign)" type="text" name="@("grid["+@reportRowIndex+"]."+displaychild.Code)" value="@value" @(Convert.ToBoolean(displaychild.IsReadOnly ?? false) ? "readonly" : "") @(displaychild.ValidationRule != "[]" ? "required" : "") />
                                                                    }                                              }
                                                                else
                                                                {
                                                                    <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                                }
                                                                }
                                                                else
                                                                {
                                                                    <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                                }
                                                            }
                                                        </td>
                                                    }
                                                }

                                            }
                                        }
                                        @* them nut xoa cuoi dong *@
                                          <td class="text-center">
                                              <input type="hidden" name="grid[@reportRowIndex].isDeleted" value="false" class="isDeleted track-change">
                                              <button type="button" class="btn-delete btn btn-sm text-danger" onclick="toggleDelete(this)">
                                                  <i class="ri-delete-bin-line ri-24px"></i>
                                              </button>
                                          </td>
                                    </tr>

                                    reportRowIndex++;
                                }
                            }
                        </tbody>
                    </table>
                </div>
              <!--/ Pagination Start -->
              <div class="col-12 report-pagination d-flex justify-content-end mt-3">
              </div>
              <!--/ Pagination End -->
            </div>
          </div>
          }
      </div>
      @* end table *@
</div>

<script>
    // tự động add param từ link vào hidden input
    window.addEventListener("DOMContentLoaded", () => {
      const urlParams = new URLSearchParams(window.location.search);
      const hiddenDiv = document.getElementById("hiddenInputs");

      urlParams.forEach((value, key) => {
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = "q_"+key;
        input.value = value;
        hiddenDiv.appendChild(input);
      });
    });


    // them dong editor moi
    function addNewRow(tableid = "ReportEditor") {
        debugger;
        const table = document.getElementById(tableid).getElementsByTagName('tbody')[0];
        const templateRow = table.querySelector('tr[data-template="true"]');
        const newIndex = table.rows.length + 1;

        if (!templateRow) {
            console.error("Không tìm thấy dòng mẫu!");
            return;
        }

        // 1. Destroy select2 trên templateRow trước
        const $select = $(templateRow).find("select");

        if ($select.hasClass("select2-hidden-accessible")) {
            $select.select2('destroy');
        }

        // Optionally clear ID (nếu cần clone nhiều dòng tránh id trùng)
        $select.removeAttr("id");

                // Clone dòng mẫu
        const newRow = templateRow.cloneNode(true);
        newRow.removeAttribute("data-template");
        newRow.style.display = "";
        // Gán thuộc tính change tracking nếu cần
        newRow.setAttribute("data-changed", "true");
        newRow.setAttribute("data-template", "false");
        // xóa class ẩn tr
        newRow.classList.remove("d-none");

        // Replace tất cả {{index}} trong thuộc tính name
        newRow.innerHTML = newRow.innerHTML.replace(/grid\[\d+\]/g, `grid[${newIndex}]`);

        // Thêm vào đầu bảng hoặc cuối bảng
        const firstRow = table.querySelector('tr[data-template="false"]');
        if (firstRow) {
            table.insertBefore(newRow, firstRow);
        } else {
            table.appendChild(newRow);
        }

        // Áp dụng Select2 nếu có
        $(newRow).find("select").select2({
            placeholder: "Chọn",
            allowClear: true,
            width: "100%"
        });
    }

        // sau khi load, tu dong cap nhat format date
        $(document).ready(function () {
            // Lấy tất cả các input có type="date" hoặc "datetime-local"
            $('input[type="date"], input[type="datetime-local"]').each(function () {
                let originalValue = $(this).attr('value');

                if (originalValue) {
                    if ($(this).attr("type") === "date") {
                        // Kiểm tra xem đã đúng định dạng YYYY-MM-DD chưa
                        let isoDateRegex = /^\d{4}-\d{2}-\d{2}$/;
                        if (!isoDateRegex.test(originalValue)) {
                            let formattedDate = moment(originalValue, ["M/D/YYYY h:mm:ss A", "DD/MM/YYYY", "YYYY-MM-DD"]).format("YYYY-MM-DD");
                            $(this).val(formattedDate); // Điền trực tiếp vào value
                            $(this).attr("value", formattedDate); // Cập nhật lại giá trị trong HTML
                        }
                    } else if ($(this).attr("type") === "datetime-local") {
                        // Kiểm tra xem đã đúng định dạng YYYY-MM-DDTHH:mm chưa
                        let isoDateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/;
                        if (!isoDateTimeRegex.test(originalValue)) {
                            let formattedDateTime = moment(originalValue, ["M/D/YYYY h:mm:ss A", "DD/MM/YYYY HH:mm:ss", "YYYY-MM-DDTHH:mm:ss"]).format("YYYY-MM-DDTHH:mm");
                            $(this).val(formattedDateTime); // Điền trực tiếp vào value
                            $(this).attr("value", formattedDateTime); // Cập nhật lại giá trị trong HTML
                        }
                    }
                }
            });
        });

         // xu ly nút xuat export, phan trang doi voi table cau hinh class table-with-exportexcel
        $(document).ready(function () {
            // voi moi class table with export excel se lay id va xu ly
            $('.table-with-exportexcel').each(function (index, tableElement) {
                var $table = $(tableElement);

                // Chỉ xử lý nếu table chưa init DataTable
                if ($.fn.DataTable.isDataTable(tableElement)) {
                    return; // bỏ qua nếu đã có DataTable
                }

                // Lấy pageTitle từ data-table-displayname
                var pageTitle = $table.attr('data-table-displayname')?.trim() || "Danh sách";

                // Xoá các ký tự đặc biệt không hợp lệ trong tên file (ví dụ: !, 🎉, ...)
                var sanitizedFilename = pageTitle.replace(/[^a-zA-Z0-9\u00C0-\u1EF9\s]/g, '').replace(/\s+/g, '_');

                // Xác định selector: nếu có id thì dùng id, không thì dùng class chung
                var selector = $table.attr('id') ? `#${$table.attr('id')}` : '.table-with-exportexcel';

                // Gọi hàm initExcelExportForTable để tìm table có class hoặc id liên quan để xử lý
                initExcelExportForTable(selector, {
                    // Thêm timestamp vào filename
                    filename: `${sanitizedFilename}_${getFormattedDateTime()}`,
                    title: pageTitle,
                    autoFilter: false,
                    sheetName: "Danh sách"
                });
            });
        });

          // tim kiem trong select box
        $(document).ready(function () {
            function initSelect2() {
              // không áp dụng cho Quiff HTML editor
                $("select") .not(".ql-toolbar select, .ql-container select, .ql-editor select").not(".select2-hidden-accessible").not(".dataTables_length select").select2({
                    placeholder: "Chọn",
                    allowClear: true,
                    width: "100%"
                });
            }

            // Khởi tạo Select2 cho các select đã có sẵn
            initSelect2();

        });


        // kiem tra nếu có nhập liệu trên bất kì dòng nào thì mới enable nút Lưu, và dòng nào nhập liệu thì mới truyền xuống IFormCollection
            // Theo dõi tất cả form trên trang
            document.querySelectorAll("form").forEach(form => {
                const table = form.querySelector("table"); // Tìm bảng trong form
                const submitButton = form.querySelector("button[type='submit']");

                if (!table || !submitButton) return; // Bỏ qua nếu không có bảng hoặc nút submit

                function checkChanges() {
                    let hasChanges = false;

                    // Kiểm tra nếu form không có id là "editor-form", trả về false và dừng
                    if (form.id !== "editor-form") {
                        submitButton.disabled = false; // Luôn bật nút lưu nếu không phải form editor-form
                        return;
                    }

                    // neu khong co tr nào co attr data change thi mac dinh hien thi nut Luu
                    if (table.querySelectorAll("tr[data-changed]").length == 0)
                    {
                      submitButton.disabled = false;
                      return;
                    }

                    table.querySelectorAll("tr").forEach(row => {
                        if (row.getAttribute("data-changed") === "true") {
                            hasChanges = true;
                        }
                    });

                    submitButton.disabled = !hasChanges; // Bật/tắt nút submit
                }

                // Một hàm duy nhất đánh dấu dòng thay đổi
                function markRowChanged(target) {
                    if (target.classList.contains("track-change")) {
                        const row = target.closest("tr");
                        if (row) {
                            row.setAttribute("data-changed", "true");
                            row.classList.add("row-changed"); // ➡️ Thêm dòng này để highlight
                            checkChanges();
                        }
                    }
                }

                // Theo dõi input và change chung
                table.addEventListener("input", event => {
                    markRowChanged(event.target);
                });

                table.addEventListener("change", event => {
                    markRowChanged(event.target);
                });

                // Nếu dùng jQuery và select2
                if (window.jQuery && $(table).length) {
                    $(table).on('select2:select select2:unselect', 'select.track-change', function (event) {
                        markRowChanged(event.target);
                    });
                }

                // Nếu người dùng click vào nút trong bảng
                table.addEventListener("click", event => {
                    const target = event.target;
                    if (target.closest("button")) {
                        const row = target.closest("tr");
                        if (row) {
                            row.setAttribute("data-changed", "true");
                            row.classList.add("row-changed"); // ➡️ Thêm dòng này để highlight
                            checkChanges();
                        }
                    }
                });

                    // Chỉ gử i dữ liệu của bảng đã thay đổi
                form.addEventListener("submit", function (event) {
                    let rows = table.querySelectorAll("tbody tr");

                    rows.forEach(row => {
                      // neu khong khai bao data change thi bo qua, neu co khai bao data change thi kiem tra = false thi xoa 
                        if (row.getAttribute('data-changed') !== undefined && row.getAttribute('data-changed') !== null)
                        {
                          if (row.getAttribute("data-changed") !== "true") {
                            row.remove(); // Xóa các dòng chưa thay đổi khỏi form trước khi submit
                          }
                        }
                    });

                    // form.submit();
                });

                checkChanges(); // Kiểm tra trạng thái ban đầu
            });
</script>
