@inject IHttpContextAccessor httpContextAccessor

<!DOCTYPE html>
<html lang="en"
  class='light-style layout-navbar-fixed layout-compact layout-menu-fixed layout-menu-collapsed'
  data-theme="theme-default" data-assets-path='@((httpContextAccessor.HttpContext?.Request.PathBase ?? "") + "/")'
  data-framework="aspnetcore-mvc"
  data-template='vertical-menu-aspnet-core-mvc-template-free'>

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />

    @* <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script> *@


  @{
        string title = ViewData["title"] as string ?? "";
        string appName = TempData.Peek("appName") as string ?? "";
        string productPage = TempData.Peek("productPage") as string ?? "";
    }
  <title>@title | @appName - Asp.Net Core MVC Product</title>
  <meta name="description" content="" />

  <!-- Canonical SEO -->
  <link rel="canonical" href='@productPage'>
  <!-- Favicon -->
  <link rel="icon" type="image/x-icon" href="~/img/icons/koa/koa-mascos-icon.ico" />

  <!-- fa fa icon -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <!-- Core Styles -->
  @await Html.PartialAsync("Sections/_Styles")

  <!-- Vendor Styles -->
  @RenderSection("VendorStyles", required: false)

  <!-- Page Styles -->
  @RenderSection("PageStyles", required: false)


  <!-- Include Scripts for customizer, helper, analytics, config -->
  @await Html.PartialAsync("Sections/_ScriptsIncludes")
</head>

<body>
  @RenderSection("Success", required: false)
  @RenderSection("ErrorMessage", required: false)
  <!-- Layout Content -->
  @RenderBody()
  <!--/ Layout Content -->

  <!-- Core Scripts -->
  @await Html.PartialAsync("Sections/_Scripts")

  <!-- Vendor Scripts -->
  @RenderSection("VendorScripts", required: false)



    <!--  script xu ly chung duoc viet trong master-->
  <script>
          // tim kiem trong select box
        function initSelect2() {
          // không áp dụng cho Quiff HTML editor
            $("select") .not(".ql-toolbar select, .ql-container select, .ql-editor select").not(".select2-hidden-accessible").not(".dt-length select").select2({
                placeholder: "Chọn",
                allowClear: true,
                width: "100%"
            });
        }

        $(document).ready(function () {
            // Khởi tạo Select2 cho các select đã có sẵn
            initSelect2();

        });
        

        // data fill sau khi on change select box
       $(document).ready(function() {
           $("select").change(function() {
               let value = $(this).val();
               let key = $(this).attr("name"); // Lấy name của select
               let datafillstore = $(this).data("datafillstore"); // Lấy giá trị từ data-datafillstore

               if (value && datafillstore && datafillstore != "") {
                   $.ajax({
                       url: `/NETForm/GetDataFillSelection`, // Sử dụng serviceStore để xác định API cần gọi
                       type: "GET",
                       data: {
                           value: value,
                           key: key,
                           datafillstore: datafillstore
                       },
                       success: function(data) {
                           console.log("Dữ liệu trả về:", data);
                           console.log("Loại dữ liệu:", typeof data); // Phải là "object"

                           $.each(data, function(key, value) {
                               let inputField = $(`[name='${key}'], [id='${key}']`);
                               if (inputField.length) {
                                   if (inputField.is(":radio")) {
                                       // Tìm radio button có giá trị tương ứng
                                       let radioToCheck = inputField.filter(`[value='${value}']`);

                                       if (radioToCheck.length) {
                                           // Nếu có radio button phù hợp, chọn nó
                                           radioToCheck.prop("checked", true);
                                       } else {
                                           // Nếu không tìm thấy giá trị tương ứng, bỏ chọn tất cả radio của nhóm đó
                                           inputField.prop("checked", false);
                                       }
                                   } else {
                                       // Nếu là input bình thường, gán giá trị trực tiếp
                                       inputField.val(value);
                                   }
                               }
                           });
                       },
                       error: function(xhr, status, error) {
                           console.error("Error:", xhr.responseText);
                       }
                   });
               }
           });
       });

        // // sau khi load, tu dong cap nhat format date
        // $(document).ready(function () {
        //     // Lấy tất cả các input có type="date" hoặc "datetime-local"
        //     $('input[type="date"], input[type="datetime-local"]').each(function () {
        //         let originalValue = $(this).attr('value');

        //         if (originalValue) {
        //             if ($(this).attr("type") === "date") {
        //                 // Kiểm tra xem đã đúng định dạng YYYY-MM-DD chưa
        //                 let isoDateRegex = /^\d{4}-\d{2}-\d{2}$/;
        //                 if (!isoDateRegex.test(originalValue)) {
        //                     let formattedDate = moment(originalValue, ["M/D/YYYY h:mm:ss A", "DD/MM/YYYY", "YYYY-MM-DD"]).format("YYYY-MM-DD");
        //                     $(this).val(formattedDate); // Điền trực tiếp vào value
        //                     $(this).attr("value", formattedDate); // Cập nhật lại giá trị trong HTML
        //                 }
        //             } else if ($(this).attr("type") === "datetime-local") {
        //                 // Kiểm tra xem đã đúng định dạng YYYY-MM-DDTHH:mm chưa
        //                 let isoDateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/;
        //                 if (!isoDateTimeRegex.test(originalValue)) {
        //                     let formattedDateTime = moment(originalValue, ["M/D/YYYY h:mm:ss A", "DD/MM/YYYY HH:mm:ss", "YYYY-MM-DDTHH:mm:ss"]).format("YYYY-MM-DDTHH:mm");
        //                     $(this).val(formattedDateTime); // Điền trực tiếp vào value
        //                     $(this).attr("value", formattedDateTime); // Cập nhật lại giá trị trong HTML
        //                 }
        //             }
        //         }
        //     });
        // });

        // sau khi load, tu dong cap nhat format date
        $(document).ready(function () {
            $('input[type="date"], input[type="datetime-local"]').each(function () {
                let originalValue = $(this).attr('value');

                if (originalValue) {
                    // Tạo moment từ nhiều format có thể gặp
                    let parsedDate = moment(originalValue, [
                        moment.ISO_8601,              // ISO format: 2025-05-24T10:30
                        "YYYY-MM-DD",                 // Chuẩn HTML date
                        "YYYY-MM-DDTHH:mm",           // Chuẩn HTML datetime-local
                        "M/D/YYYY h:mm:ss A",
                        "MM/DD/YYYY h:mm:ss A",
                        "MM/DD/YYYY HH:mm:ss",
                        "D/M/YYYY H:mm:ss",
                        "DD/MM/YYYY H:mm:ss",
                        "DD-MM-YYYY HH:mm:ss"
                    ], true); // 'true' = strict parsing

                    if (parsedDate.isValid()) {
                        if ($(this).attr("type") === "date") {
                            let formattedDate = parsedDate.format("YYYY-MM-DD");
                            $(this).val(formattedDate);
                            $(this).attr("value", formattedDate);
                            // console.log("Date field:", $(this).attr('name'), "value:", originalValue);
                        } else if ($(this).attr("type") === "datetime-local") {
                            let formattedDateTime = parsedDate.format("YYYY-MM-DDTHH:mm");
                            $(this).val(formattedDateTime);
                            $(this).attr("value", formattedDateTime);
                            // console.log("Date field:", $(this).attr('name'), "value:", originalValue);
                        }
                    } else {
                        console.warn("⚠️ ",$(this).attr('name')," Không parse được giá trị ngày: ", originalValue);
                    }
                }
            });
        });

          // function xoa dòng áp dụng cho report editor
          function toggleDelete(button) {
            var row = $(button).closest("tr");
            var isDeletedInput = row.find(".isDeleted");
            var idInput = row.find("input[name$='id']").val();

            if (idInput === "" || idInput === null) {
                row.remove(); // Xóa dòng nếu Id rỗng
            } else {
                var isDeleted = isDeletedInput.val() === "true";
                isDeletedInput.val(!isDeleted);

                if (!isDeleted) {
                    $(button).html('<i class="ri-recycle-line ri-24px text-warning"></i>');
                    // ✅ Đánh dấu dòng đã thay đổi (neu co)
                    row.attr("data-changed", "true");
                } else {
                    $(button).html('<i class="ri-delete-bin-line ri-24px text-danger"></i>');
                }
            }
        }

        // kiem tra de xet readonly form
          $(document).ready(function () {
            var isReadOnly = @Json.Serialize(ViewData["IsReadOnly"]);
            if (isReadOnly === true || isReadOnly === "1" || isReadOnly === 1) {
              // Chỉ đặt readonly cho input, textarea
              $("form input, form textarea").prop("readonly", true);

              // Chỉ đặt disable cho select
              $("form select").prop("disabled", true);

              // Chỉ disable nút submit
              $("form button[type='submit']").prop("disabled", true);
            }
        });

        // loai bo disable cho select trong truong hop form submit (ly do khi disabled thi IFormColletion khong lay duoc gia tri)
        $(document).ready(function () {
            $("form").on("submit", function () {
                    $("select:disabled").prop("disabled", false);
                });
        });

        // xu ly spinner khi load
        $(document).ready(function () {
            // Thêm Spinner vào body khi trang tải
            $("body").append(`
            <div id="loading-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; background: #96929e;opacity: 0.5;z-index: 2000;display: flex;justify-content: center;align-items: center;pointer-events: none;">
                <div id="spinner" style="background: rgba(0, 0, 0, 0.7);padding: 20px;border-radius: 10px;text-align: center;box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);">
                    <div class="spinner-border text-primary" role="status">
                          <span class="visually-hidden">Loading...</span>
                      </div>
                    <p style="text-align:center; font-weight:bold; color: white;">Đang xử lý...</p>
                </div>
            </div>
            `);

          let loadingTimeout;

          // Chỉ hiển thị spinner sau 2 giây khi trang load
          loadingTimeout = setTimeout(() => {
              $("#loading-overlay").show();
          }, 1000);

          // Khi trang load xong, hủy timeout và ẩn spinner
          $(window).on("load", function () {
              clearTimeout(loadingTimeout);
              if ($("#loading-overlay").length) {
                  $("#loading-overlay").hide();
              }
          });

          // Khi submit form, chỉ hiển thị sau 2 giây
          $(document).on("submit", "form", function () {
              clearTimeout(loadingTimeout);
              loadingTimeout = setTimeout(() => {
                  if ($("#loading-overlay").length) {
                      $("#loading-overlay").show();
                  }
              }, 1000);
          });

          // Khi AJAX request gửi đi, chỉ hiển thị sau 2 giây
          $(document).ajaxStart(function () {
              clearTimeout(loadingTimeout);
              loadingTimeout = setTimeout(() => {
                if ($("#loading-overlay").length) {
                    $("#loading-overlay").show();
                }
              }, 1000);
          });

          // Khi AJAX request hoàn tất, ẩn spinner ngay lập tức
          $(document).ajaxComplete(function () {
              clearTimeout(loadingTimeout);
              if ($("#loading-overlay").length) {
                  $("#loading-overlay").hide();
              }
          });

          // Ẩn spinner nếu có lỗi khi tải trang hoặc request thất bại
          $(window).on("error", function () {
              clearTimeout(loadingTimeout);
              if ($("#loading-overlay").length) {
                  $("#loading-overlay").hide();
              }
          });
        });

         // xử lý action report
          function handleAjaxConfirmed(id, listid, sqlstore, datasourceid) {
              // dua cac du lieu can truyen vao formdata
              var formData = new FormData();
              formData.append("id", id); // key cua du lieu
              formData.append("sqlstore", sqlstore); // Lấy sqlstore tu button truyen vao
              formData.append("datasourceid", datasourceid); // Lấy datasource tu button truyen vao
              formData.append("listid", listid); // list id xuất hiện khi chọn nhiều dòng table, áp dụng với nút on top

              // Gọi AJAX để gửi yêu cầu xóa
              $.ajax({
                  url: '/Home/Action_Confirmed', // Controller xử lý hành động
                  type: 'POST', // Hoặc 'GET' nếu phù hợp
                  data: formData, // Truyền ID của dòng cần hành động và store xử lý
                  processData: false, // Không chuyển `FormData` thành query string
                  contentType: false, // Để trình duyệt tự động đặt `content-type`
                  success: function (response) {
                      if (response.success) {
                          rplm({
                              title: "Xử lý thành công!",
                              text: "Hành động của bạn đã được xử lý.",
                              type: "success",
                              timer: 2000,
                              confirmButtonText: 'Xác nhận',
                              html: true
                          }, function () {
                              // reload lại sau khi đóng popup
                              location.reload();
                          });
                      } else {
                          rplm({
                              title: "Lỗi!",
                              text: response.errorMessage || "Có vấn đề xảy ra.",
                              type: "error",
                              timer: 2000,
                              confirmButtonText: 'Xác nhận',
                              html: true
                          });
                      }
                  },
                  error: function () {
                      rplm({
                          title: "Lỗi!",
                          text: "Lỗi khi kết nối đến máy chủ.",
                          type: "error",
                          timer: 2000,
                          confirmButtonText: 'Done',
                          html: true
                      });
                  }
              });
          }

        // xu ly confirm action store de hien thi popup confirm va xu ly ajax
        $('.confirmAction').on('click', function (e) {
            e.preventDefault(); // Ngăn chặn điều hướng khi click vào link
            
            var data = $(this).data();
            var id = data.id; // Lấy ID từ thuộc tính data-id
            var sqlstore = data.sqlstore; // lay du lieu store de xu ly (bat buoc)
            var datasourceid = data.datasourceid; // lay du lieu database de xu ly (neu có)
            // thông tin xác nhận
            var isconfirm = data.hasOwnProperty('isconfirm') ? data.isconfirm : false; // mặc định là không xác nhận
            var confirmtext = data.hasOwnProperty('confirmtext') ? data.confirmtext : "Hãy giúp tôi xác nhận lại lần nữa nhé";
            var confirmtitle = data.hasOwnProperty('confirmtitle') ? data.confirmtitle : "Xác nhận";
            var confirmbutton = data.hasOwnProperty('confirmbutton') ? data.confirmbutton : "Đồng ý!";

           if (isconfirm === false || isconfirm === "false") {
               // Không cần confirm -> xử lý ngay
               handleAjaxConfirmed(id, null, sqlstore, datasourceid);
           } else {
               // Cần xác nhận
               rplm({
                  title: confirmtitle || "Xác nhận",
                  text: confirmtext || "Hãy giúp tôi xác nhận lại lần nữa nhé",
                  type: "warning",
                  showCancelButton: true,
                  confirmButtonText: confirmbutton || "Đồng ý!",
                  cancelButtonText: "Hủy!",
                  animation: "tada",
                  modalNOverlay: "backShadow",
                  closeOnConfirm: false,
                  closeOnCancel: false,
                  showLoaderOnConfirm: true,
                  html: true
               }, function (isConfirm) {
                   if (isConfirm) {
                       handleAjaxConfirmed(id, null, sqlstore, datasourceid);
                   } else {
                       rplm({
                           title: "Đã hủy!",
                           text: "Hành động của bạn đã được hủy.",
                           type: "error",
                           timer: 2000,
                           confirmButtonText: 'Done',
                           html: true
                       });
                   }
               });
           }
        });

        // kiem tra nếu có nhập liệu trên bất kì dòng nào thì mới enable nút Lưu, và dòng nào nhập liệu thì mới truyền xuống IFormCollection
        document.addEventListener("DOMContentLoaded", function () {
            // Theo dõi tất cả form trên trang
            document.querySelectorAll("form").forEach(form => {
                const table = form.querySelector("table"); // Tìm bảng trong form
                const submitButton = form.querySelector("button[type='submit']");

                if (!table || !submitButton) return; // Bỏ qua nếu không có bảng hoặc nút submit

                function checkChanges() {
                    let hasChanges = false;

                     // Kiểm tra nếu form không có id là "editor-form", trả về false và dừng
                     if (form.id !== "editor-form") {
                         // Luôn bật nút lưu nếu không phải form editor-form
                         return;
                     }

                    // neu khong co tr nào co attr data change thi mac dinh hien thi nut Luu
                    if (table.querySelectorAll("tr[data-changed]").length == 0)
                    {
                      return;
                    }

                    table.querySelectorAll("tr").forEach(row => {
                        if (row.getAttribute("data-changed") === "true") {
                            hasChanges = true;
                        }
                    });

                    submitButton.disabled = !hasChanges; // Bật/tắt nút submit
                }

                // Một hàm duy nhất đánh dấu dòng thay đổi
                function markRowChanged(target) {
                    if (target.classList.contains("track-change")) {
                        const row = target.closest("tr");
                        if (row) {
                            row.setAttribute("data-changed", "true");
                            row.classList.add("row-changed"); // ➡️ Thêm dòng này để highlight
                            checkChanges();
                        }
                    }
                }

                // Theo dõi input và change chung
                table.addEventListener("input", event => {
                    markRowChanged(event.target);
                });

                table.addEventListener("change", event => {
                    markRowChanged(event.target);
                });

                // Nếu dùng jQuery và select2
                if (window.jQuery && $(table).length) {
                    $(table).on('select2:select select2:unselect', 'select.track-change', function (event) {
                        markRowChanged(event.target);
                    });
                }

                // Nếu người dùng click vào nút trong bảng
                table.addEventListener("click", event => {
                    const target = event.target;
                    if (target.closest("button")) {
                        const row = target.closest("tr");
                        if (row) {
                            row.setAttribute("data-changed", "true");
                            row.classList.add("row-changed"); // ➡️ Thêm dòng này để highlight
                            checkChanges();
                        }
                    }
                });

                // Chỉ gử i dữ liệu của bảng đã thay đổi
                form.addEventListener("submit", function (event) {
                    let rows = table.querySelectorAll("tbody tr");

                    rows.forEach(row => {
                      // neu khong khai bao data change thi bo qua, neu co khai bao data change thi kiem tra = false thi xoa 
                        if (row.getAttribute('data-changed') !== undefined && row.getAttribute('data-changed') !== null)
                        {
                          if (row.getAttribute("data-changed") !== "true") {
                            row.remove(); // Xóa các dòng chưa thay đổi khỏi form trước khi submit
                          }
                        }
                      // neu khong khai bao data template thi bo qua, neu co khai bao data template thi kiem tra = true thi xoa 
                        if (row.getAttribute('data-template') !== undefined && row.getAttribute('data-template') !== null)
                        {
                          if (row.getAttribute("data-template") == "true") {
                            row.remove(); // Xóa các dòng chưa thay đổi khỏi form trước khi submit
                          }
                        }
                    });

                    // form.submit();
                });

                checkChanges(); // Kiểm tra trạng thái ban đầu
            });
        });

           // xu ly thong bao
        $(document).ready(function () {
            $.ajax({
                url: `/Notifications/GetNotifications`, // Sử dụng serviceStore để xác định API cần gọi
                type: "GET",
                success: function (data) {
                    let notificationList = $("#notificationList");
                    let badge = $("#notificationBadge");
                    notificationList.empty();
                    let unreadCount = 0;

                    data.forEach(notification => {
                        let item = `
                            <li class="list-group-item list-group-item-action dropdown-notifications-item waves-effect ${notification.IsRead ? 'marked-as-read' : ''} align-items-start p-3 shadow-sm mb-2 border border-light-subtle  position-relative notify-card hover-shadow">
                                <div class="d-flex">
                                    <div class="flex-shrink-0 me-3">
                                        <div class="avatar bg-white p-1 rounded-circle">
                                            ${notification.images ? `<img src="${notification.images}" class="w-px-40 h-auto rounded-circle">` : '<span class="avatar-initial rounded-circle bg-label-danger">N/A</span>'}
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 text-primary fw-semibold">
                                            <i class="ri-calendar-check-line me-1 text-success"></i> ${notification.title}
                                        </h6>
                                        <div class="text-body small mb-1">
                                            <i class="ri-edit-2-line text-info me-1"></i> ${notification.content}
                                            <br>
                                            <span class="text-muted">→ Lý do phát sinh: </span>
                                        </div>
                                        <small class="text-muted"><i class="ri-time-line me-1"></i> ${notification.thoigian}</small>
                                    </div>
                                    <div class="flex-shrink-0 dropdown-notifications-actions">
                                        <a href="javascript:void(0)" class="dropdown-notifications-read" onclick="markAsRead(${notification.id})"><span class="badge badge-dot"></span></a>
                                        <a href="javascript:void(0)" class="dropdown-notifications-archive"><span class="ri-close-line"></span></a>
                                    </div>
                                </div>
                            </li>`;

                        notificationList.append(item);
                        if (!notification.IsRead) unreadCount++;

                        //cap nhat lai event remove notifications
                        document.querySelectorAll(".dropdown-notifications-archive").forEach(t => {
                                  t.addEventListener("click", e => {
                                  t.closest(".dropdown-notifications-item").remove()
                              })
                          })
                    });


                    $('#notificationBadge').html(data.length + " tin nhắn");
                    if (unreadCount > 0) {
                        badge.show();
                    } else {
                        badge.hide();
                    }
                },
                error: function () {
                    console.error("Không thể lấy dữ liệu thông báo.");
                }
            });
        });

        function markAsRead(id) {
            $.ajax({
                url: "/Notifications/MarkAsRead",
                method: "POST",
                data: { id: id },
                success: function (data) {
                    location.reload();
                },
                error: function (response) {
                    console.error("Không thể đánh dấu thông báo đã đọc.");
                }
            });
        }

        // ham xu ly chuyen html thanh text
        function htmlToCleanText(html) {
            const temp = document.createElement("div");
            temp.innerHTML = html;

            function processNode(node) {
                let result = "";

                node.childNodes.forEach((child) => {
                    if (child.nodeType === Node.TEXT_NODE) {
                        result += child.textContent.trim();
                    } else if (child.nodeType === Node.ELEMENT_NODE) {
                        const tag = child.tagName.toLowerCase();

                        if (tag === "br") {
                            result += "\n";
                        } else if (tag === "div") {
                            const inner = processNode(child);
                            if (inner.trim()) result += inner.trim() + "\n"; // Xuống dòng sau mỗi div
                        } else if (tag === "span" || tag === "b" || tag === "i") {
                            result += processNode(child); // Lấy text của các thẻ inline
                        } else {
                            result += processNode(child); // fallback
                        }
                    }
                });

                return result;
            }

            return processNode(temp).trim();
        }

        // ham xu ly xuat excel thong qua exceljs
        function exportTableToExcelJS(selector, filename = "export.xlsx") {
            const table = document.querySelector(selector);
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet("Danh sách");

            // kiem tra cot co duoc export khong? (neu isexport = 0 hoac class contain d-none thi khong export)
            const isCellExportable = (el) => {
                const style = window.getComputedStyle(el);
                const isHidden = style.display === "none" || el.classList.contains("d-none");
                const hasAttr = el.hasAttribute("data-isexport");
                const notExport = hasAttr && el.getAttribute("data-isexport") === "False";
                return !isHidden && (!hasAttr || !notExport);
            };

            // tính toán màu để loại bỏ alpha trong argb
            function rgbaToRgbSimulated(r, g, b, a, background = [255, 255, 255]) {
                const alpha = a; // từ 0 đến 1
                const [bgR, bgG, bgB] = background;

                const outR = Math.round(r * alpha + bgR * (1 - alpha));
                const outG = Math.round(g * alpha + bgG * (1 - alpha));
                const outB = Math.round(b * alpha + bgB * (1 - alpha));

                return [outR, outG, outB];
            }
            // to mau header export tuong ung voi mau header cua report
            const rgbToHexARGB = (rgb) => {
              const result = rgb.match(/-?\d+(\.\d+)?/g);;
              if (!result) return "FFFFFFFF"; // fallback trắng

              const [r, g, b, a = "1"] = result.map(Number);
              const [simR, simG, simB] = rgbaToRgbSimulated(r, g, b, a);

              return `FF${simR.toString(16).padStart(2, '0')}${simG.toString(16).padStart(2, '0')}${simB.toString(16).padStart(2, '0')}`.toUpperCase()
          };

            let rowIndex = 1;
            let columnTracker = [];

            // === GHI THEAD ===
            table.querySelectorAll("thead tr").forEach(tr => {
                const row = worksheet.getRow(rowIndex);
                let colIndex = 1;

                tr.querySelectorAll("th").forEach(th => {
                    if (!isCellExportable(th)) return;

                    while (columnTracker[colIndex]) colIndex++;

                    const cell = row.getCell(colIndex);
                    cell.value = th.innerText.trim();
                    cell.font = { bold: true };
                    const style = window.getComputedStyle(th);
                    const bgColor = rgbToHexARGB(style.backgroundColor);

                    cell.fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: bgColor }
                    };
                    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
                    cell.alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };

                    const colspan = parseInt(th.getAttribute("colspan")) || 1;
                    const rowspan = parseInt(th.getAttribute("rowspan")) || 1;

                    if (colspan > 1 || rowspan > 1) {
                        worksheet.mergeCells(rowIndex, colIndex, rowIndex + rowspan - 1, colIndex + colspan - 1);
                    }

                    if (rowspan > 1) {
                        for (let i = 0; i < colspan; i++) {
                            for (let r = 1; r < rowspan; r++) {
                                columnTracker[colIndex + i] ??= {};
                                columnTracker[colIndex + i][rowIndex + r] = true;
                            }
                        }
                    }

                    colIndex += colspan;
                });

                row.commit();
                rowIndex++;
                columnTracker = columnTracker.map(col => {
                    if (col && col[rowIndex]) {
                        delete col[rowIndex];
                        return col;
                    }
                    return col;
                });
            });

            // === GHI TBODY ===
            const thList = Array.from(table.querySelectorAll("thead th")).filter(isCellExportable);

            table.querySelectorAll("tbody tr").forEach(tr => {
                const row = worksheet.getRow(rowIndex);
                let colIndex = 1;

                Array.from(tr.querySelectorAll("td")).forEach((td, idx) => {
                    const relatedTh = table.querySelector(`thead th:nth-child(${idx + 1})`);
                    if (!isCellExportable(td) || (relatedTh && !isCellExportable(relatedTh))) return;

                    const cell = row.getCell(colIndex++);
                    // kiem tra neu td dang input check box thi get giá trị check được
                    const checkbox = td.querySelector('input[type="checkbox"]');
                    if (checkbox) {
                        cell.value = checkbox.checked ? "✔" : "✘"; // Hoặc "Có" / "Không"
                    } else {
                        const rawText = td.innerText.trim();

                        // Kiểm tra tồn tại attribute
                        const displayType = td.hasAttribute("data-displaytype") ? td.getAttribute("data-displaytype") : null;
                        const displayFormat = td.hasAttribute("data-displayformat") ? td.getAttribute("data-displayformat") : null;

                        // neu kieu date thi format date
                        if (displayType === "date") {
                            cell.value = rawText;
                        // neu la number thi format number
                        } else if (["int", "long", "float"].includes(displayType)) {
                            const numberValue = parseFloat(rawText.replace(/,/g, ""));
                            if (!isNaN(numberValue)) {
                                cell.value = numberValue;
                                cell.numFmt = displayFormat || "#,##0.##";
                            } else {
                                cell.value = rawText;
                            } 
                        } else {
                            // fallback: giữ nguyên như hiện tại
                            cell.value = rawText;
                        }
                    }
                    // lay style tu thuoc tinh tren grid
                    const style = window.getComputedStyle(td);
                    const bgColor = rgbToHexARGB(style.backgroundColor);
                    // Nếu màu nền là đen thì bỏ set màu nền
                    const cellFillColor = (bgColor === "00000000") ? undefined : { type: 'pattern', pattern: 'solid', fgColor: { argb: bgColor } };

                    // text align cho excel
                    const textAlign = style.textAlign;
                    const verticalAlign = style.verticalAlign;

                    cell.fill = cellFillColor;
                    cell.alignment = { vertical: verticalAlign, horizontal: textAlign, wrapText: true };
                    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
                });

                row.commit();
                rowIndex++;
            });

            // === TỰ CĂN CỘT ===
            worksheet.columns.forEach(column => {
                let maxLength = 10;
                column.eachCell({ includeEmpty: true }, cell => {
                    const text = cell.value?.toString() || "";
                    const firstLine = text.includes("\n") ? text.split("\n")[0] : text;
                    maxLength = Math.max(maxLength, firstLine.length);
                });
                column.width = maxLength + 2;
            });

            // === TẢI FILE ===
            workbook.xlsx.writeBuffer().then(buffer => {
                const blob = new Blob([buffer], { type: "application/octet-stream" });
                saveAs(blob, filename);
            });
        }

        // xu ly nút xuat export, phan trang doi voi table cau hinh class table-with-exportexcel
         function initExcelExportForTable(selector, options = {}) {
            // gia tri mac dinh
             const defaultOptions = {
                 header: true,
                 footer: true,
                 title: "Export",
                 filename: "export",
                 extension: ".xlsx",
                 createEmptyCells: false,
                 autoFilter: false,
                 sheetName: "Sheet1"
             };

             const config = { ...defaultOptions, ...options };

             let dt; // khai báo table toàn cục

             $(selector).each(function () {
                 $table = $(this);

                // ✅ Quan trọng: Tách template ROW trước khi init DataTable
                let $templateRow = $table.find('tbody tr[data-template="true"]').detach();

                 // xu ly data table
                 dt = $table.DataTable({
                     dom: '<"d-flex flex-wrap justify-content-between align-items-center datatable-top-component"<"d-flex flex-wrap"fl><"d-flex flex-wrap"B>>irtp',
                      select: {
                          style: "multi",
                          selector: "td input.dt-checkboxes" // chỉ khi click vào checkbox mới select
                      },
                      columnDefs: [
                        {
                          targets: 0,
                          orderable: !1,
                          searchable: !1,
                          title: '<input type="checkbox" class="form-check-input dt-checkboxes-select-all" id="select-all">',
                          responsivePriority: 3,
                          checkboxes: !0,
                          checkboxes: {
                              selectAllRender: '<input type="checkbox" class="form-check-input">',
                              selectRow: true  // Cho phép chọn dòng khi checkbox được chọn
                          },
                          render: function(data, type, row, meta) {
                              return '<input type="checkbox" class="dt-checkboxes form-check-input">'
                          }
                        },
                        {
                            className: 'control',
                            orderable: false,
                            targets: 1 // Cột đầu để hiển thị biểu tượng "+"
                        }
                      ],
                      buttons: [{
                          extend: "collection",
                          className: "btn btn-primary dropdown-toggle me-4 waves-effect waves-light",
                          text: '<i class="ri-download-line ri-16px me-1"></i> <span class="d-none d-sm-inline-block">Export</span>',
                          buttons: [{
                              extend: "print",
                              text: '<i class="ri-printer-line me-1" ></i>Print',
                              className: "dropdown-item",
                              exportOptions: {
                                  columns: [1, 2, 3, 4, 5],
                                  format: {
                                      body: function(e, t, n) {
                                          var a;
                                          return e.length <= 0 ? e : (e = $.parseHTML(e), a = "", $.each(e, function(e, t) {
                                              void 0 !== t.classList && t.classList.contains("customer-name") ? a += t.lastChild.firstChild.textContent : void 0 === t.innerText ? a += t.textContent : a += t.innerText
                                          }), a)
                                      }
                                  }
                              },
                              customize: function(e) {
                                  $(e.document.body).css("color", a).css("border-color", t).css("background-color", n), $(e.document.body).find("table").addClass("compact").css("color", "inherit").css("border-color", "inherit").css("background-color", "inherit")
                              }
                          }, {
                              extend: "csv",
                              text: '<i class="ri-file-text-line me-1" ></i>Csv',
                              className: "dropdown-item",
                              exportOptions: {
                                  columns: [1, 2, 3, 4, 5],
                                  format: {
                                      body: function(e, t, n) {
                                          var a;
                                          return e.length <= 0 ? e : (e = $.parseHTML(e), a = "", $.each(e, function(e, t) {
                                              void 0 !== t.classList && t.classList.contains("customer-name") ? a += t.lastChild.firstChild.textContent : void 0 === t.innerText ? a += t.textContent : a += t.innerText
                                          }), a)
                                      }
                                  }
                              }
                          }, {
                              extend: "excel",
                              text: '<i class="ri-file-excel-line me-1"></i>Excel',
                               className: "dropdown-item",
                                action: function (e, dt, button, config) {
                                  const table = dt.table().node(); // lấy <table> element
                                  const tableId = $(table).attr('id'); // lấy id từ table đúng context
                                  // dt = $table.DataTable();
                                      const oldPageLength = dt.page.len();
                                      dt.page.len(-1).draw(); // -1 = Hiển thị tất cả các dòng

                                      setTimeout(() => {
                                          exportTableToExcelJS('#' + tableId, config.filename + '.xlsx');
    
                                          // sau khi export xong, trở về số trang cũ
                                          dt.page.len(oldPageLength).draw(); // hoặc dt.page.len(oldLen).draw();
                                      }, 500);
                                },
                               filename: config.filename,
                               customize: config.customize || null,
                               exportOptions: config.exportOptions || {},
                               header: config.header,
                               footer: config.footer,
                               title: config.title,
                               messageTop: config.messageTop || null,
                               messageBottom: config.messageBottom || null,
                               autoFilter: config.autoFilter,
                               sheetName: config.sheetName,
                               exportOptions: {
                                   columns: ':visible',
                                   stripHtml: true // Loại bỏ tất cả HTML, chỉ lấy văn bản
                               },
                               customize: function (xlsx) {
                                   var sheet = xlsx.xl.worksheets["sheet1.xml"];
                                   var rows = $("row", sheet);
                                   // Mặc định tô màu header
                                   // rows.eq(0).attr("s", "2");
                                   // $('row:first c', sheet).attr( 's', '42' );
                                   rows.eq(1).find("c").attr("s", "42");
                                 
                                  // Tô màu cả 2 dòng header nếu có (dòng 0 và dòng 1)
                                  rows.eq(0).find("c").attr("s", "42"); // Style 42 là header
                                  rows.eq(1).find("c").attr("s", "42");
                               }
                          }, {
                              extend: "pdf",
                              text: '<i class="ri-file-pdf-line me-1"></i>Pdf',
                              className: "dropdown-item",
                              filename: 'exported-pdf',  // Tên file PDF khi tải về
                              title: 'My Exported PDF',  // Tiêu đề file PDF
                              orientation: 'landscape',   // Hướng trang (portrait hoặc landscape)
                              pageSize: 'A4',            // Kích thước trang
                              customize: function(doc) {
                                  doc.styles = {
                                      tableHeader: {
                                          bold: true,
                                          fontSize: 14,
                                          color: 'black',
                                          fillColor: '#f2f2f2',
                                          alignment: 'center',
                                          padding: 8
                                      },
                                      table: {
                                          fontSize: 10,
                                          alignment: 'left'
                                      }
                                  };
                                  doc.header = function() {
                                      return {
                                          text: 'Custom Header',
                                          alignment: 'center',
                                          fontSize: 16,
                                          bold: true,
                                          margin: [0, 10]
                                      };
                                  };

                                  doc.footer = function(currentPage, pageCount) {
                                      return {
                                          text: 'Page ' + currentPage + ' of ' + pageCount,
                                          alignment: 'center',
                                          fontSize: 10,
                                          margin: [0, 10]
                                      };
                                  };
                                  
                                  // Tự động điều chỉnh độ rộng cột trong PDF
                                  var columns = doc.content[1].table.body;
                                  columns.forEach(function(row, index) {
                                      row.forEach(function(cell, cellIndex) {
                                          // Điều chỉnh cột cho phù hợp với nội dung
                                          if (index === 0) {
                                              cell.styles = { alignment: 'left', fontSize: 10, minWidth: 50 };
                                          }
                                          else {
                                              cell.styles = { alignment: 'left', fontSize: 10, autoSize: true };
                                          }
                                      });
                                  });

                              },
                              exportOptions: {
                                         columns: ':visible', // Chỉ xuất các cột đang visible
                                         stripHtml: true // Loại bỏ tất cả HTML và chỉ lấy văn bản
                                     }
                          }, {
                              extend: "copy",
                              text: '<i class="ri-file-copy-line me-1"></i>Copy',
                              className: "dropdown-item",
                              exportOptions: {
                                  columns: [1, 2, 3, 4, 5],
                                  format: {
                                      body: function(e, t, n) {
                                          var a;
                                          return e.length <= 0 ? e : (e = $.parseHTML(e), a = "", $.each(e, function(e, t) {
                                              void 0 !== t.classList && t.classList.contains("customer-name") ? a += t.lastChild.firstChild.textContent : void 0 === t.innerText ? a += t.textContent : a += t.innerText
                                          }), a)
                                      }
                                  }
                              }
                          }]
                      }],
                     // phan trang
                     lengthMenu: [10, 20, 50, 100], // Các tùy chọn số lượng bản ghi
                     pageLength: 20, // Mặc định hiển thị 25 bản ghi trên mỗi trang
                     lengthChange: true,
                     // mac dinh sap xep theo controller
                      ordering: true,        // bật tính năng sắp xếp
                      order: [],             // KHÔNG sắp xếp cột nào mặc định
                      autoWidth: false,
                     // hien thi
                     language: {
                             lengthMenu: "_MENU_",
                             search: "",
                             searchPlaceholder: "Tìm kiếm",
                             info: "Hiển thị dòng <span class='highlight'>_START_</span> đến <span class='highlight'>_END_</span> của <span class='highlight'>_TOTAL_</span> kết quả",
                              paginate: {
                                  previous: "<i class='ri-arrow-left-s-line'></i>",  // hoặc "Trước"
                                  next: "<i class='ri-arrow-right-s-line'></i>"       // hoặc "Tiếp"
                              },
                              emptyTable: "Không có dữ liệu để hiển thị", // <-- Thay đổi dòng chữ tại đây
                              zeroRecords: "Không có kết quả phù hợp với tiêu chí tìm kiếm", // 	Khi không có kết quả khớp với từ khóa tìm kiếm
                              loadingRecords: "Đang tải...",  // Khi loading
                              processing: "Đang xử lý...",    // Khi server-side processing
                              select: {
                                  rows: {
                                    0: "",
                                    _: " (<span class='highlight'>%d</span> dòng được chọn</div>)"
                                  }
                              }
                         },
                    // popup thông tin chi tiết dòng khi response
                    responsive: {
                        details: {
                            display: DataTable.Responsive.display.modal({
                                header: function(row) {
                                    return 'Chi tiết'; // hoặc tùy cột có sẵn
                                }
                            }),
                            type: 'column',
                            target: 1,
                            renderer: function(api, rowIdx, columns) {
                                const tr = api.row(rowIdx).node(); // truy cập hàng HTML gốc
                                const tds = $(tr).find('td');

                                let htmlRows = columns.map(function(col,index) {  
                                    const td = tds.eq(index);
                                    // nếu là cột ẩn hoặc là cột check box mặc định hoặc là Id thì không hiển thị
                                    if (td.hasClass('d-none') || col.title.includes("dt-checkboxes-select-all") || col.title.toLowerCase().includes("id")) {
                                        return ''; // bỏ qua nếu có class d-none
                                    }
                                    if (col.title && col.title.trim() !== '') {
                                        return `
                                            <tr data-dt-row="${col.rowIndex}" data-dt-column="${col.columnIndex}">
                                                <td><strong>${col.title}</strong></td>
                                                <td>${col.data}</td>
                                            </tr>
                                        `;
                                    }
                                    return '';
                                }).join('');

                                if (htmlRows) {
                                    const wrapper = document.createElement('div');
                                    wrapper.classList.add('table-responsive');

                                    const table = document.createElement('table');
                                    table.classList.add('table', 'table-bordered', 'table-sm');

                                    const tbody = document.createElement('tbody');
                                    tbody.innerHTML = htmlRows;

                                    table.appendChild(tbody);
                                    wrapper.appendChild(table);

                                    return wrapper;
                                }

                                return false;
                            }
                        }
                    },
                    initComplete: function (settings, json) {
                        console.log('Init complete:', settings);
                    },
                    drawCallback: function (settings) {
                        console.log('Draw callback:', settings);
                    },
                    // headerCallback: function(thead, data, start, end, display) {
                    //     $(thead).find('th').eq(0).html('<input type="checkbox" class="form-check-input dt-checkboxes-select-all">');
                    // },
                    infoCallback: function(settings, start, end, max, total, pre) {
                        // Lấy những hàng được áp dụng bộ lọc từ DataTable (vẫn bao gồm cả hàng có class 'd-none')
                        var nodes = this.api().rows({ filter: 'applied' }).nodes();
                        // Lọc và đếm các hàng không có class 'd-none'
                        var visibleCount = $(nodes).filter(function() {
                            return !$(this).hasClass('d-none');
                        }).length;

                        // tính số dòng không hiển thị
                        var dNoneCount = total - visibleCount

                        if (visibleCount == 0)
                        {
                          return "Không có kết quả tìm kiếm";
                        }

                        // nếu là trang cuối thì end - số dòng không hiển thị
                        if (end == total)
                        {
                          end = visibleCount
                        }
                        // Tùy chỉnh chuỗi hiển thị
                        return "Hiển thị dòng <span class='highlight'>"+start+"</span> đến <span class='highlight'>"+end+"</span> của <span class='highlight'>"+visibleCount+"</span> kết quả";
                    }
                 });

               // Di chuyển phần phân trang ra ngoài bảng
               // doi phan trang va cac nut xuat, tìm kiem ra ngoai (yeu cau class table-pagination va table-top-action table-info)
               dt.on('draw', function () {
                   // attachSelectAllHandler(dt);
                   // var wrapselector_id = selector + "-wrap";

                   //  // chuyển toàn bộ class của wrapper tự gen sang cho wrap tự tạo
                   //  var wrapper = $(selector + "_wrapper");
                   //  var target = $(wrapselector_id);

                   //  // Lấy danh sách class từ wrapper và gán sang target
                   //  var classes = wrapper.attr('class');
                   //  if (classes) {
                   //    target.addClass(classes);
                   //  }

                   // // Move pagination vào đúng chỗ
                   //  $(wrapselector_id + ' .dt-paging').appendTo(wrapselector_id + ' .report-pagination');
                   //  // Move info vào đúng chỗ nếu bạn cần
                   //  $(selector + '_info').appendTo(wrapselector_id + ' .report-info');
                   //  // Move filter + length nếu cần
                   //  $(wrapselector_id + ' .datatable-top-component').appendTo(wrapselector_id + ' .report-top-action');

                    // đính kèm chức năng chọn nhiều
                    attachSelectAllHandler(dt);

                  const $tbody = $table.find('tbody');

                  // Tránh thêm trùng
                  if ($tbody.find('tr[data-template="true"]').length === 0) {
                      $tbody.append($templateRow);
                  }

               });

               // Gọi lần đầu sau khi DataTable load xong
               var wrapselector_id = selector + "-wrap";
               
               // chuyển toàn bộ class của wrapper tự gen sang cho wrap tự tạo
               var wrapper = $(selector + "_wrapper");
               var target = $(wrapselector_id);

               // Lấy danh sách class từ wrapper và gán sang target
               var classes = wrapper.attr('class');
               if (classes) {
                 target.addClass(classes);
               }

               // Move pagination vào đúng chỗ
                $(wrapselector_id + ' .dt-paging').appendTo(wrapselector_id + ' .report-pagination');
                // Move info vào đúng chỗ nếu bạn cần
                $(selector + '_info').appendTo(wrapselector_id + ' .report-info');
                // Move filter + length nếu cần
                $(wrapselector_id + ' .datatable-top-component').appendTo(wrapselector_id + ' .report-top-action');
                
                // Gọi sau khi DataTable đã khởi tạo
                // đính kèm chức năng chọn nhiều
                attachSelectAllHandler(dt);

              const $tbody = $table.find('tbody');

              // Tránh thêm trùng
              if ($tbody.find('tr[data-template="true"]').length === 0) {
                  $tbody.append($templateRow);
              }
             });

            // Hàm xử lý chọn tất cả và đồng bộ
            function attachSelectAllHandler(dt) {
                // Chọn tất cả
                $('#select-all').on('change', function () {
                    const isChecked = $(this).prop('checked');
                    $('#table-viewer-F0_HS_Booking1 tbody input.dt-checkboxes').prop('checked', isChecked).trigger('change');
                });

                // Khi mỗi checkbox thay đổi
                $('#table-viewer-F0_HS_Booking1 tbody').on('change', 'input.dt-checkboxes', function () {
                    const tr = $(this).closest('tr');
                    const row = dt.row(tr);

                    // Sync checkbox với select của datatable
                    if (this.checked) {
                        row.select();
                    } else {
                        row.deselect();
                    }

                    // Nếu tất cả đã chọn => tích vào selectAllCheckbox, ngược lại bỏ
                    const allCheckboxes = $('#table-viewer-F0_HS_Booking1 tbody input.dt-checkboxes');
                    const checkedlength = allCheckboxes.filter(':checked').length;
                    const selectAll = $('#select-all')[0];

                    if (checkedlength === 0) {
                        selectAll.checked = false;
                        selectAll.indeterminate = false;
                    } else if (checkedlength === allCheckboxes.length) {
                        selectAll.checked = true;
                        selectAll.indeterminate = false;
                    } else {
                        selectAll.checked = false;
                        selectAll.indeterminate = true;
                    }
                });
            }

     
               // xu ly confirm action store trên top của table de hien thi popup confirm va xu ly ajax
              // (Mục tiêu: truyền ListId từ table)
              $('.confirmActionTop').on('click', function (e) {
                  e.preventDefault(); // Ngăn chặn điều hướng khi click vào link

                  // lấy danh sách các dòng được chọn, tìm data-value trong cột checkbox
                  const selectedRows = dt.rows({ selected: true }).nodes(); // DOM nodes
                  const selectedIds = [];

                  selectedRows.each(function(row) {
                    // Lấy cột đầu tiên (có checkbox), giả sử là td:nth-child(1)
                    const td = $('td', row).eq(0); 
                    const id = td.data('value'); // lấy từ data-value
                    if (id !== undefined) {
                      selectedIds.push(id);
                    }
                  });

                  const listid = selectedIds.join(',');
                  console.log("Selected IDs:", listid);

                  var data = $(this).data();
                  // var id = data.id; // Lấy ID từ thuộc tính data-id
                  var sqlstore = data.sqlstore; // lay du lieu store de xu ly (bat buoc)
                  var datasourceid = data.datasourceid; // lay du lieu database de xu ly (neu có)
                  
                  // thông tin xác nhận
                  var isconfirm = data.hasOwnProperty('isconfirm') ? data.isconfirm : false; // mặc định là không xác nhận
                  var confirmtext = data.hasOwnProperty('confirmtext') ? data.confirmtext : "Hãy giúp tôi xác nhận lại lần nữa nhé";
                  var confirmtitle = data.hasOwnProperty('confirmtitle') ? data.confirmtitle : "Xác nhận";
                  var confirmbutton = data.hasOwnProperty('confirmbutton') ? data.confirmbutton : "Đồng ý!";

                  if (isconfirm === false || isconfirm === "false") {
                      // Không cần confirm -> xử lý ngay
                      handleAjaxConfirmed(null, listid, sqlstore, datasourceid);
                  } else {
                      // Cần xác nhận
                      rplm({
                        title: confirmtitle || "Xác nhận",
                        text: confirmtext || "Hãy giúp tôi xác nhận lại lần nữa nhé",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonText: confirmbutton || "Đồng ý!",
                        cancelButtonText: "Hủy!",
                        animation: "tada",
                        modalNOverlay: "backShadow",
                        closeOnConfirm: false,
                        closeOnCancel: false,
                        showLoaderOnConfirm: true,
                        html: true
                      }, function (isConfirm) {
                          if (isConfirm) {
                              handleAjaxConfirmed(null, listid, sqlstore, datasourceid);
                          } else {
                              rplm({
                                  title: "Đã hủy!",
                                  text: "Hành động của bạn đã được hủy.",
                                  type: "error",
                                  timer: 2000,
                                  confirmButtonText: 'Done',
                                  html: true
                              });
                          }
                      });
                  }
              });
         }

         function getFormattedDateTime() {
             var now = new Date();
             var year = now.getFullYear();
             var month = String(now.getMonth() + 1).padStart(2, '0');
             var day = String(now.getDate()).padStart(2, '0');
             var hours = String(now.getHours()).padStart(2, '0');
             var minutes = String(now.getMinutes()).padStart(2, '0');
             var seconds = String(now.getSeconds()).padStart(2, '0');

             return `${year}${month}${day}_${hours}${minutes}${seconds}`;
         }

         // xu ly nút xuat export, phan trang doi voi table cau hinh class table-with-exportexcel
        $(document).ready(function () {
            // voi moi class table with export excel se lay id va xu ly
            $('.table-with-exportexcel').each(function (index, tableElement) {
                var $table = $(tableElement);
                
                // Chỉ xử lý nếu table chưa init DataTable
                if ($.fn.DataTable.isDataTable(tableElement)) {
                    return; // bỏ qua nếu đã có DataTable
                }

                // Lấy pageTitle từ data-table-displayname
                var pageTitle = $table.attr('data-table-displayname')?.trim() || "Danh sách";

                // Xoá các ký tự đặc biệt không hợp lệ trong tên file (ví dụ: !, 🎉, ...)
                var sanitizedFilename = pageTitle.replace(/[^a-zA-Z0-9\u00C0-\u1EF9\s]/g, '').replace(/\s+/g, '_');

                // Xác định selector: nếu có id thì dùng id, không thì dùng class chung
                var selector = $table.attr('id') ? `#${$table.attr('id')}` : '.table-with-exportexcel';

                // Gọi hàm initExcelExportForTable để tìm table có class hoặc id liên quan để xử lý
                initExcelExportForTable(selector, {
                    // Thêm timestamp vào filename
                    filename: `${sanitizedFilename}_${getFormattedDateTime()}`,
                    title: pageTitle,
                    autoFilter: false,
                    sheetName: "Danh sách"
                });
            });
        });

        // xu ly import file excel de cap nhat va them moi du lieu
         $(document).ready(function () {
           const importFileBtn = document.getElementById("importFileBtn");
           const importFileInput = document.getElementById("importFileInput");
           if (importFileBtn)
           {
             // Khi bấm nút → kích hoạt chọn file
             importFileBtn.addEventListener("click", function () {
                // reset file truoc khi click
                 importFileInput.value = "";
                 importFileInput.click();
             });

             // Khi người dùng chọn file → gửi file lên API
             importFileInput.addEventListener("change", async function () {
                 const file = this.files[0];
                 if (!file) return;

                 var sqlstore = $(this).data('sqlstore'); // lay du lieu store tu input import de xu ly (bat buoc)

                 const formData = new FormData();
                 formData.append("file", file);
                 formData.append("sqlstore", sqlstore);

                 // const resultDiv = document.getElementById("result");
                 // resultDiv.innerHTML = "Đang xử lý...";
                 rplm({
                     title: "Xác nhận",
                     text: "Nhập file sẽ mất một chút thời gian nhé",
                     type: "warning",
                     showCancelButton: true,
                     confirmButtonText: "Đồng ý!",
                     cancelButtonText: "Hủy!",
                     animation: "tada",
                     modalNOverlay: "backShadow",
                     closeOnConfirm: false,
                     closeOnCancel: false,
                     showLoaderOnConfirm: true,
                     html: true
                 },
                 function (isConfirm) {
                     if (isConfirm) {
                         // Gọi AJAX để gửi yêu cầu xóa
                         $.ajax({
                             url: '/Home/ImportExcel', // Controller xử lý xóa
                             type: 'POST', // Hoặc 'GET' nếu phù hợp
                             data: formData, // Truyền ID của dòng cần xóa và store xử lý
                             processData: false, // Không chuyển `FormData` thành query string
                             contentType: false, // Để trình duyệt tự động đặt `content-type`
                             success: function (response) {
                                 if (response.success) {
                                     rplm({
                                       title: "Xử lý thành công!",
                                       text: "Hành động của bạn đã được xử lý.",
                                       type: "success",
                                       timer: 2000,
                                       confirmButtonText: 'Xác nhận',
                                       html: true
                                     }, function () {
                                           // Sau khi đóng popup, reload lại trang
                                           location.reload();
                                       });
                                 } else {
                                     rplm({
                                         title: "Lỗi!",
                                         text: response.errorMessage || "Có vấn đề xảy ra.",
                                         type: "error",
                                         timer: 20000,
                                         confirmButtonText: 'Xác nhận',
                                         html: true
                                     }, function () {
                                           // Sau khi đóng popup, reload lại trang
                                           location.reload();
                                       });
                                 }
                             },
                             error: function () {
                                 rplm({
                                     title: "Lỗi!",
                                     text: "Lỗi khi kết nối đến máy chủ.",
                                     type: "error",
                                     timer: 2000,
                                     confirmButtonText: 'Done',
                                     html: true
                                 });
                             }
                         });
                     } else {
                         rplm({
                             title: "Đã hủy!",
                             text: "Hành động của bạn đã được hủy.",
                             type: "error",
                             timer: 2000,
                             confirmButtonText: 'Done',
                             html: true
                         });
                     }
                 });
             });
           }
         });

        // xử lý Quill HTML editor cho field form
        document.addEventListener("DOMContentLoaded", function () {
        var quillEditors = {}; // Lưu danh sách editor
            document.querySelectorAll(".quill-editor").forEach(function (el) {
                var id = el.id.replace("editor-container-", ""); // lấy fieldName
                var hiddenInput = document.getElementById("editor-content-" + id);

                // Khởi tạo Quill
                var quill = new Quill("#" + el.id, {
                    theme: "snow",
                    placeholder: "Nhập nội dung tại đây...",
                    modules: {
                        toolbar: [
                            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
                            ['blockquote', 'code-block'],
                            ['link', 'image', 'video', 'formula'],

                            [{ 'header': 1 }, { 'header': 2 }],               // custom button values
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
                            [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
                            [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
                            [{ 'direction': 'rtl' }],                         // text direction

                            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

                            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                            [{ 'font': [] }],
                            [{ 'align': [] }],

                            ['clean']                                         // remove formatting button
                          ]
                    }
                });

                // Gán giá trị từ input nếu có (khi edit)
                if (hiddenInput.value) {
                    quill.root.innerHTML = hiddenInput.value;
                }

                // Lưu vào danh sách
                quillEditors[id] = quill;
            });

            // Khi submit: đồng bộ nội dung
            const form = document.querySelector("form");
            if (form)
            {
              form.addEventListener("submit", function () {
                  for (var id in quillEditors) {
                      var editor = quillEditors[id];
                      var html = editor.root.innerHTML;
                      document.getElementById("editor-content-" + id).value = html;
                  }
              });
            }
        });

        // Hàm xử lý thay đổi cho input file
         $(document).ready(function () {
            const fileMap = @Html.Raw(Json.Serialize(ViewBag.FileUrls)); // { "KOAAttachment": ["/path/file1.png", ...] }
            function createFileListItem(name, url = null, file = null, input = null) {
                const listItem = $('<li class="mb-1 d-flex align-items-center justify-content-between"></li>');
                const fileName = $('<span class="me-2 text-truncate" style="max-width: 200px;"></span>').text(name);
                const btnGroup = $('<div class="btn-group btn-group-sm" role="group"></div>');

                const downloadBtn = $('<button type="button" class="btn btn-outline-primary">Tải</button>');
                const deleteBtn = $('<button type="button" class="btn btn-outline-danger">Xóa</button>');

                downloadBtn.on('click', function () {
                    if (url) {
                        window.open(url, '_blank');
                    } else if (file) {
                        const blobUrl = URL.createObjectURL(file);
                        const a = $('<a></a>').attr('href', blobUrl).attr('download', file.name).css('display', 'none');
                        $('body').append(a);
                        a[0].click();
                        a.remove();
                        URL.revokeObjectURL(blobUrl);
                    }
                });

                deleteBtn.on('click', function () {
                    listItem.remove();
                    if (input) {
                        input.value = "";
                    }
                });

                btnGroup.append(downloadBtn, deleteBtn);
                listItem.append(fileName, btnGroup);
                return listItem;
            }

            // function cập nhật slide mỗi khi chọn lại file
            function updateCarouselFromFiles(carouselSelector, files) {
                const $carousel = $(carouselSelector);
                const $inner = $carousel.find('.carousel-inner');
                const $indicators = $carousel.find('.carousel-indicators');

                $inner.empty();
                $indicators.empty();

                let slideIndex = 0;
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    const fileName = file.name;
                    const fileExt = fileName.toLowerCase().split('.').pop();

                    if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                        const imgURL = URL.createObjectURL(file);

                        const itemClass = slideIndex === 0 ? 'carousel-item active' : 'carousel-item';

                        const $item = $(`
                            <div class="${itemClass}">
                                <img class="d-block w-100 carousel-blur-img" src="${imgURL}" alt="${fileName}" />
                                <div class="carousel-caption d-none d-md-block text-shadow">
                                    <h3><a class="text-white" href="${imgURL}" target="_blank">${fileName}</a></h3>
                                </div>
                            </div>
                        `);

                        const $indicator = $(`<button type="button"
                                                   data-bs-target="${carouselSelector}"
                                                   data-bs-slide-to="${slideIndex}"
                                                   class="${slideIndex === 0 ? "active" : ""}"
                                                   aria-current="${slideIndex === 0 ? "true" : "false"}"
                                                   aria-label="Slide ${slideIndex + 1}"></button>`);

                        $inner.append($item);
                        $indicators.append($indicator);
                        slideIndex++;
                    }
                }

                // Reset lại slide về slide đầu tiên
                const carouselInstance = bootstrap.Carousel.getOrCreateInstance($carousel[0]);
                carouselInstance.to(0);
            }

            function handleFileInputChange(input) {
                let targetSelector = $(input).data("target");
                const carouselSelector = $(input).data("carousel");
                if (!targetSelector) return;

                let fileList = $(targetSelector);
                fileList.empty(); // Xoá toàn bộ

                const validImageFiles = [];

                $.each(input.files, function (index, file) {
                    const listItem = createFileListItem(file.name, null, file, input);
                    fileList.append(listItem);

                    // Nếu là ảnh thì thêm vào mảng để update slide
                    const ext = file.name.toLowerCase().split('.').pop();
                    if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) {
                        validImageFiles.push(file);
                    }
                });
                // Nếu có carousel liên quan thì cập nhật lại slide
                if (carouselSelector && validImageFiles.length > 0) {
                    updateCarouselFromFiles(carouselSelector, validImageFiles);
                }
            }

            // Load từ server
            if (typeof fileMap !== "undefined") {
                for (const inputName in fileMap) {
                    const filePaths = fileMap[inputName];
                    const fileListId = "#fileList-" + inputName;

                    if (Array.isArray(filePaths)) {
                        const container = $(fileListId);
                        $.each(filePaths, function (_, filePath) {
                            const fileName = filePath.split('/').pop();
                            const listItem = createFileListItem(fileName, filePath);
                            container.append(listItem);
                        });
                    }
                }
            }

            // Apply change handler cho tất cả input file có data-target
            $('input[type="file"][data-target]').on('change', function () {
                handleFileInputChange(this);
            });
        });

        // xử lý control List selection của form
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".selection-list").forEach(list => {
                list.addEventListener("click", function (e) {
                    const item = e.target.closest(".selection-item");
                    if (!item) return;

                    item.classList.toggle("selected");

                    const selectedValues = Array.from(list.querySelectorAll(".selection-item.selected"))
                        .map(el => el.dataset.value);

                    const hiddenInputId = list.dataset.target;
                    document.getElementById(hiddenInputId).value = selectedValues.join(",");
                });
            });
        });


        // xử lý custom tagbox
        $(function() {
            // --- Khởi tạo Tagify cho tất cả input có class 'tag-input' ---
            $(".tag-input").each(function () {
                    const raw = $(this).attr("data-jsonwhitelist") || "";
                // const whitelist = raw.split(",").map(x => x.trim()); // Chuyển chuỗi thành mảng
                let whitelist = [];

                try {
                    whitelist = JSON.parse(raw);
                    console.log("WHITELIST PARSED:", whitelist);
                } catch (e) {
                    console.warn("Invalid whitelist JSON", e);
                }

                new Tagify(this, {
                    placeholder: "Có thể nhập hoặc chọn danh mục có sẵn",
                    whitelist: whitelist,
                    tagTextProp: "label", // <-- Cái này rất quan trọng!
                    originalInputValueFormat: valuesArr => valuesArr.map(tag => tag.value).join(','), // chỉ lưu value
                    dropdown: {
                        enabled: 0,
                        closeOnSelect: true,
                        maxItems: 10,
                        position: "text", // hoặc 'manual' nếu muốn kiểm soát chặt chẽ
                        highlightFirst: true,
                        mapValueTo: "label",    // ← dùng 'label' để hiển thị trong dropdown
                    }
                });
            });

        });

      // thuc hien chuc nang scroll to top (lên đầu trang)
      document.getElementById("scrollToTopBtn").addEventListener("click", function (e) {
        e.preventDefault(); // ngăn chuyển trang nếu href="#"
        window.scrollTo({
          top: 0,
          behavior: "smooth"
        });
      });

     // tự động add param từ link vào hidden input trong form
      window.addEventListener("DOMContentLoaded", () => {
        const urlParams = new URLSearchParams(window.location.search);
        const hiddenDiv = document.getElementById("hiddenInputs");

        if (hiddenDiv != null)
        {
          urlParams.forEach((value, key) => {
            const input = document.createElement("input");
            input.type = "hidden";
            input.name = "q_"+key;
            input.value = value;
            hiddenDiv.appendChild(input);
          });
        }
      });

      // Common function to parse Query String
      // xử lý param truyền vào
      function getQueryParams(queryParamOutSite = {}) {
          // query param outsite áp dụng cho 1 số màn hình popup phải lấy params từ bên ngoài
          var params = {};
          var queryString = window.location.search.substring(1); // remove '?'

          if (queryString.length > 0) {
              var pairs = queryString.split("&");
              for (var i = 0; i < pairs.length; i++) {
                  var pair = pairs[i].split('=');
                  if (pair.length === 2) {
                      params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1].replace(/\+/g, ' '));
                  }
              }
          }

          // gộp queryParam và outSiteParam
          let mergedParam = { ...queryParamOutSite, ...params };

          return mergedParam;
      }

        // Hiển thị danh sách main menu
        $(document).ready(function () {
           var queryParams = getQueryParams();

            $.ajax({
                url: '/NETMenu/MainMenu_List',
                type: 'GET',
                data: queryParams,
                success: function (response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                               title: "Lỗi khi hiển thị main menu!",
                               text: response.errorMessage || "Có vấn đề xảy ra.",
                               type: "error",
                               timer: 2000,
                               confirmButtonText: 'Xác nhận',
                               html: true
                           });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $("#net-main-menu").html(html);
                    }
                },
                error: function (xhr, status, error) {
                    // Nếu không thành công, hiển thị thông báo lỗi
                    rplm({
                            title: "Lỗi khi hiển thị main menu!",
                            text: error || "Có vấn đề xảy ra.",
                            type: "error",
                            timer: 2000,
                            confirmButtonText: 'Xác nhận',
                            html: true
                        });
                }
            });
        });
        
        // Hiển thị danh sách menu
        $(document).ready(function () {
          // mac định gọi function để load menu
          loadMenu();

          // thay đổi menu mỗi khi click chọn main menu thông qua menu code
          $(document).on('click', '.main-menu-item', function () {
              const menuCode = $(this).data('menucode');
              // dua cac du lieu can truyen vao formdata
              var formData = new FormData();
              formData.append("menuCode", menuCode); // key cua du lieu

              if (menuCode) {
                  // Gọi AJAX lưu MenuCode vào Session
                         $.ajax({
                             url: '/NETMenu/ChangeMainMenuCode', // Controller lưu main menu code vào session
                             type: 'POST', // Hoặc 'GET' nếu phù hợp
                             data: formData, // Truyền param
                             processData: false, // Không chuyển `FormData` thành query string
                             contentType: false, // Để trình duyệt tự động đặt `content-type`
                             success: function (response) {
                                if (response.success === false) {
                                    rplm({
                                        title: "Lỗi khi xử lý menu!",
                                        text: response.errorMessage || "Có vấn đề xảy ra.",
                                        type: "error",
                                        timer: 2000,
                                        confirmButtonText: 'Xác nhận',
                                        html: true
                                    });
                                } else {
                                    console.log("Đã lưu menu vào session");
                                    // Gọi lại hàm load menu (MenuCode sẽ được lấy từ Session trong controller)
                                    $("#net-menu").empty(); // Xóa menu cũ
                                    loadMenu(); // Load lại
                                    $('.layout-menu-collapsed').toggleClass('layout-menu-expanded');
                                }
                             },
                              error: function (xhr, status, error) {
                                  rplm({
                                      title: "Lỗi khi xử lý menu!",
                                      text: error || "Có vấn đề xảy ra.",
                                      type: "error",
                                      timer: 2000,
                                      confirmButtonText: 'Xác nhận',
                                      html: true
                                  });
                              }
                         });

                  // $.post('/NETMenu/ChangeMainMenuCode', { menuCode: menuCode }, function (res) {
                  //     if (res.success) {
                  //         // Gọi lại hàm load menu (MenuCode sẽ được lấy từ Session trong controller)
                  //         $("#net-menu").empty(); // Xóa menu cũ
                  //         loadMenu(); // Load lại

                  //         // ✅ Sau khi load lại, redirect qua link đầu tiên của menu
                  //         setTimeout(function () {
                  //             // Tìm tất cả các liên kết trong menu và redirect tới cái đầu tiên
                  //             const firstLink = $("#net-menu").find("a").first();
                  //             if (firstLink.length > 0) {
                  //                 window.location.href = firstLink.attr("href"); // Redirect tới href đầu tiên
                  //             }
                  //         }, 100); // Delay 100ms để đảm bảo menu đã load xong
                  //     } else {
                  //         alert('Không thể lưu MenuCode!');
                  //     }
                  // });
              }
          });

          function loadMenu() {
              var queryParams = getQueryParams();
              queryParams.currentPage = window.location.pathname;

              $.ajax({
                  url: '/NETMenu/Menu_List',
                  type: 'GET',
                  data: queryParams,
                  success: function (response) {
                      if (response.success === false) {
                          rplm({
                              title: "Lỗi khi hiển thị menu!",
                              text: response.errorMessage || "Có vấn đề xảy ra.",
                              type: "error",
                              timer: 2000,
                              confirmButtonText: 'Xác nhận',
                              html: true
                          });
                      } else {
                          $("#net-menu").append(response);
                      }
                  },
                  error: function (xhr, status, error) {
                      rplm({
                          title: "Lỗi khi hiển thị menu!",
                          text: error || "Có vấn đề xảy ra.",
                          type: "error",
                          timer: 2000,
                          confirmButtonText: 'Xác nhận',
                          html: true
                      });
                  }
              });
          }

        });

        // load report editor động trong form
        function loadFormReportEditor(reportCode, containerId, queryParamOutSite = {}, isPage = false, onSuccess) {
            var queryParams = getQueryParams(queryParamOutSite);
            queryParams.reportCode = reportCode; // Inject thêm reportCode
            queryParams.containerId = containerId; // truyền containerId để tiện xử lý sau đó (bộ lọc,....)
            queryParams.isPage = isPage; // kiểm tra đây có phải là 1 page không hay chỉ là 1 mẫu

            $.ajax({
                url: '/NETReport/Form_Report_Editor',
                type: 'GET',
                data: queryParams,
                success: function(response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                            title: "Lỗi khi hiển thị danh sách!",
                            text: response.errorMessage || "Có vấn đề xảy ra.",
                            type: "error",
                            timer: 2000,
                            confirmButtonText: 'Xác nhận',
                            html: true
                        });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $("#" + containerId).html(html);

                        // ✅ Gọi callback nếu có
                        if (typeof onSuccess === 'function') {
                            onSuccess(html);
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading report editor:', error);
                }
            });
        }

        // load report viewer động trong form
        function loadFormReportViewer(reportCode, containerId, queryParamOutSite = {}, isPage = false, onSuccess) {
            var queryParams = getQueryParams(queryParamOutSite);
            queryParams.reportCode = reportCode; // Inject thêm reportCode
            queryParams.containerId = containerId; // truyền containerId để tiện xử lý sau đó (bộ lọc,....)
            queryParams.isPage = isPage;// kiểm tra đây có phải là 1 page không hay chỉ là 1 mẫu

            $.ajax({
                url: '/NETReport/Form_Report_Viewer',
                type: 'GET',
                data: queryParams,
                success: function(response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                            title: "Lỗi khi hiển thị danh sách!",
                            text: response.errorMessage || "Có vấn đề xảy ra.",
                            type: "error",
                            timer: 2000,
                            confirmButtonText: 'Xác nhận',
                            html: true
                        });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $("#" + containerId).html(html);

                        // ✅ Gọi callback nếu có
                        if (typeof onSuccess === 'function') {
                            onSuccess(html);
                        }
                    }
                },
                error: function(xhr, status, error) {
                    rplm({
                        title: "Lỗi khi hiển thị danh sách!",
                        text: error || "Có vấn đề xảy ra.",
                        type: "error",
                        timer: 2000,
                        confirmButtonText: 'Xác nhận',
                        html: true
                    });
                }
            });
        }
        
        // load report viewer động trong form
        function loadFormViewer(formCode, containerId, queryParamOutSite = {}, isPage = false, onSuccess, isStepper = false) {
            var queryParams = getQueryParams(queryParamOutSite);
            queryParams.formCode = formCode; // Inject thêm reportCode
            queryParams.isPage = isPage;// kiểm tra đây có phải là 1 page không hay chỉ là 1 mẫu
            queryParams.isStepper = isStepper;// kiểm tra form này có phải dạng stepper (form wizard) không
            queryParams.containerId = containerId;

            $.ajax({
                url: '/NETForm/PopupForm',
                type: 'GET',
                data: queryParams,
                success: function(response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                            title: "Lỗi khi hiển thị biểu mẫu!",
                            text: response.errorMessage || "Có vấn đề xảy ra.",
                            type: "error",
                            timer: 2000,
                            confirmButtonText: 'Xác nhận',
                            html: true
                        });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $("#" + containerId).html(html);
                        
                        // ✅ Gọi callback nếu có
                        if (typeof onSuccess === 'function') {
                            onSuccess(html);
                        }
                    }
                },
                error: function(xhr, status, error) {
                    rplm({
                        title: "Lỗi khi hiển thị biểu mẫu!",
                        text: error || "Có vấn đề xảy ra.",
                        type: "error",
                        timer: 2000,
                        confirmButtonText: 'Xác nhận',
                        html: true
                    });
                }
            });
        }

        // response chuyển đổi tab&pill từ right sang top khi resize// Khai báo biến timer ngoài scope resize
        let resizeTimer;

        function updateNavAlignment() {
          const isMobile = window.innerWidth < 768;

          $('#nav-tabpanel').each(function () {
            const $nav = $(this);
            if (isMobile) {
              if ($nav.hasClass('nav-align-left')) {
                $nav.removeClass('nav-align-left').addClass('nav-align-bottom');
              }
            } else {
              if ($nav.hasClass('nav-align-bottom')) {
                $nav.removeClass('nav-align-bottom').addClass('nav-align-left');
              }
            }
          });
        }


        $(document).ready(function () {
          updateNavAlignment(); // Khi trang vừa load
          $(window).on('resize', function () {
              clearTimeout(resizeTimer);
              resizeTimer = setTimeout(updateNavAlignment, 200); // đợi 200ms sau khi dừng resize // Khi người dùng resize cửa sổ
          });
        });

        
        // color picker
        function Init_getColorPicker()
        {
          document.querySelectorAll('.form-color-picker').forEach(pickerEl => {
            const pickerId = pickerEl.id;                  // ví dụ: 'color-background'
            const fieldId = pickerId.replace('color-', ''); // ví dụ: 'background'

            const inputEl = document.getElementById(fieldId);
            if (!inputEl) return; // bỏ qua nếu không tìm thấy input ẩn tương ứng

            // mặc định không hiển thị màu
            let defaultColor; // fallback

            const storedColor = inputEl.value?.trim();
            const dataDefault = pickerEl.getAttribute('data-default')?.trim();

            // nếu có giá trị màu store trả lên thì lấy
            if (storedColor) {
              defaultColor = storedColor;
            }
            // nếu không có thì kiểm tra có màu mặc định không? Không có thì lấy màu primary như ban đầu
            else if (dataDefault) {
              defaultColor = dataDefault;
            }
            
            // gán giá trị vào input ẩn
            inputEl.value = defaultColor

            const pickr = Pickr.create({
              el: '#' + pickerId,
              theme: 'monolith',
              default: defaultColor,  // nếu input ẩn có giá trị ban đầu
              swatches: ["rgba(144, 85, 253, 1)", "rgba(86, 202, 0, 1)", "rgba(255, 76, 81, 1)", "rgba(255, 180, 0, 1)", "rgba(22, 177, 255, 1)"],
              components: {
                preview: true,
                opacity: true,
                hue: true,
                interaction: {
                  hex: true,
                  rgba: true,
                  hsla: !0,
                  hsva: !0,
                  cmyk: !0,
                  input: true,
                  clear: true,
                  save: true
                }
              }
            });

            // Gán khi chọn xong
            pickr.on('save', (color) => {
              const hex = color.toHEXA().toString();
              inputEl.value = hex;
              console.log(`Saved color for ${fieldId}:`, hex);
            });

            // Gán liên tục khi thay đổi (tuỳ bạn)
            pickr.on('change', (color) => {
              const hex = color.toHEXA().toString();
              inputEl.value = hex;
            });
          });
        }
        $(document).ready(function () {
          Init_getColorPicker();
        });

       //  // // file (pending do dropzone không xử lý trong controller được mà trực tiếp lưu)
       // $(document).ready(function () {
       //   Dropzone.autoDiscover = false;

       //    const previewTemplate = `<div class="dz-preview dz-file-preview">
       //        <div class="dz-details">
       //          <div class="dz-thumbnail">
       //            <img data-dz-thumbnail>
       //            <span class="dz-nopreview">No preview</span>
       //            <div class="dz-success-mark"></div>
       //            <div class="dz-error-mark"></div>
       //            <div class="dz-error-message"><span data-dz-errormessage></span></div>
       //            <div class="progress">
       //              <div class="progress-bar progress-bar-primary" role="progressbar" aria-valuemin="0" aria-valuemax="100" data-dz-uploadprogress></div>
       //            </div>
       //          </div>
       //          <div class="dz-filename" data-dz-name></div>
       //          <div class="dz-size" data-dz-size></div>
       //        </div>
       //    </div>`;

       //    const dropzoneElements = document.querySelectorAll(".file-input-dropzone");
       //    const dropzones = {}; // Để lưu lại các Dropzone instance

       //    dropzoneElements.forEach(el => {
       //        const id = el.id;
       //        const url = el.dataset.url || "/upload"; // có thể tùy chỉnh url riêng
       //        const maxFiles = el.dataset.maxFiles || 1;

       //        const dz = new Dropzone(el, {
       //            url: url,
       //            paramName: id, // tên file sẽ là ID của div
       //            autoProcessQueue: true, // để không tự upload ngay
       //            uploadMultiple: true,
       //            parallelUploads: 5,
       //            maxFilesize: 5, // MB
       //            addRemoveLinks: true,
       //            previewTemplate: previewTemplate
       //        });

       //        // Lưu lại để dùng sau (ví dụ processQueue thủ công)
       //        dropzones[id] = dz;
       //    });

       //    // xử lý submit
       //    document.querySelector("form").addEventListener("submit", function (e) {
       //        e.preventDefault(); // Ngăn submit gốc

       //        const form = e.target;
       //        let totalQueuedFiles = 0;
       //        let totalCompleted = 0;

       //        // Đếm tổng số file trong tất cả dropzone đang chờ
       //        for (const dz of Object.values(dropzones)) {
       //            totalQueuedFiles += dz.getQueuedFiles().length;
       //        }

       //        if (totalQueuedFiles === 0) {
       //            // Không có file upload → submit form luôn
       //            form.submit();
       //            return;
       //        }

       //        for (const dz of Object.values(dropzones)) {
       //            dz.on("complete", function (file) {
       //                totalCompleted++;

       //                // Khi tất cả file upload xong (success hoặc error)
       //                if (totalCompleted === totalQueuedFiles) {
       //                    form.submit(); // ✅ Submit sau khi upload xong
       //                }
       //            });

       //            // Bắt đầu upload nếu có file trong hàng đợi
       //            if (dz.getQueuedFiles().length > 0) {
       //                dz.processQueue();
       //            }
       //        }
       //    });
       //  });


       // form validation
        document.addEventListener("DOMContentLoaded", () => {
            let form = document.querySelector("#create-form");
            if (form) {
              const fieldValidationsArray = @Html.Raw((string.IsNullOrWhiteSpace(ViewData["fieldvalidation"]?.ToString()) ? "[]" : ViewData["fieldvalidation"]));
              const fieldValidations = Object.assign({}, ...fieldValidationsArray);

              // 👉 Sau bước này, bạn có thể kiểm tra:
              console.log("fieldValidations:", fieldValidations);

                FormValidation.formValidation(form, {
                  fields: fieldValidations,
                  plugins: {
                    trigger: new FormValidation.plugins.Trigger,
                    bootstrap5: new FormValidation.plugins.Bootstrap5({
                      eleValidClass: "",
                      rowSelector: ".form-control-validation"
                    }),
                    autoFocus: new FormValidation.plugins.AutoFocus,
                    submitButton: new FormValidation.plugins.SubmitButton,
                  },
                  init: instance => {
                    instance.on("plugins.message.placed", function (ev) {
                        if (ev.element.parentElement.classList.contains("input-group")) {
                            ev.element.parentElement.insertAdjacentElement("afterend", ev.messageElement);
                        }
                    });
                    instance.on('core.form.valid', function() {
                        // ✅ KHÔNG submit, KHÔNG làm gì ở đây cả
                        // Để form tiếp tục chạy các hàm khác (onsubmit...)
                        console.log("✅ Form đã được kiểm tra hợp lệ, tiếp tục xử lý ở nơi khác...");
                        const event = new Event("submit", { bubbles: true, cancelable: true });
                        form.dispatchEvent(event); // ✅ Gọi lại sự kiện submit gốc
                        form.submit();
                    });
                  }
                });
            }
        });

         document.addEventListener('DOMContentLoaded', () => {
          // Lấy tất cả các phần tử có class youtube-video-embed
          const wrappers = document.querySelectorAll('.youtube-video-embed');

          wrappers.forEach((wrapper, index) => {
            const embed = wrapper.querySelector('.plyr__video-embed');

            // Gán ID duy nhất nếu chưa có
            if (!embed.id) {
              embed.id = `plyr-youtube-${index}`;
            }

            // Khởi tạo Plyr
            let youtubePlayer = new Plyr(`#${embed.id}`, {
              autoplay: false,
              loop: { active: true },
              volume: 1,
              speed: { selected: 1, options: [0.75, 1, 1.25, 1.5, 2] },
              controls: [
                  'play-large', 'rewind', 'play', 'fast-forward',
                  'progress', 'current-time', 'duration',
                  'mute', 'volume', 'captions', 'settings', 'fullscreen', 'pip'
              ],
              i18n: {
                  restart: 'Phát lại',
                  rewind: 'Lùi 10s',
                  play: 'Phát',
                  pause: 'Tạm dừng',
                  fastForward: 'Tiến 10s',
                  fullscreen: 'Toàn màn hình',
                  settings: 'Cài đặt',
                  captions: 'Phụ đề',
                  volume: 'Âm lượng'
              }
            });

        // xử lý video youtube trên form field
         document.addEventListener('DOMContentLoaded', () => {
          // Lấy tất cả các phần tử có class youtube-video-embed
          const wrappers = document.querySelectorAll('.youtube-video-embed');

          wrappers.forEach((wrapper, index) => {
            const embed = wrapper.querySelector('.plyr__video-embed');

            // Gán ID duy nhất nếu chưa có
            if (!embed.id) {
              embed.id = `plyr-youtube-${index}`;
            }

            // Khởi tạo Plyr
            let youtubePlayer = new Plyr(`#${embed.id}`, {
              autoplay: false,
              loop: { active: true },
              volume: 1,
              speed: { selected: 1, options: [0.75, 1, 1.25, 1.5, 2] },
              controls: [
                  'play-large', 'rewind', 'play', 'fast-forward',
                  'progress', 'current-time', 'duration',
                  'mute', 'volume', 'captions', 'settings', 'fullscreen', 'pip'
              ],
              i18n: {
                  restart: 'Phát lại',
                  rewind: 'Lùi 10s',
                  play: 'Phát',
                  pause: 'Tạm dừng',
                  fastForward: 'Tiến 10s',
                  fullscreen: 'Toàn màn hình',
                  settings: 'Cài đặt',
                  captions: 'Phụ đề',
                  volume: 'Âm lượng'
              }
            });

              // Ví dụ xử lý sự kiện
              youtubePlayer.on('ended', () => {
		          rplm({
			          title: "Hoàn thành",
			          text: 'Bạn đã xem hết video',
			          type: 'success',
			          html: true,
			          modalNOverlay: 'white',
			          confirmButtonText: 'Xác nhận',
			          allowOutsideClick: true,
		          });
              });
          });
        });

          // xử lý video file trên form field
         document.addEventListener('DOMContentLoaded', () => {
          // Lấy tất cả các phần tử có class youtube-video-embed
          const wrappers = document.querySelectorAll('.video-player-embed');

          wrappers.forEach((wrapper, index) => {
            const embed = wrapper.querySelector('.plyr__video-embed');

            // Gán ID duy nhất nếu chưa có
            if (!embed.id) {
              embed.id = `plyr-video-${index}`;
            }

            // Khởi tạo Plyr
            let videoPlayer = new Plyr(`#${embed.id}`, {
              autoplay: false,
              loop: { active: true },
              volume: 1,
              speed: { selected: 1, options: [0.75, 1, 1.25, 1.5, 2] },
              controls: [
                  'play-large', 'rewind', 'play', 'fast-forward',
                  'progress', 'current-time', 'duration',
                  'mute', 'volume', 'captions', 'settings', 'fullscreen', 'pip'
              ],
              i18n: {
                  restart: 'Phát lại',
                  rewind: 'Lùi 10s',
                  play: 'Phát',
                  pause: 'Tạm dừng',
                  fastForward: 'Tiến 10s',
                  fullscreen: 'Toàn màn hình',
                  settings: 'Cài đặt',
                  captions: 'Phụ đề',
                  volume: 'Âm lượng'
              }
            });

            //hiển thị trong now playing IOS
            videoPlayer.on('play', () => {
              const videoTitle = embed.getAttribute('title') || 'KOA Video'; // fallback nếu không có title

              if ('mediaSession' in navigator) {
                navigator.mediaSession.metadata = new MediaMetadata({
                  title: videoTitle,
                  artist: 'KOA Video',
                  album: 'KOA Video Album'
                });
              }
            });

            // Ví dụ xử lý sự kiệnx1
            videoPlayer.on('ended', () => {
		        rplm({
			        title: "Hoàn thành",
			        text: 'Bạn đã xem hết video',
			        type: 'success',
			        html: true,
			        modalNOverlay: 'white',
			        confirmButtonText: 'Xác nhận',
			        allowOutsideClick: true,
		        });
            });
          });
        });

    </script>

    <!-- Page Scripts-->
    @RenderSection("PageScripts", required: false)

  <!-- Place this tag in your head or just before your close body tag. -->
  <script async defer src="https://buttons.github.io/buttons.js"></script>

</body>

</html>
