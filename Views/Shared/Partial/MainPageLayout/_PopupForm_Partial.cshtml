@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using KOAHome.Helpers
@{
    // lay thong tin
    var id = ViewData["id"] as int?;
    // giá trị isPage để kiểm tra có phải trang hoàn chỉnh không
    var isPage = ViewData["isPage"] as bool?;
    // kiểm tra form có phải dạng stepper không
    var isStepper = ViewData["isStepper"] as bool?;

    var formCode = ViewData["formCode"] as string;
    var formData = ViewData["formData"] as IDictionary<string, object>;
    // truyen cau hinh form de xu ly giao dien
    var config_form = ViewData["config_form"] as IDictionary<string, object>;
    var config_formOptions = null as IDictionary<string, object>;
    var config_formCssOptionHeader = null as IDictionary<string, object>;
    var form_colCount = 3;
    string formTitle = "";
    string formStyle = "";
    string labelStyle = "";
    string labelBGStyle = "";

    if (config_form != null)
    {
        config_formCssOptionHeader = ParseDataHelper.ParseOptionsToDictionary(config_form.ContainsKey("cssoptionheader") ? config_form["cssoptionheader"]?.ToString() : "{}");
        // thông tin css chung của form
        formStyle = (config_formCssOptionHeader.ContainsKey("formStyle") ? Convert.ToString(config_formCssOptionHeader["formStyle"]) : "");
        labelStyle = (config_formCssOptionHeader.ContainsKey("labelStyle") ? Convert.ToString(config_formCssOptionHeader["labelStyle"]) : "");
        labelBGStyle = (config_formCssOptionHeader.ContainsKey("labelBGStyle") ? Convert.ToString(config_formCssOptionHeader["labelBGStyle"]) : "");

        config_formOptions = ParseDataHelper.ParseOptionsToDictionary(config_form.ContainsKey("options") ? config_form["options"].ToString() : "{}");

        formTitle = config_form.ContainsKey("formtitle") ? config_form["formtitle"].ToString() : "Thông tin";
        config_formOptions = ParseDataHelper.ParseOptionsToDictionary(config_form.ContainsKey("options") ? config_form["options"].ToString() : "{}");
        // mac dinh col count cua form = 3
        form_colCount = config_formOptions.ContainsKey("colCount") ? Convert.ToInt32(config_formOptions["colCount"]) : 3;
    }

    // nhận param để chuyển đến partial nếu có
    var objParameters = ViewData["objParameters"] as Dictionary<string, object>;

    // truyen danh sach cấu hình form field len giao dien
    var config_formfield = ViewData["config_formfield"] as List<dynamic>;
    var dynamicServiceSelectOptions = ViewData["DynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;

    // nhan thong tin attachment neu co
    var fileUrlsDict = ViewData["fileUrls"] as Dictionary<string, List<string>>;


    var reportResultList = ViewData["reportResultList"] as List<dynamic>;

    // tao bien dem de dem row num cho report
    var reportRowIndex = 1;
}

<style>

</style>

<form id="@("form-"+formCode)" class="needs-validation modal-formpopup" novalidate="" method="post" asp-controller="NETForm" asp-action="PopupForm" asp-route-formCode="@formCode"
asp-route-id="@id" data-modal-id="modal-PopupForm" enctype="multipart/form-data">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content card mb-6">
            <div class="modal-header">
                <h5 class="modal-title card-header" id="modalCenterTitle">@formTitle</h5>
                <button type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"></button>
            </div>
            <div class="modal-body card-body">
                @if (config_form != null)
                {
                    @* hidden input để xử lý ẩn truyền dữ liệu từ param link vào bằng js *@
                    <div id="hiddenInputs"></div>
                    @* xu ly form dong *@
                    @* xu ly voi moi field *@
                    <div class="row gx-5">
                        @* chi lay cac field group hoac field không có parentid *@
                        @foreach (var field in config_formfield.Where(p => p.parentid == 0).OrderBy(p => p.tabindex).ToList())
                        {
                            @* name: Key cua field truyen vao, label: Ten field, type: Loại field, value: giá trị field
                    , field width: độ rộng field *@
                            string name = field.code.ToLower();
                            string label = field.name;
                            string type = field.formfieldtypecode;
                            string field_options = field.options;
                            // chuyen thong tin options thanh Dictionary cho dễ xử lý
                            var field_optionsDict = ParseDataHelper.ParseOptionsToDictionary(field_options);
                            // chuyen thong tin editor options thanh Dictionary cho dễ xử lý
                            var field_editoroptionsDict = ParseDataHelper.ParseEditorOptionsToDictionary(field_options);
                            // col span mặc định là 3
                            int field_colspan = Convert.ToInt32(field_optionsDict.ContainsKey("colSpan") ? Convert.ToInt32(field_optionsDict["colSpan"]) : 3);
                            // col span mặc định là 1
                            int field_colcount = Convert.ToInt32(field_optionsDict.ContainsKey("colCount") ? Convert.ToInt32(field_optionsDict["colCount"]) : 1);
                            // tinh do rong cua field dua tren gia tri config
                            int field_width = (12 / form_colCount * field_colspan);

                            // lay thong tin validation
                            string field_validates = field.validates;
                            // parse validation thanh List<Dictionary<string, object>>
                            var field_validatesListDict = ParseDataHelper.ParseJsonToListDict(field_validates);

                            // kiem tra bat buoc nhap
                            bool isrequired = false;
                            string required_message = "";
                            var required_rule = ParseDataHelper.GetFormFieldValidate(field_validatesListDict,"required");
                            if (required_rule != null && required_rule.Count > 0)
                            {
                                isrequired = true;
                                required_message = required_rule.ContainsKey("message") ? required_rule["message"].ToString() : "Không được bỏ trống";
                            }

                            // kiem tra readonly
                            bool isreadonly = field_editoroptionsDict.ContainsKey("readOnly") ? Convert.ToBoolean(field_editoroptionsDict["readOnly"]) : false;

                            // nhan gia tri cua field
                            var value = formData.ContainsKey(name) ? formData[name] : "";

                            // neu type la GroupItem thi hiển thị group và gọi các field con
                            if (type == "GroupItem")
                            {
                                <div class="@("col-md-" + field_width)">
                                    <div class="row gx-5">
                                        <div class="col-md-12 card-header"><strong class="mb-0 text-primary">@label</strong></div>
                                        @* goi vong lap de lay cac field con *@
                                        @foreach (var fieldchild in config_formfield.Where(p => p.parentid == field.id).OrderBy(p => p.tabindex).ToList())
                                        {
                                            @* name: Key cua field truyen vao, label: Ten field, type: Loại field, value: giá trị field
                                , field width: độ rộng field *@
                                            string child_name = fieldchild.code.ToLower();
                                            string child_label = fieldchild.name;
                                            string child_type = fieldchild.formfieldtypecode;
                                            string child_field_options = fieldchild.options;
                                            // chuyen thong tin options thanh Dictionary cho dễ xử lý
                                            var child_field_optionsDict = ParseDataHelper.ParseOptionsToDictionary(child_field_options);
                                            // chuyen thong tin editor options thanh Dictionary cho dễ xử lý
                                            var child_field_editoroptionsDict = ParseDataHelper.ParseEditorOptionsToDictionary(child_field_options);
                                            // col span mặc định là 3
                                            int child_field_colspan = Convert.ToInt32(child_field_optionsDict.ContainsKey("colSpan") ? Convert.ToInt32(child_field_optionsDict["colSpan"]) : 3);
                                            // col span mặc định là 1
                                            int child_field_colcount = Convert.ToInt32(child_field_optionsDict.ContainsKey("colCount") ? Convert.ToInt32(child_field_optionsDict["colCount"]) : 1);
                                            // tinh do rong cua field dua tren gia tri config
                                            int child_field_width = (12 / field_colcount * child_field_colspan);

                                            //field icon va style cua field icon
                                            string iconclass = (child_field_optionsDict.ContainsKey("iconClass") ? Convert.ToString(child_field_optionsDict["iconClass"]) : "");
                                            string iconstyle = (child_field_optionsDict.ContainsKey("iconStyle") ? Convert.ToString(child_field_optionsDict["iconStyle"]) : "");
                                            string labelstyle = (child_field_optionsDict.ContainsKey("labelStyle") ? Convert.ToString(child_field_optionsDict["labelStyle"]) : "");
                                            string inputstyle = (child_field_optionsDict.ContainsKey("inputStyle") ? Convert.ToString(child_field_optionsDict["inputStyle"]) : "");

                                            // lay thong tin validation
                                            string child_field_validates = fieldchild.validates;
                                            // parse validation thanh List<Dictionary<string, object>>
                                            var child_field_validatesListDict = ParseDataHelper.ParseJsonToListDict(child_field_validates);

                                            // kiem tra bat buoc nhap
                                            bool child_isrequired = false;
                                            string child_required_message = "";
                                            var child_required_rule = ParseDataHelper.GetFormFieldValidate(child_field_validatesListDict,"required");
                                            if (child_required_rule != null && child_required_rule.Count > 0)
                                            {
                                                child_isrequired = true;
                                                child_required_message = child_required_rule.ContainsKey("message") ? child_required_rule["message"].ToString() : "Không được bỏ trống";
                                            }

                                            // kiem tra readonly
                                            bool child_isreadonly = child_field_editoroptionsDict.ContainsKey("readOnly") ? Convert.ToBoolean(child_field_editoroptionsDict["readOnly"]) : false;

                                            // nhan gia tri cua field
                                            var child_value = formData.ContainsKey(child_name) ? formData[child_name] : "";
                                            string[] noclasslabel_fieldtypes = ["RadioGroup","FileUploader","HTMLEditor"];

                                            <div class="col-md-@(Convert.ToInt32(child_field_width) == 0 ? "4" : child_field_width) form-control-validation fv-plugins-icon-container">
                                                <div style="@inputstyle" class="@(
                                                  noclasslabel_fieldtypes.Contains(child_type) ? "" : child_type == "CheckBox" ? "form-check mt-4" : child_type == "Switch" ? "form-check form-switch me-n3" : child_type == "DropDownBox" ? "form-floating form-floating-outline select2-dark form-floating-select2" : "form-floating form-floating-outline"
                                                )">
                                                    @if (child_type == "TextBox")
                                                    {
                                                        <input class="form-control form-control-sm" type="text" id="@child_name" name="@child_name" value="@child_value" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "") />
                                                    }
                                                    else if (child_type == "ColorBox")
                                                    {
                                                        // kiểm tra có thông tin màu mặc định thì truyền vào
                                                        string defaultcolor = child_field_editoroptionsDict.ContainsKey("default") ? Convert.ToString(child_field_editoroptionsDict["default"]) : "";

                                                        <div class="d-lg-inline-block"><smaill class="d-flex">@child_label: <span class="text-danger">@(child_isrequired == true ? "*" : "")</span></smaill>                                                
                                                            <button type="button" id="@("color-"+child_name)" data-default="@defaultcolor" class="pcr-button form-color-picker" role="button" aria-label="@child_label"></button>
                                                            <input type="hidden" id="@child_name" name="@child_name" value="@child_value" />
                                                        </div>
                                                    }
                                                    @if (child_type == "TextArea")
                                                    {
                                                        // lấy thông tin chiều cao (mặc định 200)
                                                        int height = child_field_editoroptionsDict.ContainsKey("height") ? Convert.ToInt32(child_field_editoroptionsDict["height"]) : 200;
                                                        <textarea style="height:@(height + "px")" class="form-control" placeholder="@child_label" name="@child_name" id="@child_name" aria-label="@child_label" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "")>@child_value</textarea>
                                                    }
                                                    else if (child_type == "NumberBox")
                                                    {
                                                        <input class="form-control form-control-sm" type="number" id="@child_name"  name="@child_name" value="@child_value" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "") />
                                                    }
                                                    else if (child_type == "DateBox")
                                                    {
                                                        @* mac dinh datetype la date *@
                                                        string datetype = child_field_editoroptionsDict.ContainsKey("type") ? (child_field_editoroptionsDict["type"].ToString() ?? "date") : "date";
                                                        <input class="form-control form-control-sm" type="@datetype" id="@child_name" name="@child_name" value="@child_value" @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "")/>
                                                    }
                                                    else if (child_type == "EmptyBox")
                                                    {
                                                        @* bỏ trống *@
                                                    }
                                                    else if (child_type == "SelectBox")
                                                    {
                                                        @* kiem tra neu co data fill store thi truyen vao (fill giá trị cho các field khác dựa vào giá trị của select box thông qua store) *@
                                                        var dataFillStore = child_field_editoroptionsDict.ContainsKey("dataFillStore") ? (child_field_editoroptionsDict["dataFillStore"].ToString() ?? "") : "";
                                                        @* check selected cho item dung voi gia tri *@
                                                        var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();

                                                        <select name="@child_name"
                                                        id="@child_name"
                                                        class="form-select color-dropdown form-select-sm"
                                                        data-datafillstore="@dataFillStore"
                                                        @(child_isrequired ? "required" : "")
                                                        @(child_isreadonly == true ? "disabled" : "")
                                                        >
                                                            <option value="">-- Chọn --</option>
                                                            @foreach (var item in selectList)
                                                            {
                                                                <option value="@item.Value"
                                                                selected="@(item.Value.ToString() == (child_value ?? "").ToString() ? "selected" : null)">
                                                                    @item.Text
                                                                </option>
                                                            }
                                                        </select>
                                                    }
                                                    else if (child_type == "DropDownBox")
                                                    {
                                                        @* check selected cho item dung voi gia tri *@
                                                        var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();

                                                        <select name="@child_name"
                                                        id="@child_name"
                                                        class="form-select color-dropdown form-select-sm"
                                                        @(child_isrequired ? "required" : "")
                                                        @(child_isreadonly == true ? "disabled" : "")
                                                        multiple>
                                                            <option value="">-- Chọn --</option>
                                                            @foreach (var item in selectList)
                                                            {
                                                                child_value ??= "";
                                                                // split chuoi value thanh List string để xử lý
                                                                var splitvalue = child_value.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries);
                                                                // kiểm tra cac giá trị có khớp không
                                                                <option value="@item.Value"
                                                                selected="@((splitvalue.Any(s => s.Trim().Equals(item.Value.ToString(), StringComparison.OrdinalIgnoreCase))) ? "selected" : null)">
                                                                    @item.Text
                                                                </option>
                                                            }
                                                        </select>
                                                    }
                                                    else if (child_type == "TagBox")
                                                    {
                                                        // check selected cho item dung voi gia tri
                                                        var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                        var tagBoxWhitelist = selectList.Select(x => new {
                                                            value = x.Value,
                                                            label = x.Text
                                                        });

                                                        // serialize whitelist tiếng Việt không bị escape unicode
                                                        var whitelistJson = JsonConvert.SerializeObject(tagBoxWhitelist, new JsonSerializerSettings
                                        {
                                            StringEscapeHandling = StringEscapeHandling.Default
                                        });

                                                        <input id="@child_name" class="tag-input form-control h-auto" name="@child_name" value="@child_value" data-jsonwhitelist='@whitelistJson' aria-label="@child_label" tabindex="-1">
                                                    }
                                                    else if (child_type == "ListSelection")
                                                    {
                                                        // check selected cho item dung voi gia tri
                                                        var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                        string inputName = child_name; // ví dụ: "ListSelectionInput"
                                                        var selectedValues = (value.ToString() ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries).ToList();
                                                        string hiddenInputId = $"hidden_{inputName}";

                                                        <div class="selection-container">
                                                            <label><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span> <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                                            <input type="hidden" name="@inputName" id="@hiddenInputId" value="@value" />

                                                            <div class="selection-list" data-target="@hiddenInputId">
                                                                @foreach (var item in selectList)
                                                                {
                                                                    bool isSelected = selectedValues.Contains(item.Value);
                                                                    <div class="selection-item @(isSelected ? "selected" : "")"
                                                                    data-value="@item.Value">
                                                                        @item.Text
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    }
                                                    else if (child_type == "RadioGroup")
                                                    {
                                                        <div class="d-lg-inline-block"><p class="d-block">@child_label: </p></div>
                                                        // check selected cho item dung voi gia tri
                                                        var selectList = dynamicServiceSelectOptions[child_name] as List<SelectListItem> ?? new List<SelectListItem>();

                                                        @if (selectList != null)
                                                        {
                                                            foreach (var item in selectList)
                                                            {
                                                                <div class="form-check form-check-inline">
                                                                    <input type="radio" class="form-check-input"
                                                                    name="@child_name"
                                                                    id="@(child_name + "_" + item.Value)"
                                                                    value="@item.Value"
                                                                    @((child_value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                                    <label class="form-check-label" for="@(child_name + "_" + item.Value)">@item.Text</label>
                                                                </div>
                                                            }
                                                        }
                                                    }
                                                    else if (child_type == "CheckBox" || child_type == "Switch")
                                                    {
                                                        <input class="form-check-input" type="checkbox" id="@child_name" name="@child_name" value="true" @((child_value ?? "").ToString().ToLower() == "true" ? "checked" : "") @(child_isreadonly == true ? "readonly" : "") @(child_isrequired == true ? "required" : "")/>
                                                    }
                                                    else if (child_type == "FileUploader")
                                                    {
                                                        string codeUpload = child_field_optionsDict.ContainsKey("codeUpload") ? (child_field_optionsDict["codeUpload"].ToString() ?? "") : "";
                                                        var fileList = new List<string>();
                                                        if (fileUrlsDict != null)
                                                        {
                                                            fileList = fileUrlsDict != null && fileUrlsDict.ContainsKey(codeUpload)
                                                            ? fileUrlsDict[codeUpload]
                                                            : new List<string>();
                                                        }
                                                        <div class="row gx-5">
                                                            <div class="col-md-4 card-header">
                                                                <div class="mb-4">
                                                                    <label for="@child_name" class="form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@child_label</span>  <span class='text-danger'>@(child_isrequired == true ? "*" : "")</span></label>
                                                                    <input class="form-control" type="file" id="@codeUpload" name="@codeUpload" data-target="@("#fileList-"+codeUpload)" data-carousel="@("#carouselSlideImage-"+codeUpload)" multiple />
                                                                    @* tao danh sach file rong de xu ly js hiển thị *@
                                                                    <ul id="@("fileList-"+codeUpload)"></ul>
                                                                </div>
                                                            </div>
                                                            @* Image slide *@
                                                            <div class="col-md-8">
                                                                <div id="@("carouselSlideImage-"+codeUpload)"
                                                                class="carousel slide carousel-fade w-50"
                                                                data-bs-ride="carousel">
                                                                    <div class="carousel-indicators">
                                                                        @if (fileList != null)
                                                                        {
                                                                            bool isPreviousImg = true;
                                                                            for (int i = 0; i < fileList.Count; i++)
                                                                            {
                                                                                var fileUrl = fileList[i];
                                                                                int index = i;
                                                                                // kiem tra khong phai la img thi bo qua
                                                                                @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                                {
                                                                                    isPreviousImg = false;
                                                                                }
                                                                                else
                                                                                {
                                                                                    // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                                    index = isPreviousImg == true ? index : index - 1;
                                                                                    <button type="button"
                                                                                    data-bs-target="@("#carouselSlideImage-"+codeUpload)"
                                                                                    data-bs-slide-to="@index"
                                                                                    class="@(index == 0 ? "active" : "")"
                                                                                    aria-current="@(index == 0 ? "true" : "false")"
                                                                                    aria-label="Slide @(index + 1)">
                                                                                    </button>
                                                                                }
                                                                            }
                                                                        }
                                                                    </div>
                                                                    <div class="carousel-inner">
                                                                        @if (fileList != null)
                                                                        {
                                                                            bool isPreviousImg = true;
                                                                            for (int i = 0; i < fileList.Count; i++)
                                                                            {
                                                                                var fileUrl = fileList[i];
                                                                                string fileName = fileUrl.Substring(fileUrl.LastIndexOf('/') + 1);
                                                                                int index = i;
                                                                                // kiem tra khong phai la img thi bo qua
                                                                                @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                                {
                                                                                    isPreviousImg = false;
                                                                                }
                                                                                else
                                                                                {
                                                                                    // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                                    index = isPreviousImg == true ? index : index - 1;
                                                                                    <div class="carousel-item @(index == 0 ? "active" : "")">
                                                                                        <img class="d-block w-100" src="@fileUrl" alt="@fileName" />
                                                                                        <div class="carousel-caption d-none d-md-block">
                                                                                            <h3 style="font-family: 'Shrikhand', cursive;font-weight:bold;"><a class="text-white" href="@fileUrl" target="_blank">@(fileUrl.Substring(fileUrl.LastIndexOf('/') + 1))</a></h3>
                                                                                        </div>
                                                                                    </div>
                                                                                }
                                                                            }
                                                                        }
                                                                    </div>
                                                                    <a class="carousel-control-prev" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="prev">
                                                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                                        <span class="visually-hidden">Previous</span>
                                                                    </a>
                                                                    <a class="carousel-control-next" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="next">
                                                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                                        <span class="visually-hidden">Next</span>
                                                                    </a>
                                                                </div>
                                                            </div>
                                                            @* end slide *@
                                                        </div>
                                                    }
                                                    else if (child_type == "HTMLEditor")
                                                    {
                                                        <label for="@child_name" class="htmleditor-form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@child_label</span> <span class='text-danger'>@(child_isrequired == true ? "*" : "")</span></label>
                                                        // Quill Editor hiển thị
                                                        <div id="@("editor-container-"+child_name)" style="height:300px;" class="quill-editor"></div>
                                                        // Hidden input để submit
                                                        <input type="hidden" id="@("editor-content-"+child_name)" name="@child_name" value="@child_value" />
                                                    }
                                                    else if (child_type == "DynamicReport")
                                                    {
                                                        @* lấy các thông tin cấu hình riêng *@
                                                        string reportCode = field_editoroptionsDict.ContainsKey("reportCode") ? (field_editoroptionsDict["reportCode"].ToString() ?? "") : "";
                                                        bool isViewerUtility = field_editoroptionsDict.ContainsKey("isViewerUtility") ? Convert.ToBoolean(field_editoroptionsDict["isViewerUtility"]) : false;
                                                        bool isEditor = field_editoroptionsDict.ContainsKey("isEditor") ? Convert.ToBoolean(field_editoroptionsDict["isEditor"]) : false;

                                                        <div class="row gx-5">
                                                            <div class="col-md-12 card-header"><label class="mb-0"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@child_label</span></label></div>
                                                            <div class="col-md-12 card-body">
                                                                @* Khu vực chứa Report Editor *@
                                                                <div id="@("ReportEditor-" + child_name)" class="form-report-editor" data-reportcode = "@reportCode">

                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                    else if (child_type == "Label")
                                                    {
                                                        @* lấy chuỗi css và parse thành style tương ứng *@
                                                        var labelcss = ParseDataHelper.ParseOptionsToDictionary(child_field_optionsDict.ContainsKey("labelCss") ? Convert.ToString(child_field_optionsDict["labelCss"]) : "{}");
                                                        var styleString = string.Join(";", labelcss.Select(kv => $"{kv.Key}:{kv.Value}"));
                                                        <p for="@name" style="@styleString">@Html.Raw(value)</p>
                                                    }
                                                    else if (child_type == "EmbedYoutube")
                                                    {
                                                        <P for="@child_name" class="htmleditor-form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span></P>
                                                        <div class="youtube-video-embed w-100">
                                                            <div class="plyr__video-embed" id="plyr-youtube-video">
                                                                <iframe src="@child_value"
                                                                        allowfullscreen
                                                                        allowtransparency
                                                                        allow="autoplay"></iframe>
                                                            </div>
                                                        </div>
                                                    }
                                                    else if (child_type == "VideoUploader")
                                                    {
                                                        @* video info là chuỗi json chứa các thông tin video *@
                                                        string videoinfo = child_value?.ToString();
                                                        string mediapath = "";
                                                        string mediatitle = "";
                                                        string thumbnailpath = "";
                                                        if (!string.IsNullOrWhiteSpace(videoinfo))
                                                        {
                                                            var videodictinfo = ParseDataHelper.ParseJsonPathToDictionary(videoinfo);

                                                            if (videodictinfo != null && videodictinfo.Count > 0)
                                                            {
                                                                mediapath = (videodictinfo.ContainsKey("MediaPath") ? Convert.ToString(videodictinfo["MediaPath"] ?? "") : "");
                                                                mediatitle = (videodictinfo.ContainsKey("MediaTitle") ? Convert.ToString(videodictinfo["MediaTitle"] ?? "") : "");
                                                                thumbnailpath = (videodictinfo.ContainsKey("ThumbnailPath") ? Convert.ToString(videodictinfo["ThumbnailPath"] ?? "") : "");
                                                            }
                                                        }

                                                        <p for="@child_name" class="htmleditor-form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@child_label</span></p>
                                                        <div class="video-player-embed">
                                                            <video class="w-100 plyr__video-embed" id="@("plyr-video-player-"+name)" poster="@thumbnailpath" playsinline="" controls="" title="@mediatitle">
                                                                <source src="@mediapath" type="video/mp4">
                                                            </video>
                                                        </div>
                                                    }

                                                    @{
                                                        // mot số trường sử dụng label riêng
                                                        string[] nolabel_fieldtypes = ["DynamicReport","FileUploader","HTMLEditor","RadioGroup","EmptyBox","ListSelection","Label","EmbedYoutube","VideoUploader"];
                                                        if (!nolabel_fieldtypes.Contains(child_type))
                                                        {
                                                            <label for="@child_name"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@child_label</span> <span class='text-danger'>@(child_isrequired == true ? "*" : "")</span></label>
                                                        }
                                                    }
                                                    @*  <div class="valid-feedback"> Chính xác! </div>
                                    <div class="invalid-feedback"> @child_required_message </div> *@
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>                              

                            }
                            else
                            {
                                // nếu không phải là group item và không có parentid thì xử lý bình thường
                                string[] noclasslabel_fieldtypes = ["RadioGroup", "FileUploader", "HTMLEditor"];

                                //icon va style cua icon
                                string iconclass = (field_optionsDict.ContainsKey("iconClass") ? Convert.ToString(field_optionsDict["iconClass"]) : "");
                                string iconstyle = (field_optionsDict.ContainsKey("iconStyle") ? Convert.ToString(field_optionsDict["iconStyle"]) : "");
                                string labelstyle = (field_optionsDict.ContainsKey("labelStyle") ? Convert.ToString(field_optionsDict["labelStyle"]) : "");
                                string inputstyle = (field_optionsDict.ContainsKey("inputStyle") ? Convert.ToString(field_optionsDict["inputStyle"]) : "");

                                <div class="col-md-@(Convert.ToInt32(field_width) == 0 ? "4" : field_width) form-control-validation fv-plugins-icon-container">
                                    <div style="@inputstyle" class="@(
                                        noclasslabel_fieldtypes.Contains(type) ? "" : type == "CheckBox" ? "form-check mt-4" : type == "Switch" ? "form-check form-switch me-n3" : type == "DropDownBox" ? "form-floating form-floating-outline select2-dark form-floating-select2" : "form-floating form-floating-outline"
                                      )">
                                        @if (type == "TextBox")
                                        {
                                            <input class="form-control form-control-sm" type="text" id="@name" name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "") />
                                        }
                                        else if (type == "ColorBox")
                                        {
                                            // kiểm tra có thông tin màu mặc định thì truyền vào
                                            string defaultcolor = field_editoroptionsDict.ContainsKey("default") ? Convert.ToString(field_editoroptionsDict["default"]) : "";

                                            <div class="d-lg-inline-block"><smaill class="d-flex">@label: <span class="text-danger">@(isrequired == true ? "*" : "")</span></smaill>
                                                <button type="button" id="@("color-"+name)" data-default="@defaultcolor" class="pcr-button form-color-picker" role="button" aria-label="@label"></button>
                                                <input type="hidden" id="@name" name="@name" value="@value" />
                                            </div>

                                        }
                                        else if (type == "TextArea")
                                        {
                                            // lấy thông tin chiều cao (mặc định 200)
                                            int height = field_editoroptionsDict.ContainsKey("height") ? Convert.ToInt32(field_editoroptionsDict["height"]) : 200;
                                            <textarea style="height:@(height + "px")" class="form-control" placeholder="@label" name="@name" id="@name" aria-label="@label" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "")>@value</textarea>
                                        }
                                        else if (type == "NumberBox")
                                        {
                                            <input class="form-control form-control-sm" type="number" id="@name"  name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "") />
                                        }
                                        else if (type == "DateBox")
                                        {
                                            @* mac dinh datetype la date *@
                                            string datetype = field_editoroptionsDict.ContainsKey("type") ? (field_editoroptionsDict["type"].ToString() ?? "date") : "date";
                                            <input class="form-control form-control-sm" type="@datetype" id="@name" name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "")/>
                                        }
                                        else if (type == "EmptyBox")
                                        {
                                            @* bỏ trống *@
                                        }
                                        else if (type == "SelectBox")
                                        {
                                            @* kiem tra neu co data fill store thi truyen vao (fill giá trị cho các field khác dựa vào giá trị của select box thông qua store) *@
                                            var dataFillStore = field_editoroptionsDict.ContainsKey("dataFillStore") ? (field_editoroptionsDict["dataFillStore"].ToString() ?? "") : "";
                                            @* check selected cho item dung voi gia tri *@
                                            var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();

                                            <select name="@name"
                                            id="@name"
                                            class="form-select color-dropdown form-select-sm"
                                            data-datafillstore="@dataFillStore"
                                            @(isrequired ? "required" : "")
                                            @(isreadonly == true ? "disabled" : "")
                                            >
                                                <option value="">-- Chọn --</option>
                                                @foreach (var item in selectList)
                                                {
                                                    <option value="@item.Value"
                                                    selected="@(item.Value.ToString() == (value ?? "").ToString() ? "selected" : null)">
                                                        @item.Text
                                                    </option>
                                                }
                                            </select>
                                        }
                                        else if (type == "DropDownBox")
                                        {
                                            @* check selected cho item dung voi gia tri *@
                                            var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();

                                            <select name="@name"
                                            id="@name"
                                            class="form-select color-dropdown form-select-sm"
                                            @(isrequired ? "required" : "")
                                            @(isreadonly == true ? "disabled" : "")
                                            multiple>
                                                <option value="">-- Chọn --</option>
                                                @foreach (var item in selectList)
                                                {
                                                    value ??= "";
                                                    // split chuoi value thanh List string để xử lý
                                                    var splitvalue = value.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries);
                                                    // kiểm tra cac giá trị có khớp không
                                                    <option value="@item.Value"
                                                    selected="@((splitvalue.Any(s => s.Trim().Equals(item.Value.ToString(), StringComparison.OrdinalIgnoreCase))) ? "selected" : null)">
                                                        @item.Text
                                                    </option>
                                                }
                                            </select>
                                        }
                                        else if (type == "TagBox")
                                        {
                                            // check selected cho item dung voi gia tri
                                            var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                            var tagBoxWhitelist = selectList.Select(x => new {
                                                value = x.Value,
                                                label = x.Text
                                            });

                                            // serialize whitelist tiếng Việt không bị escape unicode
                                            var whitelistJson = JsonConvert.SerializeObject(tagBoxWhitelist, new JsonSerializerSettings
                              {
                                  StringEscapeHandling = StringEscapeHandling.Default
                              });

                                            <input id="@name" class="tag-input form-control h-auto" name="@name" value="@value" data-jsonwhitelist='@whitelistJson' aria-label="@label" tabindex="-1">
                                        }
                                        else if (type == "ListSelection")
                                        {
                                            // check selected cho item dung voi gia tri
                                            var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                            string inputName = name; // ví dụ: "ListSelectionInput"
                                            var selectedValues = (value.ToString() ?? "").Split(',', StringSplitOptions.RemoveEmptyEntries).ToList();
                                            string hiddenInputId = $"hidden_{inputName}";

                                            <div class="selection-container">
                                                <label><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span>  <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                                <input type="hidden" name="@inputName" id="@hiddenInputId" value="@value" />

                                                <div class="selection-list" data-target="@hiddenInputId">
                                                    @foreach (var item in selectList)
                                                    {
                                                        bool isSelected = selectedValues.Contains(item.Value);
                                                        <div class="selection-item @(isSelected ? "selected" : "")"
                                                        data-value="@item.Value">
                                                            @item.Text
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (type == "RadioGroup")
                                        {
                                            <div class="d-lg-inline-block"><p class="d-block">@label: </p></div>
                                            // check selected cho item dung voi gia tri
                                            var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();

                                            @if (selectList != null)
                                            {
                                                foreach (var item in selectList)
                                                {
                                                    <div class="form-check form-check-inline">
                                                        <input type="radio" class="form-check-input"
                                                        name="@name"
                                                        id="@(name + "_" + item.Value)"
                                                        value="@item.Value"
                                                        @((value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                        <label class="form-check-label" for="@(name + "_" + item.Value)">@item.Text</label>
                                                    </div>
                                                }
                                            }
                                        }
                                        else if (type == "CheckBox" || type == "Switch")  
                                        {
                                            <input class="form-check-input" type="checkbox" id="@name" name="@name" value="true" @((value ?? "").ToString().ToLower() == "true" ? "checked" : "") @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "")/>
                                        }
                                        else if (type == "FileUploader")
                                        {
                                            string codeUpload = field_optionsDict.ContainsKey("codeUpload") ? (field_optionsDict["codeUpload"].ToString() ?? "") : "";
                                            var fileList = new List<string>();
                                            if (fileUrlsDict != null)
                                            {
                                                fileList = fileUrlsDict != null && fileUrlsDict.ContainsKey(codeUpload)
                                                ? fileUrlsDict[codeUpload]
                                                : new List<string>();
                                            }
                                            <div class="row gx-5">
                                                <div class="col-md-4 card-header">
                                                    <div class="mb-4">
                                                        <label for="@name" class="form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span> <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                                        <input class="form-control" type="file" id="@codeUpload" name="@codeUpload" data-target="@("#fileList-"+codeUpload)" data-carousel="@("#carouselSlideImage-"+codeUpload)" multiple />
                                                        @* tao danh sach file rong de xu ly js hiển thị *@
                                                        <ul id="@("fileList-"+codeUpload)"></ul>
                                                    </div>
                                                </div>
                                                @* Image slide *@
                                                <div class="col-md-8">
                                                    <div id="@("carouselSlideImage-"+codeUpload)"
                                                    class="carousel slide carousel-fade w-50"
                                                    data-bs-ride="carousel">
                                                        <div class="carousel-indicators">
                                                            @if (fileList != null)
                                                            {
                                                                bool isPreviousImg = true;
                                                                for (int i = 0; i < fileList.Count; i++)
                                                                {
                                                                    var fileUrl = fileList[i];
                                                                    int index = i;
                                                                    // kiem tra khong phai la img thi bo qua
                                                                    @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                    {
                                                                        isPreviousImg = false;
                                                                    }
                                                                    else
                                                                    {
                                                                        // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                        index = isPreviousImg == true ? index : index - 1;
                                                                        <button type="button"
                                                                        data-bs-target="@("#carouselSlideImage-"+codeUpload)"
                                                                        data-bs-slide-to="@index"
                                                                        class="@(index == 0 ? "active" : "")"
                                                                        aria-current="@(index == 0 ? "true" : "false")"
                                                                        aria-label="Slide @(index + 1)">
                                                                        </button>
                                                                    }
                                                                }
                                                            }
                                                        </div>
                                                        <div class="carousel-inner">
                                                            @if (fileList != null)
                                                            {
                                                                bool isPreviousImg = true;
                                                                for (int i = 0; i < fileList.Count; i++)
                                                                {
                                                                    var fileUrl = fileList[i];
                                                                    string fileName = fileUrl.Substring(fileUrl.LastIndexOf('/') + 1);
                                                                    int index = i;
                                                                    // kiem tra khong phai la img thi bo qua
                                                                    @if (!(fileUrl.EndsWith(".jpg") || fileUrl.EndsWith(".png") || fileUrl.EndsWith(".jpeg") || fileUrl.EndsWith(".gif")))
                                                                    {
                                                                        isPreviousImg = false;
                                                                    }
                                                                    else
                                                                    {
                                                                        // kiem tra file truoc do co phai la img khong? neu khong phai thi img sau phai tru 1
                                                                        index = isPreviousImg == true ? index : index - 1;
                                                                        <div class="carousel-item @(index == 0 ? "active" : "")">
                                                                            <img class="d-block w-100" src="@fileUrl" alt="@fileName" />
                                                                            <div class="carousel-caption d-none d-md-block">
                                                                                <h3 style="font-family: 'Shrikhand', cursive;font-weight:bold;"><a class="text-white" href="@fileUrl" target="_blank">@(fileUrl.Substring(fileUrl.LastIndexOf('/') + 1))</a></h3>
                                                                            </div>
                                                                        </div>
                                                                    }
                                                                }
                                                            }
                                                        </div>
                                                        <a class="carousel-control-prev" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="prev">
                                                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                                            <span class="visually-hidden">Previous</span>
                                                        </a>
                                                        <a class="carousel-control-next" href="@("#carouselSlideImage-"+codeUpload)" role="button" data-bs-slide="next">
                                                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                                            <span class="visually-hidden">Next</span>
                                                        </a>
                                                    </div>
                                                </div>
                                                @* end slide *@
                                            </div>
                                        }
                                        else if (type == "HTMLEditor")
                                        {
                                            <label for="@name" class="htmleditor-form-label"><span style="@labelstyle">@label</span></label>
                                            // Quill Editor hiển thị
                                            <div id="@("editor-container-"+name)" style="height:300px;" class="quill-editor"></div>
                                            // Hidden input để submit
                                            <input type="hidden" id="@("editor-content-"+name)" name="@name" value="@value" />
                                        }
                                        else if (type == "DynamicReport")
                                        {
                                            @* lấy các thông tin cấu hình riêng *@
                                            string form_reportCode = field_editoroptionsDict.ContainsKey("reportCode") ? (field_editoroptionsDict["reportCode"].ToString() ?? "") : "";
                                            bool form_isViewerUtility = field_editoroptionsDict.ContainsKey("isViewerUtility") ? Convert.ToBoolean(field_editoroptionsDict["isViewerUtility"]) : false;
                                            bool form_isEditor = field_editoroptionsDict.ContainsKey("isEditor") ? Convert.ToBoolean(field_editoroptionsDict["isEditor"]) : false;

                                            <div class="row gx-5">
                                                <div class="col-md-12 card-header"><label class="mb-0"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span></label></div>
                                                <div class="col-md-12 card-body">
                                                    @* neu report dang editor thi load report editor, neu report dang viewer thi load report viewer *@
                                                    @if (form_isEditor)
                                                    {
                                                        @* Khu vực chứa Report Editor *@
                                                        <div id="@("ReportEditor-" + name)" class="form-report-editor" data-reportcode = "@form_reportCode">

                                                        </div>
                                                    }
                                                    else if (form_isViewerUtility)
                                                    {
                                                        @* Khu vực chứa Report Viewer *@
                                                        <div id="@("ReportViewer-" + name)" class="form-report-viewer" data-reportcode = "@form_reportCode">

                                                        </div>
                                                    }
                                                    else{
                                                        @* Khu vực chứa Report Viewer *@
                                                        <div id="@("ReportViewer-" + name)" class="form-report-viewer" data-reportcode = "@form_reportCode">

                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (type == "Label")
                                        {
                                            @* lấy chuỗi css và parse thành style tương ứng *@
                                            var labelcss = ParseDataHelper.ParseOptionsToDictionary(field_optionsDict.ContainsKey("labelCss") ? Convert.ToString(field_optionsDict["labelCss"]) : "{}");
                                            var styleString = string.Join(";", labelcss.Select(kv => $"{kv.Key}:{kv.Value}"));
                                            <p for="@name" style="@styleString">@Html.Raw(value)</p>
                                        }
                                        else if (type == "EmbedYoutube")
                                        {
                                            <p for="@name" class="htmleditor-form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span></p>
                                            <div class="youtube-video-embed w-100">
                                                <div class="plyr__video-embed" id="@("plyr-youtube-video-"+name)">
                                                    <iframe src="@value"
                                                            allowfullscreen
                                                            allowtransparency
                                                            allow="autoplay"></iframe>
                                                </div>
                                            </div>
                                        }
                                        else if (type == "VideoUploader")
                                        {
                                            @* video info là chuỗi json chứa các thông tin video *@
                                            string videoinfo = value?.ToString();
                                            string mediapath = "";
                                            string mediatitle = "";
                                            string thumbnailpath = "";
                                            if (!string.IsNullOrWhiteSpace(videoinfo))
                                            {
                                                var videodictinfo = ParseDataHelper.ParseJsonPathToDictionary(videoinfo);

                                                if (videodictinfo != null && videodictinfo.Count > 0)
                                                {
                                                    mediapath = (videodictinfo.ContainsKey("MediaPath") ? Convert.ToString(videodictinfo["MediaPath"] ?? "") : "");
                                                    mediatitle = (videodictinfo.ContainsKey("MediaTitle") ? Convert.ToString(videodictinfo["MediaTitle"] ?? "") : "");
                                                    thumbnailpath = (videodictinfo.ContainsKey("ThumbnailPath") ? Convert.ToString(videodictinfo["ThumbnailPath"] ?? "") : "");
                                                }
                                            }

                                            <p for="@name" class="htmleditor-form-label"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span></p>
                                            <div class="video-player-embed">
                                                <video class="w-100 plyr__video-embed" id="@("plyr-video-player-"+name)" poster="@thumbnailpath" playsinline="" controls="" title="@mediatitle">
                                                    <source src="@mediapath" type="video/mp4">
                                                </video>
                                            </div>
                                        }
                                        else if (type == "EmbedYoutube")
                                        {
                                            @* <input class="form-control form-control-sm" type="text" id="@name" name="@name" value="@value" @(isreadonly == true ? "readonly" : "") @(isrequired == true ? "required" : "") /> *@
                                            <lable for="@name" class="htmleditor-form-label"><i class="@iconclass" style="@styleclass"></i> @label</lable>
                                            <div class="youtube-video-embed w-100">
                                                <div class="plyr__video-embed" id="plyr-youtube-video">
                                                    <iframe src="@value"
                                                            allowfullscreen
                                                            allowtransparency
                                                            allow="autoplay"></iframe>
                                                </div>
                                            </div>
                                        }

                                        @* neu type dynamic report hoac file uploadder thì tự check label riêng *@
                                        @{
                                            string[] nolabel_fieldtypes = ["DynamicReport","FileUploader","HTMLEditor","RadioGroup","EmptyBox","ListSelection","Label","EmbedYoutube","VideoUploader"];
                                            if (!nolabel_fieldtypes.Contains(type))
                                            {
                                                <label for="@name"><i class="@iconclass" style="@iconstyle"></i> <span style="@labelstyle">@label</span> <span class='text-danger'>@(isrequired == true ? "*" : "")</span></label>
                                            }
                                        }
                                        @* <div class="valid-feedback"> Chính xác! </div>
                          <div class="invalid-feedback"> @required_message </div> *@
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
            <div class="modal-footer">
                @* nếu là trang hoàn chỉnh (is page) thì không có nút close *@
                @if (isPage == false)
                {
                    <button type="button" class="btn btn-outline-secondary modal-btn-close" data-bs-dismiss="modal">
                        Close
                    </button>
                    <button type="button" class="btn btn-primary modal-btn-submit">Lưu</button>
                }
                else if (isStepper == true)
                {
                    // nếu là dạng stepper thì nút sẽ được cấu hình riêng
                }
                else
                {
                    <button type="button" class="btn btn-primary modal-btn-submit">Lưu</button>
                }
        </div>
    </div>
</div>
 </form>


@* xử lý hiển thị form popup  *@
    <script>
        var fv;
        if (typeof fv !== 'undefined' && fv !== null) {
            fv.destroy(); // 💣 Hủy instance hiện tại để tránh trùng lặp
            fv = null;
        }

          // tim kiem trong select box
        $(document).ready(function () {
            // Khởi tạo Select2 cho các select đã có sẵn
            initSelect2();

        });

        // xử lý form popup
         $(document).ready(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const hiddenDiv = document.getElementById("hiddenInputs");

            urlParams.forEach((value, key) => {
              const input = document.createElement("input");
              input.type = "hidden";
              input.name = "q_"+key;
              input.value = value;
              hiddenDiv.appendChild(input);
            });

           $(".modal-btn-submit").click(function () {
              let form = $(this).closest("form");

              fv.validate().then(function (status) {
                  if (status === "Valid") {
                      console.log("✅ Form hợp lệ, thực hiện hành động tiếp theo...");
                      // 👉 Gọi form.submit() hoặc Ajax, hoặc trigger submit event
                      form.submit();
                  } else {
                      console.warn("❌ Form không hợp lệ!");
                  }
              });

          });

          $(".modal-formpopup").on("submit", function (e) {
              e.preventDefault();
              let form = $(this);

              // tìm xem có bảng nào trong form không? Nếu có thì kiểm tra và clean các dòng Un change để tránh xử lý nhiều dòng không cần thiết

              const table = form.find("table")[0]; // Tìm bảng trong form
              if (table)
              {
                cleanUnChangeRow(table);
              }

              let formData = new FormData(this);
              let formId = form.attr("id");
              let modalId = form.data("modal-id");
              let checkStepper = form.data("isstepper");


              // Có thể gọi thêm các validate custom ở đây nếu cần

              $.ajax({
                  type: form.attr("method"),
                  url: form.attr("action"),
                  data: formData,
                  processData: false,
                  contentType: false,
                  success: function (data) {
                      if (data.success) {
                          rplm({
                              title: "Xử lý thành công!",
                              text: "Hành động của bạn đã được xử lý.",
                              type: "success",
                              timer: 2000,
                              confirmButtonText: 'Xác nhận',
                          }, function () {
                              // nếu là dạng steper(form wizard) thì chuyển step
                              if (checkStepper)
                              {
                                let activeForm = document.querySelector("#"+formId);
                                // lấy stepper của form hiện tại
                                const stepper = activeForm._stepperInstance;
                                // truyền id của step trước vào step kế tiếp đê xử lý nếu có
                                if (data.hasOwnProperty('id') && data.id != null) {
                                    // gọi form wizard cha để gán previousid
                                    let parentForm = document.querySelector("#wizard-validation-form");
                                    parentForm._previousStepId = data.id
                                }
                                // chuyển step
                                stepper.next();
                              }
                              // nếu là dạng popup thì kích hoạt nút close và reload
                              else{
                                $("#" + modalId + " .modal-btn-close").trigger("click");
                                location.reload();
                              }
                          });
                      } else {
                          rplm({
                              title: "Lỗi!",
                              text: data.errorMessage || "Có vấn đề xảy ra.",
                              type: "error",
                              timer: 2000,
                              confirmButtonText: 'Xác nhận',
                          });
                      }
                  },
                  error: function (xhr) {
                      rplm({
                          title: "Lỗi!",
                          text: xhr.responseText || "Có vấn đề xảy ra.",
                          type: "error",
                          timer: 2000,
                          confirmButtonText: 'Xác nhận',
                      });
                  }
              });
          });
        });

  @*       // sau khi load, tu dong cap nhat format date
        $(document).ready(function () {
            // Lấy tất cả các input có type="date" hoặc "datetime-local"
            $('input[type="date"], input[type="datetime-local"]').each(function () {
                let originalValue = $(this).attr('value');

                if (originalValue) {
                    if ($(this).attr("type") === "date") {
                        // Kiểm tra xem đã đúng định dạng YYYY-MM-DD chưa
                        let isoDateRegex = /^\d{4}-\d{2}-\d{2}$/;
                        if (!isoDateRegex.test(originalValue)) {
                            let formattedDate = moment(originalValue, ["M/D/YYYY h:mm:ss A", "DD/MM/YYYY", "YYYY-MM-DD"]).format("YYYY-MM-DD");
                            $(this).val(formattedDate); // Điền trực tiếp vào value
                            $(this).attr("value", formattedDate); // Cập nhật lại giá trị trong HTML
                        }
                    } else if ($(this).attr("type") === "datetime-local") {
                        // Kiểm tra xem đã đúng định dạng YYYY-MM-DDTHH:mm chưa
                        let isoDateTimeRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}$/;
                        if (!isoDateTimeRegex.test(originalValue)) {
                            let formattedDateTime = moment(originalValue, ["M/D/YYYY h:mm:ss A", "DD/MM/YYYY HH:mm:ss", "YYYY-MM-DDTHH:mm:ss"]).format("YYYY-MM-DDTHH:mm");
                            $(this).val(formattedDateTime); // Điền trực tiếp vào value
                            $(this).attr("value", formattedDateTime); // Cập nhật lại giá trị trong HTML
                        }
                    }
                }
            });
        }); *@

        // sau khi load, tu dong cap nhat format date
        $(document).ready(function () {
            $('input[type="date"], input[type="datetime-local"]').each(function () {
                let originalValue = $(this).attr('value');

                if (originalValue) {
                    // Tạo moment từ nhiều format có thể gặp
                    let parsedDate = moment(originalValue, [
                        moment.ISO_8601,              // ISO format: 2025-05-24T10:30
                        "YYYY-MM-DD",                 // Chuẩn HTML date
                        "YYYY-MM-DDTHH:mm",           // Chuẩn HTML datetime-local
                        "M/D/YYYY h:mm:ss A",
                        "MM/DD/YYYY h:mm:ss A",
                        "MM/DD/YYYY HH:mm:ss",
                        "D/M/YYYY H:mm:ss",
                        "DD/MM/YYYY H:mm:ss",
                        "DD-MM-YYYY HH:mm:ss"
                    ], true); // 'true' = strict parsing

                    if (parsedDate.isValid()) {
                        if ($(this).attr("type") === "date") {
                            let formattedDate = parsedDate.format("YYYY-MM-DD");
                            $(this).val(formattedDate);
                            $(this).attr("value", formattedDate);
                            console.log("Date field:", $(this).attr('name'), "value:", originalValue);
                        } else if ($(this).attr("type") === "datetime-local") {
                            let formattedDateTime = parsedDate.format("YYYY-MM-DDTHH:mm");
                            $(this).val(formattedDateTime);
                            $(this).attr("value", formattedDateTime);
                            console.log("Date field:", $(this).attr('name'), "value:", originalValue);
                        }
                    } else {
                        console.warn("⚠️ ",$(this).attr('name')," Không parse được giá trị ngày: ", originalValue);
                    }
                }
            });
        });

          // Common function to parse Query String
          //function getQueryParams() {
          //    var params = {};
           //   var queryString = window.location.search.substring(1); // remove '?'
          //    if (queryString.length === 0) return params;

          //    var pairs = queryString.split("&");
          //    for (var i = 0; i < pairs.length; i++) {
          //        var pair = pairs[i].split('=');
           //       if (pair.length === 2) {
          //            params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1].replace(/\+/g, ' '));
           //       }
           //   }
          //    return params;
          //}


@*         // load report editor động trong form
        function loadFormReportEditor(reportCode, containerId) {
            var queryParams = getQueryParams();
            queryParams.reportCode = reportCode; // Inject thêm reportCode

            $.ajax({
                url: '/NETReport/Form_Report_Editor',
                type: 'GET',
                data: queryParams,
                success: function (response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                               title: "Lỗi khi hiển thị danh sách!",
                               text: response.errorMessage || "Có vấn đề xảy ra.",
                               type: "error",
                               timer: 2000,
                               confirmButtonText: 'Xác nhận',
                               html: true
                           });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $("#" + containerId).html(html);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error loading report editor:', error);
                }
            });
        }

        // load report viewer động trong form
        function loadFormReportViewer(reportCode, containerId) {
            var queryParams = getQueryParams();
            queryParams.reportCode = reportCode; // Inject thêm reportCode

            $.ajax({
                url: '/NETReport/Form_Report_Viewer',
                type: 'GET',
                data: queryParams,
                success: function (response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                               title: "Lỗi khi hiển thị danh sách!",
                               text: response.errorMessage || "Có vấn đề xảy ra.",
                               type: "error",
                               timer: 2000,
                               confirmButtonText: 'Xác nhận',
                               html: true
                           });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $("#" + containerId).html(html);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error loading report editor:', error);
                }
            });
        } *@

        // xử lý hiển thị dynamic report trong form nếu có
        $(document).ready(function () {
            // đối với dạng popup, phải lấy query param từ bên ngoài thông qua viewdata
            var queryParamOutSite = {};
            var viewDataParams = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewData["objParameters"] ?? new Dictionary<string, object>()));
            // Gộp với viewDataParams nếu có, và ưu tiên viewDataParams
            if (typeof viewDataParams === 'object' && viewDataParams !== null) {
                for (var key in viewDataParams) {
                    if (viewDataParams.hasOwnProperty(key)) {
                        queryParamOutSite[key] = viewDataParams[key];
                    }
                }
            }

            // Khi trang load, tìm tất cả div có class "form-report-editor" để load report editor
            $('.form-report-editor').each(function () {
                var reportCode = $(this).data('reportcode'); // lấy thuộc tính data-reportcode
                var containerId = $(this).attr('id');         // lấy id của div
                if (reportCode && containerId) {
                    loadFormReportEditor(reportCode, containerId, queryParamOutSite);
                }
            });
            // Khi trang load, tìm tất cả div có class "form-report-viewer" để load report viewer
            $('.form-report-viewer').each(function () {
                var reportCode = $(this).data('reportcode'); // lấy thuộc tính data-reportcode
                var containerId = $(this).attr('id');         // lấy id của div
                if (reportCode && containerId) {
                    loadFormReportViewer(reportCode, containerId, queryParamOutSite);
                }
            });
        });

        // kiem tra de xet readonly form
          $(document).ready(function () {
            var isReadOnly = @Json.Serialize(ViewData["IsReadOnly"]);
            if (isReadOnly === true || isReadOnly === "1" || isReadOnly === 1) {
              // Chỉ đặt readonly cho input, textarea
              $("form input, form textarea").prop("readonly", true);

              // Chỉ đặt disable cho select
              $("form select").prop("disabled", true);

              // Chỉ disable nút submit
              $("form button[type='submit']").prop("disabled", true);
              // disable cả nút submit của popuo form
              $(".modal-btn-submit").prop("disabled", true);
            }
        });

       // form validation
        $(document).ready(function () {
            // containerId là Id của container của form popup hiện tại
            const containerId = '@ViewData["ContainerId"]';
            // gọi form thuoc container này
            let form = document.querySelector("#"+containerId).querySelector("form");
            if (form) {
              const fieldValidationsArray = @Html.Raw((string.IsNullOrWhiteSpace(ViewData["fieldvalidation"]?.ToString()) ? "[]" : ViewData["fieldvalidation"]));
              const fieldValidations = Object.assign({}, ...fieldValidationsArray);

              // 👉 Sau bước này, bạn có thể kiểm tra:
              console.log("fieldValidations:", fieldValidations);

                fv = FormValidation.formValidation(form, {
                  fields: fieldValidations,
                  plugins: {
                    trigger: new FormValidation.plugins.Trigger,
                    bootstrap5: new FormValidation.plugins.Bootstrap5({
                      eleValidClass: "",
                      rowSelector: ".form-control-validation"
                    }),
                    autoFocus: new FormValidation.plugins.AutoFocus,
                    submitButton: new FormValidation.plugins.SubmitButton,
                  },
                  init: instance => {
                    instance.on("plugins.message.placed", function (ev) {
                        if (ev.element.parentElement.classList.contains("input-group")) {
                            ev.element.parentElement.insertAdjacentElement("afterend", ev.messageElement);
                        }
                    });
                    instance.on('core.form.valid', function() {
                        // ✅ KHÔNG submit, KHÔNG làm gì ở đây cả
                        // Để form tiếp tục chạy các hàm khác (onsubmit...)
                        console.log("✅ Form đã được kiểm tra hợp lệ, tiếp tục xử lý ở nơi khác..."); 
                    });
                  }
                });

              // ✅ Gán lại vào DOM element để lấy lại sau
              form._fvInstance = fv;
            }
        });
    </script>
