@using KOAHome.Helpers
@using System.Text.Json
@using Microsoft.Data.SqlClient
@using Npgsql
@{
    var resultList = ViewData["resultList"] as List<dynamic>;

    // giá trị isPage để kiểm tra có phải trang hoàn chỉnh không
    var isPage = ViewData["isPage"] as bool?;

    var containerId = ViewData["containerId"] as string;

    // truyen cau hinh report de xu ly giao dien
    var report = ViewData["report"] as IDictionary<string, object>;
    string ReportCode = ViewData["ReportCode"] as string;

    // truyen danh sach gia tri loc len giao dien
    var listFilterValue = ViewData["ListFilterValue"] as IDictionary<string, object>;
    var listFilterConfig = ViewData["ListFilterConfig"] as List<dynamic>;
    // danh sách select list chứa danh mục của các selectbox, radio, dropdownbox thuoc filter
    var dynamicServiceSelectOptions = ViewData["DynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;
    // danh sách select list chứa danh mục của các selectbox, radio, dropdownbox thuoc display editor
    var editorDynamicServiceSelectOptions = ViewData["EditorDynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;

    // truyen danh sach gia tri cot du lieu len giao dien
    var displayList = ViewData["displayList"] as List<dynamic>;
    // tính cấp cha con display (mac dinh chi lay 1)
    int displayParentLevelNum = ViewData.ContainsKey("displayParentLevelNum") ? Convert.ToInt32(ViewData["displayParentLevelNum"]) : 1;

    // tao bien dem de dem row num cho report
    var reportRowIndex = 1;

}

<div>
    @* table *@
    <div class="card mb-6">
        @if (report != null)
        {
            @* nếu isPage = true thì hiển thị title *@
            @if (isPage == true)
            {
                <h2 class="card-header text-center" id="header-title">@(listFilterValue.ContainsKey("title") ? listFilterValue["title"] : report.ContainsKey("name") ? report["name"] : "Danh sách")</h2>
            }
            <div class="card-datatable" id="vertical-example">
                @* nếu isPage = true, là trang hoàn chỉnh thì hiển thị thêm bộ lọc*@
                @if (isPage == true)
                {
                    <!-- Accordion -->
                    <!-- phan mo rong de an hien bo loc-->
                    <div class="row">
                        <div class="col-md mb-6 mb-md-2">
                            <div class="accordion mt-4" id="accordionExample">
                                <div class="accordion-item active">
                                    <h2 class="accordion-header" id="headingOne">
                                        <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#accordionOne" aria-expanded="true" aria-controls="accordionOne">
                                            Tìm kiếm nâng cao
                                        </button>
                                    </h2>
                                    <div id="accordionOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                        <div class="accordion-body">
                                            @* filter *@
                                            <form id = "reportfilter" method="get" class="needs-validation" novalidate="" asp-controller="NETReport" asp-action="Form_Report_Viewer" asp-route-ReportCode = "@ReportCode" asp-route-containerId ="@containerId" enctype="multipart/form-data">
                                                @* report code mac dinh truyen vao bo loc *@
                                                <div class="row gx-3 gy-2 align-items-center">
                                                    @* xu ly filter dong *@
                                                    @if(listFilterConfig != null)
                                                    {
                                                        foreach (var filter in listFilterConfig.OrderBy(p => p.OrderId).ToList())
                                                        {
                                                            @* name: Key cua filter truyen vao, label: Ten filter, type: Loại filter, value: giá trị filter
                                                  , colspan: độ rộng filter *@
                                                            string name = filter.code.ToLower();
                                                            string label = filter.name;
                                                            string type = filter.DynamicFieldName;
                                                            var value = listFilterValue.ContainsKey(name) ? listFilterValue[name] : "";
                                                            int colspan = Convert.ToInt32(filter.ColSpan);

                                                            @* neu colspan = 0 thi mac dinh = 4, neu khong thi lay colspan *@
                                                            <div class="col-md-@(Convert.ToInt32(filter.ColSpan) == 0 ? "4" : @filter.ColSpan) form-floating form-floating-outline mb-6">
                                                                @if (type == "TEXT BOX")
                                                                {
                                                                    <input class="form-control form-control-sm" type="text" id="@name" name="@name" value="@value" @(filter.Required == true ? "required" : "") />
                                                                }
                                                                else if (type == "DATE BOX")
                                                                {
                                                                    <input class="form-control form-control-sm" type="date" id="@name" name="@name" value="@value" @(filter.Required == true ? "required" : "") />
                                                                }
                                                                else if (type == "DATERANGEPICKER")
                                                                {
                                                                    <input class="form-control form-control-sm bs-rangepicker-filter" type="text" id="@name" name="@name" value="@value" @(filter.required == true ? "required" : "") />
                                                                }
                                                                else if (type == "SELECT BOX")
                                                                {
                                                                    @* check selected cho item dung voi gia tri *@
                                                                    var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                    @foreach (var item in selectList)
                                                                    {
                                                                        if (value != null)
                                                                        {
                                                                            item.Selected = (item.Value.ToString() == value.ToString()); // currentValue là giá trị đang được chọn
                                                                        }
                                                                    }
                                                                    var selectAttributes = new Dictionary<string, object>
                                                                        {
                                                                          { "class", "form-select color-dropdown form-select-sm" },
                                                                          { "id", name },
                                                                          { "name", name }
                                                                        };

                                                                  // neu bat buoc thi them truong bat buoc
                                                                    if (filter.Required == true)
                                                                    {
                                                                        selectAttributes["required"] = "required";
                                                                    }

                                                                    @Html.DropDownList(name, selectList, "-- Chọn --", selectAttributes)
                                                                }
                                                                else if (type == "TREEVIEW MULTIPLE")
                                                                {
                                                                    @* check selected cho item dung voi gia tri *@
                                                                    var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                    @foreach (var item in selectList)
                                                                    {
                                                                        if (value != null)
                                                                        {
                                                                            // split chuoi value thanh List string để xử lý
                                                                            var splitvalue = value.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries);
                                                                            // kiểm tra cac giá trị có khớp không
                                                                            item.Selected = (splitvalue.Any(s => s.Trim().Equals(item.Value.ToString(), StringComparison.OrdinalIgnoreCase))); // currentValue là giá trị đang được chọn
                                                                        }
                                                                    }
                                                                    var selectAttributes = new Dictionary<string, object>
                                                                        {
                                                                          { "class", "form-select color-dropdown form-select-sm" },
                                                                          { "id", name },
                                                                          { "name", name },
                                                                          { "multiple", "multiple" }
                                                                        };

                                                                  // neu bat buoc thi them truong bat buoc
                                                                    if (filter.Required == true)
                                                                    {
                                                                        selectAttributes["required"] = "required";
                                                                    }

                                                                    @Html.DropDownList(name, selectList, "-- Chọn --", selectAttributes)
                                                                }
                                                                <label for="@name">@label</label>
                                                                <div class="valid-feedback"> Chính xác! </div>
                                                                <div class="invalid-feedback"> Không được bỏ trống. </div>
                                                            </div>
                                                        }
                                                    }

                                                </div>
                                                @* end filter *@
                                                @* nut xem *@
                                                <div class="row gx-3 gy-2 align-items-center">
                                                    <div class="col-md-12 d-flex justify-content-center">
                                                        <label class="form-label" for="showToastPlacement">&nbsp;</label>
                                                        <button type="submit" id="showToastPlacement" class="btn btn-primary d-block">Xem</button>
                                                    </div>
                                                </div>
                                                @* end nut xem *@
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--/ Accordion -->
                    @* end filter *@
                }
                @* nếu report là 1 page riêng thì xử lý form riêng *@
                @if (isPage == true)
                {
                    @* form xu ly luu editor *@
                    @* @Html.Raw("<form id='editor-form' class='needs-validation' novalidate='' method='post' asp-controller='NETReport' asp-action='Editor_Utility' asp-route-reportCode='@ReportCode' enctype='multipart/form-data'>"); *@
                    string formHandleText = "<form id='editor-form' class='needs-validation' novalidate='' method='post' data-ispage='true' action='/NETReport/Form_Report_Editor?ReportCode=" + (string.IsNullOrEmpty(ReportCode) ? "" : ReportCode) + "&containerId=" + (string.IsNullOrEmpty(containerId) ? "" : containerId) + "' enctype='multipart/form-data'>";
                    @Html.Raw(formHandleText);
                }
                @* boc cac thanh phan cua table lai *@
                <div id="@("table-editor-" + (ReportCode ?? "emptycode") + "-wrap")">
                    @* action top *@
                    <div class="gx-3 gy-2 align-items-center report-top-action">
                    </div>
                    @* end action top *@
                    <div class="d-flex justify-content-between align-items-center">
                        @* hien thi so dong duoc hien thi *@
                        <div class="report-info d-flex gap-2"></div>
                        @* button xu ly add row và submit *@
                        <div class="d-flex gap-2">
                            <button type="button" class="btn text-muted p-0" onclick="addNewRow('@("table-editor-" + ReportCode ?? "emptycode")')"><i class="ri-add-line ri-24px"></i></button>
                            @if (isPage == true)
                            {
                                <button type="submit" class="btn text-muted p-0"><i class="ri-save-line ri-24px"></i></button>
                            }
                        </div>
                    </div>
                    @* hidden input để xử lý ẩn truyền dữ liệu từ param link vào bằng js *@
                    <div id="hiddenInputs"></div>
                    <div class="table-responsive" style="max-height: 300px">
                        <table id="@("table-editor-" + ReportCode ?? "emptycode")" data-table-displayname = "@(report.ContainsKey("name") ? (report["name"].ToString() ?? "Danh sách") : "Danh sách")" border="1" cellpadding="5" cellspacing="0" style="width: 100%; text-align: center; table-layout: auto;" class="table table-sm table-bordered table-hover display table-with-exportexcel">
                            <thead class="freepanze-head">
                                <tr>
                                    @* Cột này sẽ tự động chứa checkbox "Chọn tất cả" *@
                                    <th class="text-center" rowspan="@displayParentLevelNum" data-code="IdCheck" data-index="-1"  data-isexport="False" style="min-width:50px"></th>
                                    @* Cột chi tiết mặc định*@
                                    <th class="text-center" rowspan="@displayParentLevelNum" data-code="IdDetail" data-index="0"  data-isexport="False" style="min-width:10px"></th>
                                    @* neu display khong null thi tiep tuc *@
                                    @if (displayList != null)
                                    {
                                        @* voi moi cot dang co *@
                                        @* neu cot isdisplay = false thi không hien thi (chỉ lấy giá trị)  *@
                                        @foreach (var display in displayList.Where(p => p.isdisplay == false).OrderBy(p => p.colnum ?? 0).ToList())
                                        {
                                            <th class="text-center d-none" rowspan="@displayParentLevelNum" data-code="@display.code?.ToLower()" data-index="@(display.colnum ?? "0")" data-isexport="@(display.isexport ?? "True")">@Html.Raw(display.name)</th>
                                        }
                                        @* hien thi cot stt dau tien neu co *@
                                        @foreach (var display in displayList.Where(p => p.isdisplay == true && p.code?.ToLower() == "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode?.ToLower())).OrderBy(p => p.colnum ?? 0).ToList())
                                        {
                                            @* co dinh cot neu co cau hinh (chi ap dung cho cot 1 rowspan) *@
                                            <th class="text-center @(display.isfreepane == true ? "freepanze-col" : "")" rowspan="@displayParentLevelNum" data-code="@display.code?.ToLower()" data-index="@(display.colnum ?? "0")" data-isexport="@(display.isexport ?? "True")" style="min-width:@((display.width ?? "200") + "px");@(display.cssheader ?? "")">@Html.Raw(display.name)</th>
                                        }
                                        @* neu cot khong co parent code cung khong phai is parent thi xu ly rieng *@
                                        @foreach (var display in displayList.Where(p => p.isdisplay == true && p.code?.ToLower() != "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode?.ToLower())).OrderBy(p => p.colnum ?? 0).ToList())
                                        {
                                            @* co dinh cot neu co cau hinh (chi ap dung cho cot 1 rowspan) *@
                                            <th class="text-center @(display.isfreepane == true ? "freepanze-col" : "")" rowspan="@displayParentLevelNum" data-code="@display.code?.ToLower()" data-index="@(display.colnum ?? "0")" data-isexport="@(display.isexport ?? "True")" style="min-width:@((display.width ?? "200") + "px");@(display.cssheader ?? "")">@Html.Raw(display.name)</th>
                                        }
                                        @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                        @if (displayList.Any(p => p.isparent == true))
                                        {
                                            @* hien thi cot cha *@
                                            @foreach (var display in displayList.Where(p => p.isdisplay == true && p.isparent == true).OrderBy(p => p.colnum ?? 0).ToList())
                                            {
                                                @* dem so cot con de tinh colspan *@
                                                var countChild = displayList.Count(p => p.parentcode?.ToLower() == display.code?.ToLower());
                                                @* neu co cot con thi xu ly tiep *@
                                                if (countChild > 0)
                                                {
                                                    <th class="text-center" colspan="@countChild" data-code="@display.code?.ToLower()" data-isexport="@(display.isexport ?? "True")" style="@(display.cssheader ?? "")">@Html.Raw(display.name)</th>
                                                }

                                            }
                                          }
                                          @* them nut xoa cuoi dòng *@
                                          <th class="text-center" style="width:100px;">Hành động</th>

                                      }
                                </tr>
                                @* neu co cap cha con thi tiep tuc *@
                                @if (displayParentLevelNum > 1)
                                {
                                    <tr>
                                        @* neu display khong null thi tiep tuc *@
                                        @if (displayList != null)
                                        {
                                            @* voi moi cot dang co *@
                                            @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                            @if (displayList.Any(p => p.isparent == true))
                                            {
                                                @* hien thi cot cha *@
                                                @foreach (var display in displayList.Where(p => p.isdisplay == true && p.isparent == true).OrderBy(p => p.colnum ?? 0).ToList())
                                                {
                                                    @* dem so cot con de tinh colspan *@
                                                    var countChild = displayList.Count(p => p.parentcode?.ToLower() == display.code?.ToLower());
                                                    @* neu co cot con thi xu ly tiep *@
                                                    @if (countChild > 0)
                                                    {
                                                        @foreach (var displaychild in displayList.Where(p => p.isdisplay == true && p.parentcode?.ToLower() == display.code?.ToLower()).OrderBy(p => p.colnum ?? 0).ToList())
                                                        {
                                                            <th class="text-center" data-code="@display.code?.ToLower()" data-index="@(displaychild.colnum ?? "0")" data-isexport="@(displaychild.isexport ?? "True")" style="min-width:@(displaychild.width ?? "200")px;@(displaychild.cssheader ?? "")">@Html.Raw(displaychild.name)</th>
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    </tr>
                                }
                            </thead>
                            <tbody class="overflow-auto">
                                @if (resultList != null && displayList != null)
                                {
                                    // Thêm dòng template rỗng
                                    var templateRow = new Dictionary<string, object>();

                                    foreach (var display in displayList)
                                    {
                                       templateRow[display.code?.ToLower()] = null; // hoặc "" nếu cần
                                    }

                                    // Đánh dấu là dòng mẫu
                                    templateRow["IsTemplateRow"] = true;

                                    // Thêm lên đầu danh sách
                                    resultList.Insert(0, templateRow);

                                    @* voi moi dong resultlist *@
                                    @foreach (var result in resultList
                                                                      .OrderBy(p =>
                                                                      {
                                                                          try
                                                                          {
                                                                              object sttObj;
                                                                              if (((IDictionary<string, object>)p).TryGetValue("stt", out sttObj) && sttObj != null)
                                                                              {
                                                                                  return Convert.ToInt32(sttObj);
                                                                              }
                                                                          }
                                                                          catch { }
                                                                          return 0;
                                                                      })
                                                                      .ToList()
                                              )
                                    {
                                        var dictionary = (IDictionary<string, object>)result;
                                        var Id = dictionary.ContainsKey("Id") ? Convert.ToInt32(dictionary["Id"]) : 0;
                                        @* lay gia tri to mau background row (BGColorRowClass) *@
                                        var bgColorRowClass = dictionary.ContainsKey("BGColorRowClass") ? Convert.ToString(dictionary["BGColorRowClass"]) : "";
                                        @* kiểm tra nếu là TemplateRow thì ẩn *@
                                        var isTemplateRow = dictionary.ContainsKey("IsTemplateRow") && (bool)dictionary["IsTemplateRow"];

                                        <tr class="@bgColorRowClass @(Convert.ToBoolean(isTemplateRow) ? "d-none" : "")" data-changed="false" data-template="@(Convert.ToBoolean(isTemplateRow) ? "true" : "false")">
                                            @* cột select box mặc đinh *@
                                            <td class="text-center" data-isexport="False" data-value="@Id">
                                            </td>
                                            @* cột chi tiết mặc đinh *@
                                            <td class="text-center" data-isexport="False">
                                            @* voi moi cot dang co *@
                                            @* neu cot isdisplay = false thi khong hien thi  *@
                                            @foreach (var display in displayList.Where(p => p.isdisplay == false).OrderBy(p => p.colnum ?? 0).ToList())
                                            {
                                                <td class="@FormatHelper.ParseTextAlignToClass(display.textalign) d-none form-control-validation fv-plugins-icon-container" data-isexport="@(display.isexport ?? "True")">
                                                    @{
                                                        object value;
                                                        if (dictionary.TryGetValue(display.code?.ToLower(), out value))
                                                        {
                                                            <input class="form-control text-center" type="text" name="@("grid["+@reportRowIndex+"]."+display.code?.ToLower())" value="@value" readonly />
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                        }
                                                    }
                                                </td>
                                            }
                                            @* hien thi cot stt dau tien neu co *@
                                            @foreach (var display in displayList.Where(p => p.isdisplay == true && p.code?.ToLower() == "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode?.ToLower())).OrderBy(p => p.colnum ?? 0).ToList())
                                            {
                                                @* neu isFreePane bang true thi them class freepanze-col *@
                                                <td class="text-center @(display.isfreepane == true ? "freepanze-col" : "") form-control-validation fv-plugins-icon-container" data-isexport="@(display.isexport ?? "True")">
                                                    @{
                                                        object value;
                                                        if (dictionary.TryGetValue(display.code?.ToLower(), out value))
                                                        {
                                                            <input class="form-control text-center" type="text" name="@("grid["+@reportRowIndex+"]."+display.code?.ToLower())" value="@value" readonly />
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                        }
                                                    }
                                                </td>
                                            }
                                            @* neu cot khong co parent code cung khong phai is parent thi xu ly rieng *@
                                            @foreach (var display in displayList.Where(p => p.isdisplay == true && p.code?.ToLower() != "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode?.ToLower())).OrderBy(p => p.colnum ?? 0).ToList())
                                            {
                                                @* mặc định type là string *@
                                                var displayType = display.type as string ?? "string";
                                                var displayFormat = display.format as string ?? "";
                                                var displayCode = display.code.ToLower() as string ?? "";
                                                var displayTextAlign = display.textalign as string ?? "";
                                                var displayIsExport = display.isexport;
                                                var displayIsReadOnly  = display.isreadonly ?? false;
                                                var displayValidationRule = display.validationrule ?? "[]";

                                                string[] numberTypeArray = ["int", "float", "long"];
                                                string[] dateTypeArray = ["date", "datetime"];
                                                @* neu isFreePane bang true thi them class freepanze-col *@
                                                <td class="@FormatHelper.ParseTextAlignToClass(displayTextAlign) @(display.isfreepane == true ? "freepanze-col" : "") form-control-validation fv-plugins-icon-container" data-isexport="@(displayIsExport ?? "True")" data-displaytype="@displayType" data-displayformat="@displayFormat">
                                                    @{
                                                        object value;
                                                        if (dictionary.TryGetValue(displayCode, out value))
                                                        {
                                                            string valueType = "";
                                                            // kiem tra kieu du lieu cua value
                                                            if (@value != null)
                                                            {
                                                                valueType = value.GetType().ToString();
                                                            }
                                                                // uu tien kiem tra kieu du lieu cua value roi den display
                                                            // neu kieu du lieu cua value la boolean thi su dung check box
                                                            @if (valueType == "System.Boolean" || displayType == "boolean")
                                                            {
                                                                <input class="form-check-input track-change" type="checkbox" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="true" @(Convert.ToBoolean(value ?? false) ? "checked" : "") @(displayValidationRule != "[]" ? "required" : "") @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "disabled" : "") />

                                                            }
                                                            else if (displayType == "icons")
                                                            {
                                                                var iconsJson = value?.ToString()?.Trim() ?? "";

                                                                // Nếu rỗng thì bỏ qua
                                                                if (!string.IsNullOrEmpty(iconsJson))
                                                                {
                                                                // Đảm bảo chuỗi JSON luôn là mảng
                                                                    if (iconsJson.TrimStart().StartsWith("{"))
                                                                    {
                                                                        iconsJson = "[" + iconsJson + "]";
                                                                    }

                                                                    try
                                                                    {
                                                                        var icons = JsonSerializer.Deserialize<List<JsonElement>>(iconsJson);

                                                                        <ul class="list-unstyled m-0 avatar-group d-flex align-items-center">
                                                                            @foreach (var icon in icons)
                                                                            {
                                                                                var title = icon.GetProperty("title").GetString();
                                                                                var image = icon.GetProperty("image").GetString();
                                                                                <li data-bs-toggle="tooltip"
                                                                                data-popup="tooltip-custom"
                                                                                data-bs-placement="top"
                                                                                class="avatar avatar-xs pull-up"
                                                                                aria-label="@title"
                                                                                data-bs-original-title="@title">
                                                                                    <img src="@image" alt="Avatar" class="rounded-circle" />
                                                                                </li>
                                                                            }
                                                                        </ul>
                                                                    }
                                                                    catch (PostgresException ex)
                                                                    {
                                                                        <span class="text-danger">N/A</span>
                                                                    }
                                                                }
                                                            }
                                                            // neu dang file thi hien thi icon tải nhiều file
                                                            else if (displayType == "file")
                                                            {
                                                                var filesJson = value?.ToString()?.Trim() ?? "";

                                                                // Nếu rỗng thì bỏ qua
                                                                if (!string.IsNullOrEmpty(filesJson))
                                                                {
                                                                // Nếu là object đơn, bao lại thành mảng
                                                                    if (filesJson.StartsWith("{"))
                                                                    {
                                                                        filesJson = "[" + filesJson + "]";
                                                                    }

                                                                    try
                                                                    {
                                                                        var fileList = JsonSerializer.Deserialize<List<JsonElement>>(filesJson);

                                                                        if (fileList?.Count > 0)
                                                                        {
                                                                            <div class="d-flex flex-wrap gap-1">
                                                                                @foreach (var file in fileList)
                                                                                {
                                                                                    var fileName = file.GetProperty("fileName").GetString();
                                                                                    var url = file.GetProperty("url").GetString();
                                                                                    var displayName = fileName?.Length > 50 ? fileName.Substring(0, 50) + "..." : fileName;

                                                                                    <a href="@url" download class="btn btn-sm btn-outline-primary file-download-link" title="@fileName">
                                                                                        <i class="ri-download-2-fill"></i> @displayName
                                                                                    </a>
                                                                                }
                                                                            </div>
                                                                        }
                                                                    }
                                                                    catch
                                                                    {
                                                                        <span class="text-danger">Lỗi định dạng file JSON</span>
                                                                    }
                                                                }
                                                            }
                                                            // neu la kieu link thi parse thanh html
                                                            else if (displayType == "link")
                                                            {
                                                                @Html.Raw(value);
                                                            }
                                                            // kiểu string
                                                            else if (displayType == "string")
                                                            {
                                                                <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displayTextAlign)" type="text" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="@value" @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "readonly" : "") @(displayValidationRule != "[]" ? "required" : "") />
                                                            }
                                                            // kiểu color
                                                            else if (displayType == "color")
                                                            {
                                                                <div class="pickr">
                                                                    <button type="button" id="@("color-"+("grid-"+@reportRowIndex+"-"+displayCode))" class="pcr-button form-color-picker" role="button" @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "disabled" : "")></button>
                                                                    <input type="hidden" class="track-change" id="@("grid-"+@reportRowIndex+"-"+displayCode)" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="@value" @(displayValidationRule != "[]" ? "required" : "") />
                                                                </div>
                                                            }
                                                            // kiểu textarea
                                                            else if (displayType == "textarea")
                                                            {
                                                                <textarea row="2" class="form-control track-change @FormatHelper.ParseTextAlignToClass(displayTextAlign)" name="@("grid["+@reportRowIndex+"]."+displayCode)" aria-label="@display.name" @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "readonly" : "") @(displayValidationRule != "[]" ? "required" : "")>@value</textarea>
                                                            }
                                                            // neu la kieu number thi hien thi input number 
                                                            else if (numberTypeArray.Contains(displayType))
                                                            {
                                                                <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displayTextAlign)" type="number" placeholder="" name="@("grid["+@reportRowIndex+"]."+displayCode)" aria-label="@display.name" value="@value" @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "readonly" : "") @(displayValidationRule != "[]" ? "required" : "")>
                                                            }
                                                            // kiểu ngày
                                                            else if (dateTypeArray.Contains(displayType))
                                                            {
                                                                string[] dateFormatArray = ["dd/MM/yyyy", ""];
                                                                string dateBoxType = "";
                                                                if (displayType == "date" && dateFormatArray.Contains(displayFormat)){
                                                                    dateBoxType = "date";
                                                                }
                                                                else {
                                                                    dateBoxType = "datetime-local";
                                                                }

                                                                <input type="@dateBoxType" class="form-control track-change @FormatHelper.ParseTextAlignToClass(displayTextAlign)" name="@("grid["+@reportRowIndex+"]."+displayCode)" aria-label="@display.name" value="@value" @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "readonly" : "") @(displayValidationRule != "[]" ? "required" : "")>
                                                            }
                                                            else if (displayType == "combobox")
                                                            {
                                                                // check selected cho item dung voi gia tri
                                                                var selectList = editorDynamicServiceSelectOptions[displayCode] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                @foreach (var item in selectList)
                                                                {
                                                                    if (value != null)
                                                                    {
                                                                      item.Selected = (item.Value.ToString() == value.ToString()); // currentValue là giá trị đang được chọn
                                                                    }
                                                                }
                                                                var selectAttributes = new Dictionary<string, object>
                                                                {
                                                                    { "class", "form-select color-dropdown form-select-sm track-change" },
                                                                    { "name", ("grid["+@reportRowIndex+"]."+displayCode) }
                                                                };

                                                                // neu bat buoc thi them truong bat buoc
                                                                if (displayValidationRule != "[]")
                                                                {
                                                                    selectAttributes["required"] = "required";
                                                                }

                                                                @Html.DropDownList(("grid["+@reportRowIndex+"]."+displayCode), selectList, "-- Chọn --", selectAttributes)
                                                            }
                                                            else if (displayType == "radio")
                                                            {
                                                                // check selected cho item dung voi gia tri
                                                                var selectList = editorDynamicServiceSelectOptions[displayCode] as List<SelectListItem> ?? new List<SelectListItem>();

                                                                @if (selectList != null)
                                                                {
                                                                    foreach (var item in selectList)
                                                                    {
                                                                        <div class="form-check form-check-inline track-change">
                                                                            <input type="radio" class="form-check-input"
                                                                                    name="@("grid["+@reportRowIndex+"]."+displayCode)"
                                                                                    id="@(("grid["+@reportRowIndex+"]."+displayCode) + "_" + item.Value)"
                                                                                    value="@item.Value"
                                                                            @((value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                                            <label class="form-check-label" for="@(("grid["+@reportRowIndex+"]."+displayCode) + "_" + item.Value)">@item.Text</label>
                                                                        </div>
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displayTextAlign)" type="text" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="@value" @(Convert.ToBoolean(displayIsReadOnly ?? false) ? "readonly" : "") @(displayValidationRule != "[]" ? "required" : "") />
                                                                                  
                                                            }                                              }
                                                        else
                                                        {
                                                            <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                        }
                                                    }
                                                </td>
                                            }
                                            @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                            @if (displayList.Any(p => p.isparent == true))
                                            {
                                                @* hien thi cot cha *@
                                                @foreach (var display in displayList.Where(p => p.isdisplay == true && p.isparent == true).OrderBy(p => p.colnum ?? 0).ToList())
                                                {
                                                    @* dem so cot con de tinh colspan *@
                                                    var countChild = displayList.Count(p => p.parentcode?.ToLower() == display.code?.ToLower());
                                                    @* neu co cot con thi xu ly tiep *@
                                                    if (countChild > 0)
                                                    {
                                                        @foreach (var displaychild in displayList.Where(p => p.isdisplay == true && p.parentcode?.ToLower() == display.code?.ToLower()).OrderBy(p => p.colnum ?? 0).ToList())
                                                        {
                                                            @* mặc định type là string *@
                                                            var displayType = displaychild.type as string ?? "string";
                                                            var displayFormat = displaychild.format as string ?? "";
                                                            var displayCode = displaychild.code.ToLower() as string ?? "";
                                                            var displayTextAlign = displaychild.textalign as string ?? "";
                                                            var displayIsExport = displaychild.isexport;
                                                            var displayIsReadOnly  = displaychild.isreadonly ?? false;
                                                            var displayValidationRule = displaychild.validationrule ?? "[]";

                                                            string[] numberTypeArray = ["int", "float", "long"];
                                                            string[] dateTypeArray = ["date", "datetime"];
                                                            <td class="@FormatHelper.ParseTextAlignToClass(displaychild.textalign)" data-isexport="@(displaychild.isexport ?? "0") form-control-validation fv-plugins-icon-container" data-displaytype="@displayType" data-displayformat="@displayFormat">
                                                                @{
                                                                    object value;
                                                                    if (dictionary.TryGetValue(displayCode, out value))
                                                                    {
                                                                        string valueType = "";
                                                                        // kiem tra kieu du lieu cua value
                                                                        if (@value != null)
                                                                        {
                                                                            valueType = value.GetType().ToString();
                                                                        }
                                                                                          
                                                                        // uu tien kiem tra kieu du lieu cua value roi den display
                                                                        // neu kieu du lieu cua value la boolean thi su dung check box
                                                                        @if (valueType == "System.Boolean" || displayType == "boolean")
                                                                        {
                                                                            <input class="form-check-input track-change" type="checkbox" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="true" @(Convert.ToBoolean(value ?? false) ? "checked" : "") @(displaychild.validationrule != "[]" ? "required" : "") @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "disabled" : "") />

                                                                        }
                                                                        else if (displayType == "icons")
                                                                        {
                                                                            var iconsJson = value?.ToString()?.Trim() ?? "";

                                                                            // Nếu rỗng thì bỏ qua
                                                                            if (!string.IsNullOrEmpty(iconsJson))
                                                                            {
                                                                            // Đảm bảo chuỗi JSON luôn là mảng
                                                                                if (iconsJson.TrimStart().StartsWith("{"))
                                                                                {
                                                                                    iconsJson = "[" + iconsJson + "]";
                                                                                }

                                                                                try
                                                                                {
                                                                                    var icons = JsonSerializer.Deserialize<List<JsonElement>>(iconsJson);

                                                                                    <ul class="list-unstyled m-0 avatar-group d-flex align-items-center">
                                                                                        @foreach (var icon in icons)
                                                                                        {
                                                                                            var title = icon.GetProperty("title").GetString();
                                                                                            var image = icon.GetProperty("image").GetString();
                                                                                            <li data-bs-toggle="tooltip"
                                                                                            data-popup="tooltip-custom"
                                                                                            data-bs-placement="top"
                                                                                            class="avatar avatar-xs pull-up"
                                                                                            aria-label="@title"
                                                                                            data-bs-original-title="@title">
                                                                                                <img src="@image" alt="Avatar" class="rounded-circle" />
                                                                                            </li>
                                                                                        }
                                                                                    </ul>
                                                                                }
                                                                                catch (PostgresException ex)
                                                                                {
                                                                                    <span class="text-danger">N/A</span>
                                                                                }
                                                                            }
                                                                        }
                                                                        // neu dang file thi hien thi icon tải nhiều file
                                                                        else if (displayType == "file")
                                                                        {
                                                                            var filesJson = value?.ToString()?.Trim() ?? "";

                                                                            // Nếu rỗng thì bỏ qua
                                                                            if (!string.IsNullOrEmpty(filesJson))
                                                                            {
                                                                            // Nếu là object đơn, bao lại thành mảng
                                                                                if (filesJson.StartsWith("{"))
                                                                                {
                                                                                    filesJson = "[" + filesJson + "]";
                                                                                }

                                                                                try
                                                                                {
                                                                                    var fileList = JsonSerializer.Deserialize<List<JsonElement>>(filesJson);

                                                                                    if (fileList?.Count > 0)
                                                                                    {
                                                                                        <div class="d-flex flex-wrap gap-1">
                                                                                            @foreach (var file in fileList)
                                                                                            {
                                                                                                var fileName = file.GetProperty("fileName").GetString();
                                                                                                var url = file.GetProperty("url").GetString();
                                                                                                var displayName = fileName?.Length > 50 ? fileName.Substring(0, 50) + "..." : fileName;

                                                                                                <a href="@url" download class="btn btn-sm btn-outline-primary file-download-link" title="@fileName">
                                                                                                    <i class="ri-download-2-fill"></i> @displayName
                                                                                                </a>
                                                                                            }
                                                                                        </div>
                                                                                    }
                                                                                }
                                                                                catch
                                                                                {
                                                                                    <span class="text-danger">Lỗi định dạng file JSON</span>
                                                                                }
                                                                            }
                                                                        }
                                                                        // neu la kieu link thi parse thanh html
                                                                        else if (displayType == "link")
                                                                        {
                                                                            @Html.Raw(value);
                                                                        }
                                                                        // kiểu string
                                                                        else if (displayType == "string")
                                                                        {
                                                                            <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.textalign)" type="text" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="@value" @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "readonly" : "") @(displaychild.validationrule != "[]" ? "required" : "") />
                                                                        }
                                                                        // kiểu color
                                                                        else if (displayType == "color")
                                                                        {
                                                                            <div class="pickr">
                                                                                <button type="button" id="@("color-"+("grid-"+@reportRowIndex+"-"+displayCode))" class="pcr-button form-color-picker" role="button" @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "disabled" : "")></button>
                                                                                <input type="hidden" class="track-change" id="@("grid-"+@reportRowIndex+"-"+displayCode)" name="@("grid["+@reportRowIndex+"]."+displayCode)" value="@value" @(displaychild.validationrule != "[]" ? "required" : "") />
                                                                            </div>
                                                                        }
                                                                        // kiểu textarea
                                                                        else if (displayType == "textarea")
                                                                        {
                                                                            <textarea row="2" class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.textalign)" name="@("grid["+@reportRowIndex+"]."+displayCode)" aria-label="@displaychild.name" value="@value" @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "readonly" : "") @(displaychild.validationrule != "[]" ? "required" : "")>@value</textarea>
                                                                        }
                                                                        // neu la kieu number thi hien thi input number 
                                                                        else if (numberTypeArray.Contains(displayType))
                                                                        {
                                                                            <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.textalign)" type="number" placeholder="" name="@("grid["+@reportRowIndex+"]."+displayCode)" aria-label="@displaychild.name" value="@value" @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "readonly" : "") @(displaychild.validationrule != "[]" ? "required" : "")>
                                                                        }
                                                                        // kiểu ngày
                                                                        else if (dateTypeArray.Contains(displayType))
                                                                        {
                                                                            string[] dateFormatArray = ["dd/MM/yyyy", ""];
                                                                            string dateBoxType = "";
                                                                            if (displayType == "date" && dateFormatArray.Contains(displayFormat)){
                                                                                dateBoxType = "date";
                                                                            }
                                                                            else {
                                                                                dateBoxType = "datetime-local";
                                                                            }

                                                                            <input type="@dateBoxType" class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.textalign)" name="@("grid["+@reportRowIndex+"]."+displayCode)" aria-label="@displaychild.name" value="@value" @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "readonly" : "") @(displaychild.validationrule != "[]" ? "required" : "")>
                                                                        }
                                                                        else if (displayType == "combobox")
                                                                        {
                                                                            // check selected cho item dung voi gia tri
                                                                            var selectList = editorDynamicServiceSelectOptions[displayCode] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                            @foreach (var item in selectList)
                                                                            {
                                                                                if (value != null)
                                                                                {
                                                                                  item.Selected = (item.Value.ToString() == value.ToString()); // currentValue là giá trị đang được chọn
                                                                                }
                                                                            }
                                                                            var selectAttributes = new Dictionary<string, object>
                                                                            {
                                                                                { "class", "form-select track-change" },
                                                                                { "name", ("grid["+@reportRowIndex+"]."+displayCode) }
                                                                            };

                                                                            // neu bat buoc thi them truong bat buoc
                                                                            if (displaychild.validationrule != "[]")
                                                                            {
                                                                                selectAttributes["required"] = "required";
                                                                            }

                                                                            @Html.DropDownList(("grid["+@reportRowIndex+"]."+display.code?.ToLower()), selectList, "-- Chọn --", selectAttributes)
                                                                        }
                                                                        else if (displayType == "radio")
                                                                        {
                                                                            // check selected cho item dung voi gia tri
                                                                            var selectList = editorDynamicServiceSelectOptions[displayCode] as List<SelectListItem> ?? new List<SelectListItem>();

                                                                            @if (selectList != null)
                                                                            {
                                                                                foreach (var item in selectList)
                                                                                {
                                                                                    <div class="form-check form-check-inline track-change">
                                                                                        <input type="radio" class="form-check-input"
                                                                                                name="@("grid["+@reportRowIndex+"]."+displayCode)"
                                                                                                id="@(("grid["+@reportRowIndex+"]."+displayCode) + "_" + item.Value)"
                                                                                                value="@item.Value"
                                                                                        @((value ?? "").ToString() == item.Value.ToString() ? "checked" : "") />
                                                                                        <label class="form-check-label" for="@(("grid["+@reportRowIndex+"]."+displayCode) + "_" + item.Value)">@item.Text</label>
                                                                                    </div>
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                              <input class="form-control track-change @FormatHelper.ParseTextAlignToClass(displaychild.textalign)" type="text" name="@("grid["+@reportRowIndex+"]."+displaychild.code)" value="@value" @(Convert.ToBoolean(displaychild.isreadonly ?? false) ? "readonly" : "") @(displaychild.validationrule != "[]" ? "required" : "") />
                                                                        }                                              }
                                                                    else
                                                                    {
                                                                        <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                                    }
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                                    }
                                                                }
                                                            </td>
                                                        }
                                                    }

                                                }
                                            }
                                            @* them nut xoa cuoi dong *@
                                              <td class="text-center">
                                                  <input type="hidden" name="grid[@reportRowIndex].isdeleted" value="false" class="isDeleted track-change">
                                                  <button type="button" class="btn-delete btn btn-sm text-danger" onclick="toggleDelete(this)">
                                                      <i class="ri-delete-bin-line ri-24px"></i>
                                                  </button>
                                              </td>
                                        </tr>

                                        reportRowIndex++;
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                  <!--/ Pagination Start -->
                  <div class="col-12 report-pagination d-flex justify-content-end mt-3">
                  </div>
                  <!--/ Pagination End -->
                </div>
                @* nếu là 1 page riêng thì kết thúc form riêng *@
                @if (isPage == true)
                {
                    @* form xu ly luu editor *@
                    @Html.Raw("</form>");
                }
              </div>
          }
      </div>
      @* end table *@
</div>

<script>
    // tự động add param từ link vào hidden input
    window.addEventListener("DOMContentLoaded", () => {
      const urlParams = new URLSearchParams(window.location.search);
      const hiddenDiv = document.getElementById("hiddenInputs");

      urlParams.forEach((value, key) => {
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = "q_"+key;
        input.value = value;
        hiddenDiv.appendChild(input);
      });
    });


    // them dong editor moi
    function addNewRow(tableid = "ReportEditor") {
        const table = document.getElementById(tableid).getElementsByTagName('tbody')[0];
        const templateRow = table.querySelector('tr[data-template="true"]');
        const newIndex = table.rows.length + 1;

        if (!templateRow) {
            console.error("Không tìm thấy dòng mẫu!");
            return;
        }

        // 1. Destroy select2 trên templateRow trước
        const $select = $(templateRow).find("select");

        if ($select.hasClass("select2-hidden-accessible")) {
            $select.select2('destroy');
        }

        // Optionally clear ID (nếu cần clone nhiều dòng tránh id trùng)
        $select.removeAttr("id");

                // Clone dòng mẫu
        const newRow = templateRow.cloneNode(true);
        newRow.removeAttribute("data-template");
        newRow.style.display = "";
        // Gán thuộc tính change tracking nếu cần
        newRow.setAttribute("data-changed", "true");
        newRow.setAttribute("data-template", "false");
        // xóa class ẩn tr
        newRow.classList.remove("d-none");

        // Replace tất cả {{index}} trong thuộc tính name
        newRow.innerHTML = newRow.innerHTML.replace(/grid\[\d+\]/g, `grid[${newIndex}]`);

        // Thêm vào đầu bảng hoặc cuối bảng
        const firstRow = table.querySelector('tr[data-template="false"]');
        if (firstRow) {
            table.insertBefore(newRow, firstRow);
        } else {
            table.appendChild(newRow);
        }

        // Áp dụng Select2 nếu có
        $(newRow).find("select").select2({
            placeholder: "Chọn",
            allowClear: true,
            width: "100%"
        });
    }

          // sau khi load, tu dong cap nhat format date
        $(document).ready(function () {
            $('input[type="date"], input[type="datetime-local"]').each(function () {
                let originalValue = $(this).attr('value');

                if (originalValue) {
                    // Tạo moment từ nhiều format có thể gặp
                    let parsedDate = moment(originalValue, [
                        moment.ISO_8601,              // ISO format: 2025-05-24T10:30
                        "YYYY-MM-DD",                 // Chuẩn HTML date
                        "YYYY-MM-DDTHH:mm",           // Chuẩn HTML datetime-local
                        "M/D/YYYY h:mm:ss A",
                        "MM/DD/YYYY h:mm:ss A",
                        "MM/DD/YYYY HH:mm:ss",
                        "D/M/YYYY H:mm:ss",
                        "DD/MM/YYYY H:mm:ss",
                        "DD-MM-YYYY HH:mm:ss"
                    ], true); // 'true' = strict parsing

                    if (parsedDate.isValid()) {
                        if ($(this).attr("type") === "date") {
                            let formattedDate = parsedDate.format("YYYY-MM-DD");
                            $(this).val(formattedDate);
                            $(this).attr("value", formattedDate);
                            console.log("Date field:", $(this).attr('name'), "value:", originalValue);
                        } else if ($(this).attr("type") === "datetime-local") {
                            let formattedDateTime = parsedDate.format("YYYY-MM-DDTHH:mm");
                            $(this).val(formattedDateTime);
                            $(this).attr("value", formattedDateTime);
                            console.log("Date field:", $(this).attr('name'), "value:", originalValue);
                        }
                    } else {
                        console.warn("⚠️ ",$(this).attr('name')," Không parse được giá trị ngày: ", originalValue);
                    }
                }
            });
        });

         // xu ly nút xuat export, phan trang doi voi table cau hinh class table-with-exportexcel
        $(document).ready(function () {
            // voi moi class table with export excel se lay id va xu ly
            $('.table-with-exportexcel').each(function (index, tableElement) {
                var $table = $(tableElement);

                // Chỉ xử lý nếu table chưa init DataTable
                if ($.fn.DataTable.isDataTable(tableElement)) {
                    return; // bỏ qua nếu đã có DataTable
                }

                // Lấy pageTitle từ data-table-displayname
                var pageTitle = $table.attr('data-table-displayname')?.trim() || "Danh sách";

                // Xoá các ký tự đặc biệt không hợp lệ trong tên file (ví dụ: !, 🎉, ...)
                var sanitizedFilename = pageTitle.replace(/[^a-zA-Z0-9\u00C0-\u1EF9\s]/g, '').replace(/\s+/g, '_');

                // Xác định selector: nếu có id thì dùng id, không thì dùng class chung
                var selector = $table.attr('id') ? `#${$table.attr('id')}` : '.table-with-exportexcel';

                // Gọi hàm initExcelExportForTable để tìm table có class hoặc id liên quan để xử lý
                initExcelExportForTable(selector, {
                    // Thêm timestamp vào filename
                    filename: `${sanitizedFilename}_${getFormattedDateTime()}`,
                    title: pageTitle,
                    autoFilter: false,
                    sheetName: "Danh sách"
                });
            });
        });

          // tim kiem trong select box
        $(document).ready(function () {
            // Khởi tạo Select2 cho các select đã có sẵn
            initSelect2();

        });

        // function loại các row unchange cho editor utility
        function cleanUnChangeRow(table)
        {
          let rows = table.querySelectorAll("tbody tr");

          rows.forEach(row => {
            // neu khong khai bao data change thi bo qua, neu co khai bao data change thi kiem tra = false thi xoa 
              if (row.getAttribute('data-changed') !== undefined && row.getAttribute('data-changed') !== null)
              {
                if (row.getAttribute("data-changed") !== "true") {
                  row.remove(); // Xóa các dòng chưa thay đổi khỏi form trước khi submit
                }
              }
            // neu khong khai bao data template thi bo qua, neu co khai bao data template thi kiem tra = true thi xoa
              if (row.getAttribute('data-template') !== undefined && row.getAttribute('data-template') !== null)
              {
                if (row.getAttribute("data-template") == "true") {
                  row.remove(); // Xóa các dòng chưa thay đổi khỏi form trước khi submit
                }
              }
          });
        }

        // kiem tra nếu có nhập liệu trên bất kì dòng nào thì mới enable nút Lưu, và dòng nào nhập liệu thì mới truyền xuống IFormCollection
            // Theo dõi tất cả form trên trang
            document.querySelectorAll("form").forEach(form => {
                const table = form.querySelector("table"); // Tìm bảng trong form
                const submitButton = form.querySelector("button[type='submit']");

                if (!table) return; // Bỏ qua nếu không có bảng
                if (!table || !submitButton) return; // Bỏ qua nếu không có bảng hoặc nút submit

                function checkChanges() {
                    let hasChanges = false;

                    // Kiểm tra nếu form không có id là "editor-form", trả về false và dừng
                    if (form.id !== "editor-form") {
                        // Luôn bật nút lưu nếu không phải form editor-form
                        return;
                    }

                    // neu khong co tr nào co attr data change thi mac dinh hien thi nut Luu
                    if (table.querySelectorAll("tr[data-changed]").length == 0)
                    {
                      return;
                    }

                    table.querySelectorAll("tr").forEach(row => {
                        if (row.getAttribute("data-changed") === "true") {
                            hasChanges = true;
                        }
                    });

                    submitButton.disabled = !hasChanges; // Bật/tắt nút submit
                }

                // Một hàm duy nhất đánh dấu dòng thay đổi
                function markRowChanged(target) {
                    if (target.classList.contains("track-change")) {
                        const row = target.closest("tr");
                        if (row) {
                            row.setAttribute("data-changed", "true");
                            row.classList.add("row-changed"); // ➡️ Thêm dòng này để highlight
                            checkChanges();
                        }
                    }
                }

                // Theo dõi input và change chung
                table.addEventListener("input", event => {
                    markRowChanged(event.target);
                });

                table.addEventListener("change", event => {
                    markRowChanged(event.target);
                });

                // Nếu dùng jQuery và select2
                if (window.jQuery && $(table).length) {
                    $(table).on('select2:select select2:unselect', 'select.track-change', function (event) {
                        markRowChanged(event.target);
                    });
                }

                // Nếu người dùng click vào nút trong bảng
                table.addEventListener("click", event => {
                    const target = event.target;
                    if (target.closest("button")) {
                        const row = target.closest("tr");
                        if (row) {
                            row.setAttribute("data-changed", "true");
                            row.classList.add("row-changed"); // ➡️ Thêm dòng này để highlight
                            checkChanges();
                        }
                    }
                });

                    // Chỉ gử i dữ liệu của bảng đã thay đổi
                form.addEventListener("submit", function (event) {

                    cleanUnchangeRows(table);

                    // gọi ajax xử lý lưu thông tin\
                    const formData = new FormData(form);

                    let actionUrl = $(form).attr("action");
                    let formmethod = $(form).attr("method");
                    let urlParams = new URLSearchParams(actionUrl.split('?')[1]);
                    let containerId = urlParams.get("containerId");
                    let ispage = $(form).data("ispage");

                    // nếu không phải trang riêng thì tiếp tục xử lý theo form chung
                    if (ispage != null)
                    {
                      if (ispage == true)
                      {
                        event.preventDefault();
                        // Có thể gọi thêm các validate custom ở đây nếu cần
                        $.ajax({
                            type: formmethod,
                            url: actionUrl,
                            data: formData,
                            processData: false,
                            contentType: false,
                            success: function (data) {
                                if (data.success) {
                                    rplm({
                                        title: "Xử lý thành công!",
                                        text: "Hành động của bạn đã được xử lý.",
                                        type: "success",
                                        timer: 2000,
                                        confirmButtonText: 'Xác nhận',
                                    }, function () {
                                        // tìm tab đang hoạt động
                                        const $btn = $('.tab-panel-btn.active');

                                        // Xóa cache tab này
                                        delete tabContentCache[containerId];

                                        // Giả lập click lại tab panel
                                        $btn.trigger('click');
                                    });
                                } else {
                                    rplm({
                                        title: "Lỗi!",
                                        text: data.errorMessage || "Có vấn đề xảy ra.",
                                        type: "error",
                                        timer: 2000,
                                        confirmButtonText: 'Xác nhận',
                                    });
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error("XHR:", xhr);
                                console.error("Status:", status);
                                console.error("Error Thrown:", error);
                                rplm({
                                    title: "Lỗi!",
                                    text: "Lỗi: " + xhr.status + "\n" + xhr.statusText + "\n" + xhr.responseText || "Có vấn đề xảy ra.",
                                    type: "error",
                                    timer: 2000,
                                    confirmButtonText: 'Xác nhận',
                                });
                            }
                        });
                      }
                      else
                      {
                        @* form.submit(); *@
                      }
                    }
                    else
                    {
                      @* form.submit(); *@
                    }

                });

                checkChanges(); // Kiểm tra trạng thái ban đầu
            });

  
            // xử lý bộ lọc
            $("#reportfilter").on("submit", function (e) {
              e.preventDefault();
              let form = $(this);
              // lấy dữ liệu lọc
              let formDataArray = form.serializeArray();
              let formDataObject = {};
              formDataArray.forEach(function(item) {
                  formDataObject[item.name] = item.value;
              });

              let actionUrl = form.attr("action");
              let urlParams = new URLSearchParams(actionUrl.split('?')[1]);
              let reportCode = urlParams.get("ReportCode");  // Kết quả: "RPT001"
              let containerId = urlParams.get("containerId");
              
              // Xóa cache tab này
              delete tabContentCache[containerId];

              // gọi lại function xử lý hiển thị
              // Gọi AJAX và lưu cache
              loadFormReportEditor(reportCode, containerId, formDataObject, true, function (html) {
                  tabContentCache[containerId] = {
                          html,
                          lastCode: reportCode,
                          lastTemplate: "editor-utility"
                      };
                  });

          });
</script>
