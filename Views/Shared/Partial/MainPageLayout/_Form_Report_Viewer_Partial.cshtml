@using KOAHome.Helpers
@using System.Text.Json
@using Microsoft.Data.SqlClient
@using Npgsql
@{
    var resultList = ViewData["resultList"] as List<dynamic>;

    // giá trị isPage để kiểm tra có phải trang hoàn chỉnh không
    var isPage = ViewData["isPage"] as bool?;

    var containerId = ViewData["containerId"] as string;

    // truyen cau hinh report de xu ly giao dien
    var report = ViewData["report"] as IDictionary<string, object>;
    string ReportCode = ViewData["ReportCode"] as string;

    // truyen danh sach gia tri loc len giao dien
    var listFilterValue = ViewData["ListFilterValue"] as Dictionary<string, object>;
    var listFilterConfig = ViewData["ListFilterConfig"] as List<dynamic>;


    // danh sách select list chứa danh mục của các selectbox, radio, dropdownbox thuoc filter
    var dynamicServiceSelectOptions = ViewData["DynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;
    // danh sách select list chứa danh mục của các selectbox, radio, dropdownbox thuoc display editor
    var editorDynamicServiceSelectOptions = ViewData["EditorDynamicServiceSelectOptions"] as Dictionary<string, List<SelectListItem>>;

    // truyen danh sach gia tri cot du lieu len giao dien
    var displayList = ViewData["displayList"] as List<dynamic>;
    // tính cấp cha con display
    int displayParentLevelNum = ViewData.ContainsKey("displayParentLevelNum") ? Convert.ToInt32(ViewData["displayParentLevelNum"]) : 1;

    // truyen danh sach gia tri action du lieu len giao dien
    var actionlistdetailList = ViewData["actionlistdetailList"] as List<dynamic>;

    var actionlistdetailList_top = null as List<dynamic>;
    var actionlistdetailList_grid = null as List<dynamic>;
    // neu ton tai action list detail
    if (actionlistdetailList != null)
    {
        // phan biet action top va grid
        actionlistdetailList_top = actionlistdetailList.Where(p => p.istop == true).ToList();
        actionlistdetailList_grid = actionlistdetailList.Where(p => p.istop == null || p.istop == false).ToList();
    }

    // tao bien dem de dem row num cho report
    var reportRowIndex = 1;

}
            <div>
              @* table *@
              <div class="card h-100 overflow-hidden">
              @* nếu tồn tại report thì tiếp tục *@
              @if (report != null)
              {
                  @* nếu isPage = true thì hiển thị title *@
                  @if (isPage == true)
                  {
                    <h2 class="card-header text-center" id="header-title">@(listFilterValue.ContainsKey("title") ? listFilterValue["title"] : report.ContainsKey("name") ? report["name"] : "Danh sách")</h2>
                  }
                  <div class="card-datatable" id="vertical-example">
                  @* nếu isPage = true, là trang hoàn chỉnh thì hiển thị thêm bộ lọc và action top *@
                  @if (isPage == true)
                  {
                    <!-- Accordion -->
                    <!-- phan mo rong de an hien bo loc-->
                    <div class="row">
                        <div class="col-md">
                            <div class="accordion mt-4" id="accordionExample">
                                <div class="accordion-item active">
                                    <h2 class="accordion-header" id="headingOne">
                                        <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#accordionOne" aria-expanded="true" aria-controls="accordionOne">
                                            Tìm kiếm nâng cao
                                        </button>
                                    </h2>
                                    <div id="accordionOne" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                                        <div class="accordion-body">
                                            @* filter *@
                                            <form id="reportfilter" method="get" class="needs-validation" novalidate="" asp-controller="NETReport" asp-action="Form_Report_Viewer" asp-route-ReportCode = "@ReportCode" asp-route-containerId ="@containerId" enctype="multipart/form-data">
                                                @* report code mac dinh truyen vao bo loc *@
                                                <div class="row gx-3 gy-2 align-items-center">
                                                    @* xu ly filter dong *@
                                                    @foreach (var filter in listFilterConfig.OrderBy(p => p.OrderId).ToList())
                                                    {
                                                        @* name: Key cua filter truyen vao, label: Ten filter, type: Loại filter, value: giá trị filter
                                                    , colspan: độ rộng filter *@
                                                        string name = filter.code;
                                                        string label = filter.name;
                                                        string type = filter.DynamicFieldName;
                                                        var value = listFilterValue.ContainsKey(name) ? listFilterValue[name] : "";
                                                        int colspan = Convert.ToInt32(filter.ColSpan);

                                                        @* neu colspan = 0 thi mac dinh = 4, neu khong thi lay colspan *@
                                                            <div class="col-md-@(Convert.ToInt32(filter.ColSpan) == 0 ? "4" : @filter.ColSpan) form-floating form-floating-outline mb-6">
                                                            @if (type == "TEXT BOX")
                                                            {
                                                                <input class="form-control form-control-sm" type="text" id="@name" name="@name" value="@value" @(filter.Required == true ? "required" : "") />
                                                            }
                                                            else if (type == "DATE BOX")
                                                            {
                                                                <input class="form-control form-control-sm" type="date" id="@name" name="@name" value="@value" @(filter.Required == true ? "required" : "") />
                                                            }
                                                            else if (type == "DATERANGEPICKER")
                                                            {
                                                                <input class="form-control form-control-sm bs-rangepicker-filter" type="text" id="@name" name="@name" value="@value" @(filter.required == true ? "required" : "") />
                                                            }
                                                            else if (type == "SELECT BOX")
                                                            {
                                                                @* check selected cho item dung voi gia tri *@
                                                                var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                @foreach (var item in selectList)
                                                                {
                                                                    if (value != null)
                                                                    {
                                                                        item.Selected = (item.Value.ToString() == value.ToString()); // currentValue là giá trị đang được chọn
                                                                    }
                                                                }
                                                                var selectAttributes = new Dictionary<string, object>
                                                    {
                                                    { "class", "form-select color-dropdown form-select-sm" },
                                                    { "id", name },
                                                    { "name", name }
                                                    };

                                                                // neu bat buoc thi them truong bat buoc
                                                                if (filter.Required == true)
                                                                {
                                                                    selectAttributes["required"] = "required";
                                                                }

                                                                @Html.DropDownList(name, selectList, "-- Chọn --", selectAttributes)
                                                            }
                                                            else if (type == "TREEVIEW MULTIPLE")
                                                            {
                                                                @* check selected cho item dung voi gia tri *@
                                                                var selectList = dynamicServiceSelectOptions[name] as List<SelectListItem> ?? new List<SelectListItem>();
                                                                @foreach (var item in selectList)
                                                                {
                                                                    if (value != null)
                                                                    {
                                                                        // split chuoi value thanh List string để xử lý
                                                                        var splitvalue = value.ToString().Split(",", StringSplitOptions.RemoveEmptyEntries);
                                                                        // kiểm tra cac giá trị có khớp không
                                                                        item.Selected = (splitvalue.Any(s => s.Trim().Equals(item.Value.ToString(), StringComparison.OrdinalIgnoreCase))); // currentValue là giá trị đang được chọn
                                                                    }
                                                                }
                                                                var selectAttributes = new Dictionary<string, object>
                                                    {
                                                    { "class", "form-select color-dropdown form-select-sm" },
                                                    { "id", name },
                                                    { "name", name },
                                                    { "multiple", "multiple" }
                                                    };

                                                                // neu bat buoc thi them truong bat buoc
                                                                if (filter.Required == true)
                                                                {
                                                                    selectAttributes["required"] = "required";
                                                                }

                                                                @Html.DropDownList(name, selectList, "-- Chọn --", selectAttributes)
                                                            }
                                                            <label for="@name">@label</label>
                                                            <div class="valid-feedback"> Chính xác! </div>
                                                            <div class="invalid-feedback"> Không được bỏ trống. </div>
                                                        </div>
                                                    }

                                                </div>
                                                @* end filter *@
                                                @* nut xem *@
                                                <div class="row gx-3 gy-2 align-items-center">
                                                    <div class="col-md-12 d-flex justify-content-center">
                                                        <label class="form-label" for="showToastPlacement">&nbsp;</label>
                                                        <button type="submit" id="showToastPlacement" class="btn btn-primary d-block">Xem</button>
                                                    </div>
                                                </div>
                                                @* end nut xem *@
                                            </form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--/ Accordion -->
                    @* action top *@
                    <div class="d-flex demo-inline-spacing align-items-center table-action">
                      @* xu ly action list detail top *@
                        @foreach (var action in actionlistdetailList_top.OrderBy(p => p.actionlistdetailorderid).ToList())
                        {
                          var actionDict = (IDictionary<string, object>)action;
                          string actionName = actionDict.ContainsKey("actionname") ? (actionDict["actionname"].ToString() ?? "") : "";
                          string actionCode = actionDict.ContainsKey("actioncode") ? (actionDict["actioncode"].ToString() ?? "") : "";
                          bool actionIsTop = actionDict.ContainsKey("istop") ? Convert.ToBoolean(actionDict["istop"]) : false;
                          string actionIcon = actionDict.ContainsKey("actionicon") ? (actionDict["actionicon"].ToString() ?? "") : "";
                          string actionType = actionDict["type"].ToString() ?? "";
                          string actionValue = actionDict["Value"].ToString() ?? "";

                          if (actionType == "LINK")
                          {
                              string url = ParseDataHelper.GetReplaceLinkWithResult(actionValue, null, listFilterValue);
                              <a href="@url" type="button" class="btn btn-icon btn-primary" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                  title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                  <i class="@(actionIcon)"></i>
                              </a>
                          }
                          else if (actionType == "STORE")
                          {
                              string actionStore = actionValue;
                              // cac thong tin xac nhan, neu co thi truyen vao action
                              bool isPopupConfirm = Convert.ToBoolean(actionDict["ispopupconfirm"]);
                              int? dataSourceID = actionDict.TryGetValue("datasourceid", out var num) && num is int val ? Convert.ToInt32(num) : null;
                              string confirmButtonText = !string.IsNullOrWhiteSpace(actionDict["confirmbuttontext"].ToString()) ? actionDict["confirmbuttontext"].ToString() : null;
                              string confirmTitle = !string.IsNullOrWhiteSpace(actionDict["confirmtitle"].ToString()) ? actionDict["confirmtitle"].ToString() : null;
                              string confirmText = !string.IsNullOrWhiteSpace(actionDict["confirmtext"].ToString()) ? actionDict["confirmtext"].ToString() : null;
                              @if (isPopupConfirm)
                              {
                                  <a href="" data-isconfirm="@isPopupConfirm" data-confirmtext="@confirmText" data-confirmtitle="@confirmTitle" data-confirmbutton="@confirmButtonText" data-sqlstore="@actionStore" data-datasourceid="@dataSourceID" type="button" class="btn btn-icon btn-primary confirmAction" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                      title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                      <i class="@(actionIcon)"></i>
                                  </a>
                              }
                              else
                              {
                                  <a href="" data-sqlstore="@actionStore" data-datasourceid="@dataSourceID" type="button" class="btn btn-icon btn-primary confirmAction" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                      title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                      <i class="@(actionIcon)"></i>
                                  </a>
                              }
                              @* thiếu đoạn xử lý store với IsChooseData, sẽ bổ sung sau *@
                          }
                          else if (actionType == "POPUPFORM")
                          {
                              var popupDictValue = ParseDataHelper.GetReplacePopupLinkWithResult(actionValue, null, listFilterValue);
                              string actionFormCode = popupDictValue.ContainsKey("FORMCODE") ? popupDictValue["FORMCODE"].ToString() ?? "" : "";
                              string actionLink = popupDictValue.ContainsKey("LINK") ? popupDictValue["LINK"].ToString() ?? "" : "";
                              <a href="" data-bs-toggle="modal" data-bs-target="#modal-PopupForm" data-actionlink="@actionLink" type="button" class="btn btn-icon btn-primary popupform-action" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                  title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                  <i class="@(actionIcon)"></i>
                              </a>
                          }
                          else if (actionType == "IMPORT_FILEEXCEL")
                          {
                              @* Button import file excel *@
                                <button id="importFileBtn" class="btn btn-icon btn-primary" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                      title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                  <i class="@(actionIcon)"></i>
                              </button>

                              @* Input file ẩn *@
                                <input type="file" id="importFileInput" data-sqlstore="@actionValue" accept=".xlsx" style="display: none;" />
                          }
                          else if (actionType == "DOWNLOADFILETEMPLATE")
                          {
                              // lấy thông tin file template để xuất
                              string fileTemplate = actionDict.ContainsKey("filetemplate") ? (actionDict["filetemplate"].ToString() ?? "") : "";
                              string url = "";
                              if (!string.IsNullOrWhiteSpace(fileTemplate))
                              {
                                  // kiếm tra đường dẫn chưa có dấu / thì thêm vào
                                  url = (fileTemplate.StartsWith("/") ? fileTemplate : ("/" + fileTemplate));
                              }
                              <a href="@url" type="button" class="btn btn-icon btn-primary" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                  title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                  <i class="@(actionIcon)"></i>
                              </a>
                          }
                          else
                          {
                              string url = ParseDataHelper.GetReplaceLinkWithResult(actionValue, null, listFilterValue);
                              <a href="@url" type="button" class="btn btn-icon btn-primary" data-bs-toggle="tooltip" data-bs-offset="0,4" data-bs-placement="top" data-bs-html="true"
                                  title="<i class='@(actionIcon)'></i> <span>@actionName</span>">
                                  <i class="@(actionIcon)"></i>
                              </a>
                          }
                      }
                    </div>
                    @* end action top *@
                     }
                    @* boc cac thanh phan cua table lai *@
                    <div id="@("table-viewer-" + (ReportCode ?? "emptycode") + "-wrap")">
                    @* action top *@
                    <div class="gx-3 gy-2 align-items-center report-top-action">
                    </div>
                    @* end action top *@
                    <div class="d-flex justify-content-between align-items-center">
                        @* hien thi so dong duoc hien thi *@
                        <div class="report-info d-flex gap-2"></div>
                    </div>
                    <div class="table-responsive" style="max-height: 600px">
                      <table id="@("table-viewer-" + (ReportCode ?? "emptycode"))" id="@("table-viewer-" + (ReportCode ?? "emptycode"))" data-table-displayname="@(report.ContainsKey("name") ? (report["name"].ToString() ?? "Danh sách") : "Danh sách")" border="1" cellpadding="5" cellspacing="0" style="width: 100%; text-align: center; table-layout: auto;" class="table table-sm table-bordered table-hover display table-with-exportexcel">
                        <thead class="freepanze-head">
                            <tr>
                              @* Cột này sẽ tự động chứa checkbox "Chọn tất cả" *@
                              <th class="text-center" rowspan="@displayParentLevelNum" data-code="IdCheck" data-index="-1"  data-isexport="False" style="min-width:50px"></th>
                              @* Cột chi tiết mặc định*@
                              <th class="text-center" rowspan="@displayParentLevelNum" data-code="IdDetail" data-index="0"  data-isexport="False" style="min-width:10px"></th>
                              @* neu display khong null thi tiep tuc *@
                              @if (displayList != null)
					          {
                                  @* voi moi cot dang co *@
                                  @* neu cot isdisplay = false thi không hien thi (chỉ lấy giá trị)  *@
                                  @foreach (var display in displayList.Where(p=> p.isdisplay == false).OrderBy(p => p.colnum ?? 0).ToList())
                                  {
                                    <th class="text-center d-none" rowspan="@displayParentLevelNum" data-code="@display.code" data-index="@(display.colnum ?? "0")" data-isexport="@(display.isexport ?? "True")">@Html.Raw(display.name)</th>
                                  }
                                  @* hien thi cot stt dau tien neu co *@
						          @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.code == "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode)).OrderBy(p => p.colnum ?? 0).ToList())
                                  {
                                    @* co dinh cot neu co cau hinh (chi ap dung cho cot 1 rowspan) *@
                                    <th class="text-center @(display.isfreepane == true ? "freepanze-col" : "")" rowspan="@displayParentLevelNum" data-code="@display.code" data-index="@(display.colnum ?? "0")"  data-isexport="@(display.isexport ?? "True")" style="min-width:@((display.width ?? "200") + "px");@(display.cssheader ?? "")">@Html.Raw(display.name)</th>
                                  }
                                  @* them mot cot xu ly *@
						            <th class="text-center" data-code="HandleColumn" data-index="2" rowspan="@displayParentLevelNum" data-isexport="False" style="width:50px" >Xử lý</th>
                                  @* neu cot khong co parent code cung khong phai is parent thi xu ly rieng *@
						          @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.code != "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode)).OrderBy(p => p.colnum ?? 0).ToList())
                                  {
                                    @* co dinh cot neu co cau hinh (chi ap dung cho cot 1 rowspan) *@
                                    <th class="text-center @(display.isfreepane == true ? "freepanze-col" : "")" rowspan="@displayParentLevelNum" data-code="@display.code" data-index="@(display.colnum ?? "0")"  data-isexport="@(display.isexport ?? "True")" style="min-width:@((display.width ?? "200") + "px");@(display.cssheader ?? "")">@Html.Raw(display.name)</th>
                                  }
                                  @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                  @if (displayList.Any(p => p.isparent == true))
                                  {
                                    @* hien thi cot cha *@
						            @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.isparent == true).OrderBy(p => p.colnum ?? 0).ToList())
                                    {
                                      @* dem so cot con de tinh colspan *@
                                      var countChild = displayList.Count(p => p.parentcode == display.code);
                                      @* neu co cot con thi xu ly tiep *@
                                      if (countChild > 0)
                                      {
                                        <th class="text-center" colspan="@countChild"  data-code="@display.code"  data-isexport="@(display.isexport ?? "True")" style="@(display.cssheader ?? "")">@Html.Raw(display.name)</th>
                                      }
                              
                                    }
                                  }
                              }
                            </tr>
                              @* neu co cap cha con thi tiep tuc *@
                            @if (displayParentLevelNum > 1)
                            {
                            <tr>
                              @* neu display khong null thi tiep tuc *@
                              @if (displayList != null)
					          {
                                  @* voi moi cot dang co *@
                                  @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                  @if (displayList.Any(p => p.isparent == true))
                                  {
                                    @* hien thi cot cha *@
						            @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.isparent == true).OrderBy(p => p.colnum ?? 0).ToList())
                                    {
                                      @* dem so cot con de tinh colspan *@
                                      var countChild = displayList.Count(p => p.parentcode == display.code);
                                      @* neu co cot con thi xu ly tiep *@
                                      @if (countChild > 0)
                                      {
                                        @foreach (var displaychild in displayList.Where(p=> p.isdisplay == true && p.parentcode == display.code).OrderBy(p => p.colnum ?? 0).ToList())
                                        {
                                            <th class="text-center" data-code="@display.code" data-index="@(displaychild.colnum ?? "0")" data-isexport="@(displaychild.isexport ?? "True")" style="min-width:@(displaychild.width ?? "200")px;@(displaychild.cssheader ?? "")">@Html.Raw(displaychild.name)</th>
                                        }
                                      }
                              
                                    }
                                  }
                              }
                            </tr>
                            }
                        </thead>
                          <tbody class="overflow-auto">
                              @if (resultList != null && displayList != null)
                              {
                                @* voi moi dong resultlist *@
                                @foreach (var result in resultList)
                                {
                                    var dictionary = (IDictionary<string, object>)result;
                                    var id = dictionary.ContainsKey("id") ? Convert.ToInt32(dictionary["id"]) : 0;
                                    @* lay gia tri to mau background row (bgcolorrowclass) *@
                                    var bgColorRowClass = dictionary.ContainsKey("bgcolorrowclass") ? Convert.ToString(dictionary["bgcolorrowclass"]) : "";

                                    <tr class="@bgColorRowClass">
                                    @* cột select box mặc đinh *@
                                    <td class="text-center" data-isexport="False" data-value="@id">
                                    </td>
                                    @* cột chi tiết mặc đinh *@
                                    <td class="text-center" data-isexport="False">
                                    @* voi moi cot dang co *@
                                    @* neu cot isdisplay = false thi khong hien thi  *@
                                    @foreach (var display in displayList.Where(p=> p.isdisplay == false).OrderBy(p => p.colnum ?? 0).ToList())
                                    {
                                        <td class="@FormatHelper.ParseTextAlignToClass(display.textalign) d-none" data-isexport="@(display.isexport ?? "True")">
                                            @{
                                                object value;
                                                if (dictionary.TryGetValue(display.code, out value))
                                                {
                                                    @Html.Raw(value)
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                }
                                            }
                                        </td>
                                    }
                                    @* hien thi cot stt dau tien neu co *@
					                @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.code == "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode)).OrderBy(p => p.colnum ?? 0).ToList())
                                    {
                                        @* neu isFreePane bang true thi them class freepanze-col *@
                                        <td class="text-center @(display.isfreepane == true ? "freepanze-col" : "")" data-isexport="@(display.isexport ?? "True")">
                                            @{
                                                object value;
                                                if (dictionary.TryGetValue(display.code, out value))
                                                {
                                                    @Html.Raw(value);
                                                }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                }
                                            }
                                        </td>
                                    }
                                    @* them cot xu ly *@
							          <td class="text-center" data-isexport="False"> 
                                      <div class="demo-inline-spacing">
                                        <div class="btn-group" id="dropdown-icon-demo">
                                          <button type="button" class="btn btn-primary btn-xs dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="ri-align-justify me-1"></i></button>
                                          <ul class="dropdown-menu overflow-auto" style="max-height:200px">
                                            @foreach(var action in actionlistdetailList_grid.OrderBy(p=> p.actionlistdetailorderid).ToList())
                                            {
                                              var actionDict = (IDictionary<string, object>)action;
                                              string actionName = actionDict.ContainsKey("actionname") ? (actionDict["actionname"].ToString() ?? "") : "";
                                              string actionCode = actionDict.ContainsKey("actioncode") ? (actionDict["actioncode"].ToString() ?? "") : "";
                                              bool actionIsTop = actionDict.ContainsKey("istop") ? Convert.ToBoolean(actionDict["istop"]) : false;
                                              string actionIcon = actionDict.ContainsKey("actionicon") ? (actionDict["actionicon"].ToString() ?? "") : "";
                                              string actionType = actionDict["type"].ToString() ?? "";
                                              string actionValue = actionDict["value"].ToString() ?? "";

                                              if (actionType == "LINK")
                                              {
                                                string url = ParseDataHelper.GetReplaceLinkWithResult(actionValue, dictionary, listFilterValue);
                                                <li>
                                                    <a href="@url" class="dropdown-item"><i class="@(actionIcon + " me-1 text-primary")"></i> @actionName</a>
                                                </li>
                                              }
                                              else if (actionType == "STORE")
                                              {
                                                string actionStore = actionValue;
                                                // cac thong tin xac nhan, neu co thi truyen vao action
                                                bool isPopupConfirm = Convert.ToBoolean(actionDict["ispopupconfirm"]);
                                                int? dataSourceID  = actionDict.TryGetValue("datasourceid", out var num) && num is int val ? Convert.ToInt32(num) : null;
                                                string confirmButtonText = !string.IsNullOrWhiteSpace(actionDict["confirmbuttontext"].ToString()) ? actionDict["confirmbuttontext"].ToString() : null;
                                                string confirmTitle = !string.IsNullOrWhiteSpace(actionDict["confirmtitle"].ToString()) ? actionDict["confirmtitle"].ToString() : null;
                                                string confirmText = !string.IsNullOrWhiteSpace(actionDict["confirmtext"].ToString()) ? actionDict["confirmtext"].ToString() : null;
                                                <li>
                                                  @if (isPopupConfirm){
                                                    <a href="" data-id="@id" data-isconfirm="@isPopupConfirm" data-confirmtext="@confirmText" data-confirmtitle ="@confirmTitle" data-confirmbutton ="@confirmButtonText" data-sqlstore="@actionStore" data-datasourceid="@dataSourceID" class="dropdown-item confirmActionTop"><i class="@(actionIcon + " me-1 text-primary")"></i> @actionName</a>
                                                  }
                                                  else{
                                                    <a href="" data-id="@id" data-sqlstore="@actionStore" data-datasourceid="@dataSourceID" class="dropdown-item confirmActionTop"><i class="@(actionIcon + " me-1 text-primary")"></i> @actionName</a>
                                                  }
                                                </li>
                                              }
                                              else if (actionType == "POPUPFORM")
                                              {
                                                var popupDictValue = ParseDataHelper.GetReplacePopupLinkWithResult(actionValue, dictionary, listFilterValue);
                                                string actionFormCode = popupDictValue.ContainsKey("FORMCODE") ? popupDictValue["FORMCODE"].ToString() ?? "" : "";
                                                string actionLink = popupDictValue.ContainsKey("LINK") ? popupDictValue["LINK"].ToString() ?? "" : "";
                                                <li>
                                                  <a href="" data-bs-toggle="modal" data-bs-target="#modal-PopupForm" data-actionlink = "@actionLink" class="dropdown-item popupform-action"><i class="@(actionIcon + " me-1 text-primary")"></i> @actionName</a>
                                                </li>
                                              }
                                              else
                                              {
                                                string url = ParseDataHelper.GetReplaceLinkWithResult(actionValue, dictionary, listFilterValue);
                                                <li>
                                                    <a href="@url" class="dropdown-item"><i class="@(actionIcon + " me-1 text-primary")"></i> @actionName</a>
                                                </li>
                                              }
                                            }
                                          </ul>
                                        </div>
                                      </div>
							        </td>
                                    @* neu cot khong co parent code cung khong phai is parent thi xu ly rieng *@
					                @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.code != "stt" && p.isparent == false && string.IsNullOrEmpty(p.parentcode)).OrderBy(p => p.colnum ?? 0).ToList())
                                    {
                                        var displayType = display.type as string ?? "link";
                                        var displayFormat = display.format as string ?? "";
                                        @* neu isFreePane bang true thi them class freepanze-col *@
                                        <td class="@FormatHelper.ParseTextAlignToClass(display.textalign) @(display.isfreepane == true ? "freepanze-col" : "")" data-isexport="@(display.isexport ?? "True")" data-displaytype="@displayType" data-displayformat="@displayFormat">
                                            @{
                                                object value;
                                                if (dictionary.TryGetValue(display.code, out value))
                                                {
                                                    string valueType = "";
                                                    // kiem tra kieu du lieu cua value
                                                    if (@value != null)
                                                    {
                                                        valueType = value.GetType().ToString();
                                                    }
                                                    // kiem tra kieu du lieu cua display
                                                    string[] stringVavlidType = ["string", "date", "datetime", "int", "long", "float", "textarea"];
                                                    // uu tien kiem tra kieu du lieu cua value roi den display
                                                    // neu kieu du lieu cua value la boolean thi su dung check box
                                                    @if (valueType == "System.Boolean")
                                                    {
									                    <input type="checkbox" @(Convert.ToBoolean(value) ? "checked" : "") disabled />
                                                
                                                    }
                                                    else if (displayType == "icons")
                                                    {
                                                        var iconsJson = value?.ToString()?.Trim() ?? "";

                                                        // Nếu rỗng thì bỏ qua
                                                        if (!string.IsNullOrEmpty(iconsJson))
                                                        {
                                                          // Đảm bảo chuỗi JSON luôn là mảng
                                                          if (iconsJson.TrimStart().StartsWith("{"))
                                                          {
                                                              iconsJson = "[" + iconsJson + "]";
                                                          }

                                                          try
                                                          {
                                                              var icons = JsonSerializer.Deserialize<List<JsonElement>>(iconsJson);

                                                              <ul class="list-unstyled m-0 avatar-group d-flex align-items-center">
                                                              @foreach (var icon in icons)
                                                              {
                                                                  var title = icon.GetProperty("title").GetString();
                                                                  var image = icon.GetProperty("image").GetString();
                                                                  <li data-bs-toggle="tooltip"
                                                                      data-popup="tooltip-custom"
                                                                      data-bs-placement="top"
                                                                      class="avatar avatar-xs pull-up"
                                                                      aria-label="@title"
                                                                      data-bs-original-title="@title">
                                                                      <img src="@image" alt="Avatar" class="rounded-circle" />
                                                                  </li>
                                                              }
                                                              </ul>
                                                          }
                                                          catch (SqlException ex)
                                                          {
                                                              <span class="text-danger">N/A</span>
                                                          }
                                                        }
                                                    }
                                                    // neu dang file thi hien thi icon tải nhiều file
                                                    else if (displayType == "file")
                                                    {
                                                        var filesJson = value?.ToString()?.Trim() ?? "";

                                                        // Nếu rỗng thì bỏ qua
                                                        if (!string.IsNullOrEmpty(filesJson))
                                                        {
                                                            // Nếu là object đơn, bao lại thành mảng
                                                            if (filesJson.StartsWith("{"))
                                                            {
                                                                filesJson = "[" + filesJson + "]";
                                                            }

                                                            try
                                                            {
                                                                var fileList = JsonSerializer.Deserialize<List<JsonElement>>(filesJson);

                                                                if (fileList?.Count > 0)
                                                                {
                                                                    <div class="d-flex flex-wrap gap-1">
                                                                        @foreach (var file in fileList)
                                                                        {
                                                                            var fileName = file.GetProperty("fileName").GetString();
                                                                            var url = file.GetProperty("url").GetString();
                                                                            var displayName = fileName?.Length > 50 ? fileName.Substring(0, 50) + "..." : fileName;

                                                                            <a href="@url" download class="btn btn-sm btn-outline-primary file-download-link" title="@fileName">
                                                                                <i class="ri-download-2-fill"></i> @displayName
                                                                            </a>
                                                                        }
                                                                    </div>
                                                                }
                                                            }
                                                            catch
                                                            {
                                                                <span class="text-danger">Lỗi định dạng file JSON</span>
                                                            }
                                                        }
                                                    }
                                                    // neu la kieu link thi parse thanh html
                                                    else if (displayType == "link")
                                                    {
                                                        @Html.Raw(value);
                                                    }
                                                    // neu la kieu du lieu co the format duoc
                                                    else if (stringVavlidType.Contains(displayType))
                                                    {
                                                        @* kiem tra neu co format thi format lai chuoi *@
                                                        var displayValue = @FormatHelper.FormatDynamicValue(value, displayFormat);
                                                        <span style="white-space: pre-wrap">@displayValue</span>
                                                
                                                    }
                                                    else if (displayType == "combobox")
                                                    {
                                                        // check selected cho item dung voi gia tri
                                                        var selectList = editorDynamicServiceSelectOptions[display.code] as List<SelectListItem> ?? new List<SelectListItem>();
                                                        // lay du lieu text từ service thông qua value
                                                        string displayValue = selectList.Where(p => p.Value.ToString() == value.ToString()).Select(p => p.Text).First().ToString() ?? "";
                                                        <span style="white-space: pre-wrap">@displayValue</span>
                                                    }
                                                    else
                                                    {
                                                        @Html.Raw(value);
                                                    }                                              }
                                                else
                                                {
                                                    <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                }
                                            }
                                        </td>
                                    }
                                    @* neu ton tai cot co isparent thi xu ly tiep cot 2 cap *@
                                    @if (displayList.Any(p => p.isparent == true))
                                    {
                                      @* hien thi cot cha *@
						                          @foreach (var display in displayList.Where(p=> p.isdisplay == true && p.isparent == true).OrderBy(p => p.colnum ?? 0).ToList())
                                      {
                                        @* dem so cot con de tinh colspan *@
                                        var countChild = displayList.Count(p => p.parentcode == display.code);
                                        @* neu co cot con thi xu ly tiep *@
                                        if (countChild > 0)
                                        {
                                          @foreach (var displaychild in displayList.Where(p=> p.isdisplay == true && p.parentcode == display.code).OrderBy(p => p.colnum ?? 0).ToList())
                                          {
                                              var displayType = displaychild.type as string ?? "link";
                                              var displayFormat = displaychild.format as string ?? "";
                                              <td class="@FormatHelper.ParseTextAlignToClass(displaychild.textalign)" data-isexport="@(displaychild.isexport ?? "0")" data-displaytype="@displayType" data-displayformat="@displayFormat">
                                                  @{
                                                      object value;
                                                      if (dictionary.TryGetValue(displaychild.code, out value))
                                                      {
                                                          string valueType = "";
                                                          // kiem tra kieu du lieu cua value
                                                          if (@value != null)
                                                          {
                                                              valueType = value.GetType().ToString();
                                                          }
                                                          // kiem tra kieu du lieu cua display
                                                          string[] stringVavlidType = ["string", "date", "datetime", "int", "long", "float", "textarea"];
                                                          // uu tien kiem tra kieu du lieu cua value roi den display
                                                          // neu kieu du lieu cua value la boolean thi su dung check box
                                                          @if (valueType == "System.Boolean")
                                                          {
									                          <input type="checkbox" @(Convert.ToBoolean(value) ? "checked" : "") disabled />
                                                
                                                          }
                                                          else if (displayType == "icons")
                                                          {
                                                              var iconsJson = value?.ToString()?.Trim() ?? "";

                                                              // Nếu rỗng thì bỏ qua
                                                              if (!string.IsNullOrEmpty(iconsJson))
                                                              {
                                                                // Đảm bảo chuỗi JSON luôn là mảng
                                                                if (iconsJson.TrimStart().StartsWith("{"))
                                                                {
                                                                    iconsJson = "[" + iconsJson + "]";
                                                                }

                                                                try
                                                                {
                                                                    var icons = JsonSerializer.Deserialize<List<JsonElement>>(iconsJson);

                                                                    <ul class="list-unstyled m-0 avatar-group d-flex align-items-center">
                                                                    @foreach (var icon in icons)
                                                                    {
                                                                        var title = icon.GetProperty("title").GetString();
                                                                        var image = icon.GetProperty("image").GetString();
                                                                        <li data-bs-toggle="tooltip"
                                                                            data-popup="tooltip-custom"
                                                                            data-bs-placement="top"
                                                                            class="avatar avatar-xs pull-up"
                                                                            aria-label="@title"
                                                                            data-bs-original-title="@title">
                                                                            <img src="@image" alt="Avatar" class="rounded-circle" />
                                                                        </li>
                                                                    }
                                                                    </ul>
                                                                }
                                                                catch (SqlException ex)
                                                                {
                                                                    <span class="text-danger">N/A</span>
                                                                }
                                                              }
                                                          }
                                                          // neu dang file thi hien thi icon tải nhiều file
                                                          else if (displayType == "file")
                                                          {
                                                              var filesJson = value?.ToString()?.Trim() ?? "";

                                                              // Nếu rỗng thì bỏ qua
                                                              if (!string.IsNullOrEmpty(filesJson))
                                                              {
                                                                  // Nếu là object đơn, bao lại thành mảng
                                                                  if (filesJson.StartsWith("{"))
                                                                  {
                                                                      filesJson = "[" + filesJson + "]";
                                                                  }

                                                                  try
                                                                  {
                                                                      var fileList = JsonSerializer.Deserialize<List<JsonElement>>(filesJson);

                                                                      if (fileList?.Count > 0)
                                                                      {
                                                                          <div class="d-flex flex-wrap gap-1">
                                                                              @foreach (var file in fileList)
                                                                              {
                                                                                  var fileName = file.GetProperty("fileName").GetString();
                                                                                  var url = file.GetProperty("url").GetString();
                                                                                  var displayName = fileName?.Length > 50 ? fileName.Substring(0, 50) + "..." : fileName;

                                                                                  <a href="@url" download class="btn btn-sm btn-outline-primary file-download-link" title="@fileName">
                                                                                      <i class="ri-download-2-fill"></i> @displayName
                                                                                  </a>
                                                                              }
                                                                          </div>
                                                                      }
                                                                  }
                                                                  catch
                                                                  {
                                                                      <span class="text-danger">Lỗi định dạng file JSON</span>
                                                                  }
                                                              }
                                                          }
                                                          // neu la kieu link thi parse thanh html
                                                          else if (displayType == "link")
                                                          {
                                                              @Html.Raw(value);
                                                          }
                                                          // neu la kieu du lieu co the format duoc
                                                          else if (stringVavlidType.Contains(displayType))
                                                          {
                                                              @* kiem tra neu co format thi format lai chuoi *@
                                                              var displayValue = @FormatHelper.FormatDynamicValue(value, displayFormat);
                                                              <span style="white-space: pre-wrap">@displayValue</span>
                                                
                                                          }
                                                          else if (displayType == "combobox")
                                                          {
                                                              // check selected cho item dung voi gia tri
                                                              var selectList = editorDynamicServiceSelectOptions[displaychild.code] as List<SelectListItem> ?? new List<SelectListItem>();
                                                              // lay du lieu text từ service thông qua value
                                                              string displayValue = selectList.Where(p => p.Value.ToString() == value.ToString()).Select(p => p.Text).First().ToString() ?? "";
                                                              <span style="white-space: pre-wrap">@displayValue</span>
                                                          }
                                                          else
                                                          {
                                                              @Html.Raw(value);
                                                          }
                                                      }
                                                      else
                                                      {
                                                          <span class="text-muted">N/A</span> @* Giá trị mặc định *@
                                                      }
                                                  }
                                              </td>
                                          }
                                        }
                              
                                      }
                                    }
                                  </tr>

                                  reportRowIndex ++;
                                }
                              }
                          </tbody>
                    </table>
		          </div>
                  <!--/ Pagination Start -->
                  <div class="col-12 report-pagination d-flex justify-content-end mt-3">
                  </div>
                  <!--/ Pagination End -->
                </div>
            </div>
            }
          </div>
          @* end table *@
        </div>

<script>
         // xu ly nút xuat export, phan trang doi voi table cau hinh class table-with-exportexcel
        $(document).ready(function () {
            // voi moi class table with export excel se lay id va xu ly
            $('.table-with-exportexcel').each(function (index, tableElement) {
                var $table = $(tableElement);
                // Chỉ xử lý nếu table chưa init DataTable
                if ($.fn.DataTable.isDataTable(tableElement)) {
                    return; // bỏ qua nếu đã có DataTable
                }

                // Lấy pageTitle từ data-table-displayname
                var pageTitle = $table.attr('data-table-displayname')?.trim() || "Danh sách";

                // Xoá các ký tự đặc biệt không hợp lệ trong tên file (ví dụ: !, 🎉, ...)
                var sanitizedFilename = pageTitle.replace(/[^a-zA-Z0-9\u00C0-\u1EF9\s]/g, '').replace(/\s+/g, '_');

                // Xác định selector: nếu có id thì dùng id, không thì dùng class chung
                var selector = $table.attr('id') ? `#${$table.attr('id')}` : '.table-with-exportexcel';

                // Gọi hàm initExcelExportForTable để tìm table có class hoặc id liên quan để xử lý
                initExcelExportForTable(selector, {
                    // Thêm timestamp vào filename
                    filename: `${sanitizedFilename}_${getFormattedDateTime()}`,
                    title: pageTitle,
                    autoFilter: false,
                    sheetName: "Danh sách"
                });
            });
        });

          // tim kiem trong select box
        $(document).ready(function () {
            function initSelect2() {
            // Khởi tạo Select2 cho các select đã có sẵn
            initSelect2();

        });
            // xử lý bộ lọc
            $("#reportfilter").on("submit", function (e) {
              debugger;
              e.preventDefault();
              let form = $(this);
              // lấy dữ liệu lọc
              let formDataArray = form.serializeArray();
              let formDataObject = {};
              formDataArray.forEach(function(item) {
                  formDataObject[item.name] = item.value;
              });

                  let actionUrl = form.attr("action");
              let urlParams = new URLSearchParams(actionUrl.split('?')[1]);
              let reportCode = urlParams.get("ReportCode");  // Kết quả: "RPT001"
              let containerId = urlParams.get("containerId");
              
              // Xóa cache tab này
              delete tabContentCache[containerId];

              // gọi lại function xử lý hiển thị
              // Gọi AJAX và lưu cache
              loadFormReportViewer(reportCode, containerId, formDataObject, true, function (html) {
                  tabContentCache[containerId] = {
                          html,
                          lastCode: reportCode,
                          lastTemplate: "viewer-utility"
                      };
                  });

          });

          @* xử lý hiển thị form popup  *@
        $(document).on('click', '.popupform-action', function (e) {
            debugger;
            const $btn = $(this);
            const actionlink = $btn.data('actionlink') ?? null;
            const id = $btn.data('id') ?? "";
            const formCode = $btn.data('formcode') ?? "";
            const isReadOnly = $btn.data('isreadonly') ?? false;
            const queryParams = new URLSearchParams(window.location.search); // lấy full query string
            // truyền các tham số cần thiết
            queryParams.set('isPage', 'false');// kiểm tra đây có phải là 1 page không hay chỉ là 1 mẫu
            queryParams.set('isStepper', 'false');// kiểm tra form này có phải dạng stepper (form wizard) không
            // mặc định container id cho popup form
            queryParams.set('containerId', 'modal-PopupForm');

            // Nếu cần chuyển thành chuỗi query lại:
            const newQueryString = queryParams.toString();

            // có 2 cách lấy, 1 là lấy từ link, 2  là lấy từ form code và id
            let url = ""
            if (actionlink != null){
              url = actionlink;
              if (newQueryString !== "") {
                  url += (actionlink.includes('?') ? '&' : '?') + newQueryString;
              }
            }
            else{
              url = `/form/popup-viewer/${formCode}/${id}?${newQueryString}&isReadOnly=${isReadOnly}`;
            }

            $.ajax({
                url: url,
                type: 'GET',
                data: null,
                success: function (response) {
                    // Nếu trả về thành công và có HTML, chèn vào container
                    if (response.success === false) {
                        // Nếu không thành công, hiển thị thông báo lỗi
                        rplm({
                               title: "Lỗi khi hiển thị popup!",
                               text: response.errorMessage || "Có vấn đề xảy ra.",
                               type: "error",
                               timer: 2000,
                               confirmButtonText: 'Xác nhận',
                               html: true
                           });
                    } else {
                        // Nếu không có lỗi, chèn HTML vào container
                        let html = response;
                        $('#modal-PopupForm').html(html);
                    }
                },
                error: function (xhr, status, error) {
                    rplm({
                            title: "Lỗi khi hiển thị popup!",
                            text: error || "Có vấn đề xảy ra.",
                            type: "error",
                            timer: 2000,
                            confirmButtonText: 'Xác nhận',
                            html: true
                        });
                }
            });
        });
</script>
