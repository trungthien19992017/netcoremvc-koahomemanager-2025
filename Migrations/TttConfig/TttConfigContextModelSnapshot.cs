// <auto-generated />
using System;
using KOAHome.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KOAHome.Migrations.TttConfig
{
    [DbContext(typeof(TttConfigContext))]
    partial class TttConfigContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KOAHome.EntityFramework.NetAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Confirmbuttontext")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("confirmbuttontext");

                    b.Property<string>("Confirmtext")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("confirmtext");

                    b.Property<string>("Confirmtitle")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("confirmtitle");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<bool?>("Ispopupconfirm")
                        .HasColumnType("boolean")
                        .HasColumnName("ispopupconfirm");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.HasKey("Id")
                        .HasName("pk_net_action");

                    b.ToTable("net_action", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetActionlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Actionlisttypecode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("actionlisttypecode");

                    b.Property<int?>("Actionlisttypeid")
                        .HasColumnType("integer")
                        .HasColumnName("actionlisttypeid");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<int?>("Creatoruserid")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Deleteuserid")
                        .HasColumnType("integer")
                        .HasColumnName("deleteuserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<int?>("Lastmodifieruserid")
                        .HasColumnType("integer")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Objectcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("objectcode");

                    b.Property<int?>("Objectid")
                        .HasColumnType("integer")
                        .HasColumnName("objectid");

                    b.Property<int?>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.HasKey("Id")
                        .HasName("pk_net_actionlist");

                    b.ToTable("net_actionlist", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetActionlistdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Actionid")
                        .HasColumnType("integer")
                        .HasColumnName("actionid");

                    b.Property<string>("Actionlistcode")
                        .HasColumnType("text")
                        .HasColumnName("actionlistcode");

                    b.Property<int?>("Actionlistid")
                        .HasColumnType("integer")
                        .HasColumnName("actionlistid");

                    b.Property<string>("Checksamepopupbutton")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("checksamepopupbutton");

                    b.Property<string>("Checksamepopuptext")
                        .HasColumnType("text")
                        .HasColumnName("checksamepopuptext");

                    b.Property<string>("Codesendrealtime")
                        .HasColumnType("text")
                        .HasColumnName("codesendrealtime");

                    b.Property<string>("Confirmbuttontext")
                        .HasColumnType("text")
                        .HasColumnName("confirmbuttontext");

                    b.Property<string>("Confirmtext")
                        .HasColumnType("text")
                        .HasColumnName("confirmtext");

                    b.Property<string>("Confirmtitle")
                        .HasColumnType("text")
                        .HasColumnName("confirmtitle");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<int?>("Creatoruserid")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Cssbutton")
                        .HasColumnType("text")
                        .HasColumnName("cssbutton");

                    b.Property<int?>("Datasourceid")
                        .HasColumnType("integer")
                        .HasColumnName("datasourceid");

                    b.Property<int?>("Deleteuserid")
                        .HasColumnType("integer")
                        .HasColumnName("deleteuserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Displayname")
                        .HasColumnType("text")
                        .HasColumnName("displayname");

                    b.Property<string>("Errorcol")
                        .HasColumnType("text")
                        .HasColumnName("errorcol");

                    b.Property<string>("Filetemplate")
                        .HasColumnType("text")
                        .HasColumnName("filetemplate");

                    b.Property<string>("Filetypeaccept")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("filetypeaccept");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("icon");

                    b.Property<string>("Idgroup")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("idgroup");

                    b.Property<int?>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool?>("Ischecksamepopup")
                        .HasColumnType("boolean")
                        .HasColumnName("ischecksamepopup");

                    b.Property<bool?>("Ischoosedata")
                        .HasColumnType("boolean")
                        .HasColumnName("ischoosedata");

                    b.Property<bool?>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isgroup")
                        .HasColumnType("boolean")
                        .HasColumnName("isgroup");

                    b.Property<bool?>("IsnetActionhowerror")
                        .HasColumnType("boolean")
                        .HasColumnName("isnet_actionhowerror");

                    b.Property<bool?>("Ispopupconfirm")
                        .HasColumnType("boolean")
                        .HasColumnName("ispopupconfirm");

                    b.Property<bool?>("Issendrealtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("issendrealtime");

                    b.Property<bool?>("Istop")
                        .HasColumnType("boolean")
                        .HasColumnName("istop");

                    b.Property<bool?>("Iszoompopup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("iszoompopup");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<int?>("Lastmodifieruserid")
                        .HasColumnType("integer")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<int?>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<string>("Roleid")
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.Property<int?>("Servicefilename")
                        .HasColumnType("integer")
                        .HasColumnName("servicefilename");

                    b.Property<string>("Sitecode")
                        .HasColumnType("text")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Typenodediagram")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("typenodediagram");

                    b.Property<string>("Urlimportfile")
                        .HasColumnType("text")
                        .HasColumnName("urlimportfile");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_net_actionlistdetail");

                    b.ToTable("net_actionlistdetail", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetActiontype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.HasKey("Id")
                        .HasName("pk_net_actiontype");

                    b.ToTable("net_actiontype", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("Authorid")
                        .HasColumnType("bigint")
                        .HasColumnName("authorid");

                    b.Property<string>("Contenttype")
                        .HasColumnType("text")
                        .HasColumnName("contenttype");

                    b.Property<string>("Convertdiskdirectory")
                        .HasColumnType("text")
                        .HasColumnName("convertdiskdirectory");

                    b.Property<string>("Convertfilename")
                        .HasColumnType("text")
                        .HasColumnName("convertfilename");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Diskdirectory")
                        .HasColumnType("text")
                        .HasColumnName("diskdirectory");

                    b.Property<string>("Diskfilename")
                        .HasColumnType("text")
                        .HasColumnName("diskfilename");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<int?>("Filesize")
                        .HasColumnType("integer")
                        .HasColumnName("filesize");

                    b.Property<bool?>("Iscurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("iscurrent");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<long?>("Objectid")
                        .HasColumnType("bigint")
                        .HasColumnName("objectid");

                    b.Property<long?>("Objecttypeid")
                        .HasColumnType("bigint")
                        .HasColumnName("objecttypeid");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("Tenantid")
                        .HasColumnType("integer")
                        .HasColumnName("tenantid");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_net_attachment");

                    b.HasIndex(new[] { "Objecttypeid", "Objectid", "Isdeleted" }, "idx_ix_net_attachment_objecttypeid_objectid_isdeleted");

                    b.ToTable("net_attachment", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetAttachmentsyntax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<int?>("Deleteuserid")
                        .HasColumnType("integer")
                        .HasColumnName("deleteuserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Ischangesyntaxname")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ischangesyntaxname");

                    b.Property<bool?>("Isdefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdefault");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<string>("Syntaxname")
                        .HasColumnType("text")
                        .HasColumnName("syntaxname");

                    b.Property<string>("Syntaxpath")
                        .HasColumnType("text")
                        .HasColumnName("syntaxpath");

                    b.Property<int?>("Tenantid")
                        .HasColumnType("integer")
                        .HasColumnName("tenantid");

                    b.HasKey("Id")
                        .HasName("pk_net_attachmentsyntax");

                    b.ToTable("net_attachmentsyntax", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Autoreload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("autoreload");

                    b.Property<string>("Codereceiverealtime")
                        .HasColumnType("text")
                        .HasColumnName("codereceiverealtime");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Dashboardcode")
                        .HasColumnType("text")
                        .HasColumnName("dashboardcode");

                    b.Property<int?>("Datasourceid")
                        .HasColumnType("integer")
                        .HasColumnName("datasourceid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<bool?>("Showcalendarfilter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("showcalendarfilter");

                    b.Property<string>("Storedefault")
                        .HasColumnType("text")
                        .HasColumnName("storedefault");

                    b.Property<string>("Textcalendarcolor")
                        .HasColumnType("text")
                        .HasColumnName("textcalendarcolor");

                    b.HasKey("Id")
                        .HasName("pk_hin_dashboards");

                    b.ToTable("net_dashboard", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetDashboardpage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Dashboardid")
                        .HasColumnType("integer")
                        .HasColumnName("dashboardid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<string>("Pagecode")
                        .HasColumnType("text")
                        .HasColumnName("pagecode");

                    b.HasKey("Id")
                        .HasName("pk_net_dashboardpage");

                    b.ToTable("net_dashboardpage", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetDatasource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Sqltype")
                        .HasColumnType("text")
                        .HasColumnName("sqltype");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_net_datasource");

                    b.ToTable("net_datasource", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetDatasourcedetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("Configid")
                        .HasColumnType("bigint")
                        .HasColumnName("configid");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Dbname")
                        .HasColumnType("text")
                        .HasColumnName("dbname");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Host")
                        .HasColumnType("text")
                        .HasColumnName("host");

                    b.Property<bool?>("Isdefault")
                        .HasColumnType("boolean")
                        .HasColumnName("isdefault");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<int?>("Timeout")
                        .HasColumnType("integer")
                        .HasColumnName("timeout");

                    b.Property<string>("User")
                        .HasColumnType("text")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("pk_net_datasourcedetail");

                    b.ToTable("net_datasourcedetail", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetDisplay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Allowmergecells")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allowmergecells");

                    b.Property<string>("Area")
                        .HasColumnType("text")
                        .HasColumnName("area");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("Colnum")
                        .HasColumnType("integer")
                        .HasColumnName("colnum");

                    b.Property<string>("Columnsetdata")
                        .HasColumnType("text")
                        .HasColumnName("columnsetdata");

                    b.Property<string>("Configheader")
                        .HasColumnType("text")
                        .HasColumnName("configheader");

                    b.Property<string>("Configpopup")
                        .HasColumnType("text")
                        .HasColumnName("configpopup");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Cssheader")
                        .HasColumnType("text")
                        .HasColumnName("cssheader");

                    b.Property<string>("Customsummary")
                        .HasColumnType("text")
                        .HasColumnName("customsummary");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Editcelltemplate")
                        .HasColumnType("text")
                        .HasColumnName("editcelltemplate");

                    b.Property<string>("Editcolumns")
                        .HasColumnType("text")
                        .HasColumnName("editcolumns");

                    b.Property<string>("Format")
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<string>("Formulasyntax")
                        .HasColumnType("text")
                        .HasColumnName("formulasyntax");

                    b.Property<string>("Freepaneposition")
                        .HasColumnType("text")
                        .HasColumnName("freepaneposition");

                    b.Property<int?>("Grouplevel")
                        .HasColumnType("integer")
                        .HasColumnName("grouplevel");

                    b.Property<string>("Groupsort")
                        .HasColumnType("text")
                        .HasColumnName("groupsort");

                    b.Property<bool?>("Isavg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isavg");

                    b.Property<bool?>("Iscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("iscount");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isdisplay")
                        .HasColumnType("boolean")
                        .HasColumnName("isdisplay");

                    b.Property<bool?>("Isexpand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isexpand");

                    b.Property<bool?>("Isexport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isexport");

                    b.Property<bool?>("Isfreepane")
                        .HasColumnType("boolean")
                        .HasColumnName("isfreepane");

                    b.Property<bool?>("Ismax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ismax");

                    b.Property<bool?>("Ismin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("ismin");

                    b.Property<bool?>("Isparent")
                        .HasColumnType("boolean")
                        .HasColumnName("isparent");

                    b.Property<bool?>("Isreadonly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isreadonly");

                    b.Property<bool?>("Issort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("issort");

                    b.Property<bool?>("Issum")
                        .HasColumnType("boolean")
                        .HasColumnName("issum");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Parentcode")
                        .HasColumnType("text")
                        .HasColumnName("parentcode");

                    b.Property<string>("Pivotfield")
                        .HasColumnType("text")
                        .HasColumnName("pivotfield");

                    b.Property<string>("Pivotorders")
                        .HasColumnType("text")
                        .HasColumnName("pivotorders");

                    b.Property<string>("Reportcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("reportcode");

                    b.Property<long?>("Reportid")
                        .HasColumnType("bigint")
                        .HasColumnName("reportid");

                    b.Property<int?>("Serviceid")
                        .HasColumnType("integer")
                        .HasColumnName("serviceid");

                    b.Property<bool?>("Showingroupfooter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("showingroupfooter");

                    b.Property<string>("Sortbycolumn")
                        .HasColumnType("text")
                        .HasColumnName("sortbycolumn");

                    b.Property<string>("Summarydisplaymode")
                        .HasColumnType("text")
                        .HasColumnName("summarydisplaymode");

                    b.Property<string>("Textalign")
                        .HasColumnType("text")
                        .HasColumnName("textalign");

                    b.Property<string>("Textissum")
                        .HasColumnType("text")
                        .HasColumnName("textissum");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Validationrule")
                        .HasColumnType("text")
                        .HasColumnName("validationrule");

                    b.Property<bool?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("visible");

                    b.Property<string>("Width")
                        .HasColumnType("text")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_net_display");

                    b.HasIndex(new[] { "Reportid" }, "idx_ix_missingindex_61_60");

                    b.HasIndex(new[] { "Isdeleted", "Reportid" }, "idx_ix_missingindex_64_63");

                    b.ToTable("net_display", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetDynamicfield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_net_dynamicfield");

                    b.ToTable("net_dynamicfield", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("Colcount")
                        .HasColumnType("integer")
                        .HasColumnName("colcount");

                    b.Property<int?>("Colspan")
                        .HasColumnType("integer")
                        .HasColumnName("colspan");

                    b.Property<string>("Columns")
                        .HasColumnType("text")
                        .HasColumnName("columns");

                    b.Property<int?>("Combolevel")
                        .HasColumnType("integer")
                        .HasColumnName("combolevel");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<bool?>("Datatype")
                        .HasColumnType("boolean")
                        .HasColumnName("datatype");

                    b.Property<string>("Datedisplayformat")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("datedisplayformat");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Disable")
                        .HasColumnType("boolean")
                        .HasColumnName("disable");

                    b.Property<long?>("Dynamicfieldid")
                        .HasColumnType("bigint")
                        .HasColumnName("dynamicfieldid");

                    b.Property<string>("Format")
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<string>("Groupfield")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("groupfield");

                    b.Property<int?>("Groupid")
                        .HasColumnType("integer")
                        .HasColumnName("groupid");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isfiltertoolbar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isfiltertoolbar");

                    b.Property<bool?>("Isgrouped")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isgrouped");

                    b.Property<bool?>("Isloadmultipleway")
                        .HasColumnType("boolean")
                        .HasColumnName("isloadmultipleway");

                    b.Property<bool?>("Isvalue")
                        .HasColumnType("boolean")
                        .HasColumnName("isvalue");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<long?>("Lookupid")
                        .HasColumnType("bigint")
                        .HasColumnName("lookupid");

                    b.Property<string>("Multicontrolid")
                        .HasColumnType("text")
                        .HasColumnName("multicontrolid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Orderid")
                        .HasColumnType("integer")
                        .HasColumnName("orderid");

                    b.Property<int?>("Parentcomboid")
                        .HasColumnType("integer")
                        .HasColumnName("parentcomboid");

                    b.Property<string>("Reportcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("reportcode");

                    b.Property<long?>("Reportid")
                        .HasColumnType("bigint")
                        .HasColumnName("reportid");

                    b.Property<bool?>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<long?>("Seviceid")
                        .HasColumnType("bigint")
                        .HasColumnName("seviceid");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<string>("Width")
                        .HasColumnType("text")
                        .HasColumnName("width");

                    b.Property<string>("Zoomlevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("zoomlevel");

                    b.HasKey("Id")
                        .HasName("pk_net_filter");

                    b.HasIndex(new[] { "Isdeleted", "Reportid", "Isactive" }, "idx_ix_missingindex_12_11");

                    b.HasIndex(new[] { "Isdeleted", "Reportid", "Dynamicfieldid", "Isactive" }, "idx_ix_missingindex_536_535");

                    b.HasIndex(new[] { "Reportid", "Dynamicfieldid" }, "idx_ix_missingindex_568_567");

                    b.HasIndex(new[] { "Isdeleted", "Reportid" }, "idx_ix_missingindex_6_5");

                    b.HasIndex(new[] { "Isdeleted", "Reportid" }, "idx_ix_missingindex_8_7");

                    b.ToTable("net_filter", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Codereceiverealtime")
                        .HasColumnType("text")
                        .HasColumnName("codereceiverealtime");

                    b.Property<string>("Codesendrealtime")
                        .HasColumnType("text")
                        .HasColumnName("codesendrealtime");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Cssoptionheader")
                        .HasColumnType("text")
                        .HasColumnName("cssoptionheader");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isreceiverealtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isreceiverealtime");

                    b.Property<bool?>("Issendrealtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("issendrealtime");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<int?>("Latestversion")
                        .HasColumnType("integer")
                        .HasColumnName("latestversion");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderid");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_net_form");

                    b.ToTable("net_form", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetFormVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apicontent")
                        .HasColumnType("text")
                        .HasColumnName("apicontent");

                    b.Property<string>("Conditionofaction")
                        .HasColumnType("text")
                        .HasColumnName("conditionofaction");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Datasourceid")
                        .HasColumnType("integer")
                        .HasColumnName("datasourceid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Exportmergefield")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("exportmergefield");

                    b.Property<long?>("Hinformbookvalueid")
                        .HasColumnType("bigint")
                        .HasColumnName("hinformbookvalueid");

                    b.Property<string>("Hinformcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("hinformcode");

                    b.Property<long?>("Hinformid")
                        .HasColumnType("bigint")
                        .HasColumnName("hinformid");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isback")
                        .HasColumnType("boolean")
                        .HasColumnName("isback");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isview")
                        .HasColumnType("boolean")
                        .HasColumnName("isview");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Objectcode")
                        .HasColumnType("text")
                        .HasColumnName("objectcode");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderid");

                    b.Property<int?>("Positionbutton")
                        .HasColumnType("integer")
                        .HasColumnName("positionbutton");

                    b.Property<int?>("Saveeditortype")
                        .HasColumnType("integer")
                        .HasColumnName("saveeditortype");

                    b.Property<string>("Storecheckurl")
                        .HasColumnType("text")
                        .HasColumnName("storecheckurl");

                    b.Property<string>("Storedefaultdata")
                        .HasColumnType("text")
                        .HasColumnName("storedefaultdata");

                    b.Property<string>("Storegetdata")
                        .HasColumnType("text")
                        .HasColumnName("storegetdata");

                    b.Property<string>("Storelabelaction")
                        .HasColumnType("text")
                        .HasColumnName("storelabelaction");

                    b.Property<string>("Storesetdata")
                        .HasColumnType("text")
                        .HasColumnName("storesetdata");

                    b.Property<string>("Storesetreadonly")
                        .HasColumnType("text")
                        .HasColumnName("storesetreadonly");

                    b.Property<string>("Tablename")
                        .HasColumnType("text")
                        .HasColumnName("tablename");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int?>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_net_form_version");

                    b.HasIndex(new[] { "Isdeleted", "Hinformid", "Isactive" }, "idx_ix_missingindex_18_17");

                    b.HasIndex(new[] { "Hinformid" }, "idx_ix_missingindex_207_206");

                    b.HasIndex(new[] { "Isdeleted", "Hinformid", "Isactive" }, "idx_ix_missingindex_35_34");

                    b.HasIndex(new[] { "Isdeleted", "Hinformid", "Isactive" }, "idx_ix_missingindex_42_41");

                    b.HasIndex(new[] { "Isdeleted", "Hinformid", "Isactive" }, "idx_ix_missingindex_55_54");

                    b.ToTable("net_form_version", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetFormVersionfield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<string>("Datasources")
                        .HasColumnType("text")
                        .HasColumnName("datasources");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<long?>("Fieldtypeid")
                        .HasColumnType("bigint")
                        .HasColumnName("fieldtypeid");

                    b.Property<string>("Hinformcode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("hinformcode");

                    b.Property<long?>("Hinformversionid")
                        .HasColumnType("bigint")
                        .HasColumnName("hinformversionid");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderid");

                    b.Property<string>("Parentcode")
                        .HasColumnType("text")
                        .HasColumnName("parentcode");

                    b.Property<long?>("Parentid")
                        .HasColumnType("bigint")
                        .HasColumnName("parentid");

                    b.Property<int?>("Tabindex")
                        .HasColumnType("integer")
                        .HasColumnName("tabindex");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long?>("Type")
                        .HasColumnType("bigint")
                        .HasColumnName("type");

                    b.Property<string>("Validates")
                        .HasColumnType("text")
                        .HasColumnName("validates");

                    b.HasKey("Id")
                        .HasName("pk_net_form_versionfield");

                    b.HasIndex(new[] { "Hinformversionid", "Isactive" }, "idx_ix_missingindex_209_208");

                    b.HasIndex(new[] { "Isdeleted", "Hinformversionid", "Isactive" }, "idx_ix_missingindex_86_85");

                    b.ToTable("net_form_versionfield", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetFormfieldtype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isrowtemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isrowtemplate");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderid");

                    b.HasKey("Id")
                        .HasName("pk_net_formfieldtype");

                    b.ToTable("net_formfieldtype", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetMainmenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Devicetype")
                        .HasColumnType("integer")
                        .HasColumnName("devicetype");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Imageurl")
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<int?>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isminiitem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isminiitem");

                    b.Property<bool?>("Ismobile")
                        .HasColumnType("boolean")
                        .HasColumnName("ismobile");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Parent")
                        .HasColumnType("integer")
                        .HasColumnName("parent");

                    b.Property<string>("Requiredpermissionname")
                        .HasColumnType("text")
                        .HasColumnName("requiredpermissionname");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<int?>("Tenantid")
                        .HasColumnType("integer")
                        .HasColumnName("tenantid");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_net_mainmenu");

                    b.ToTable("net_mainmenu", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("Countnum")
                        .HasColumnType("integer")
                        .HasColumnName("countnum");

                    b.Property<int?>("Countoutofdate")
                        .HasColumnType("integer")
                        .HasColumnName("countoutofdate");

                    b.Property<int?>("Counttype")
                        .HasColumnType("integer")
                        .HasColumnName("counttype");

                    b.Property<string>("Cssformat")
                        .HasColumnType("text")
                        .HasColumnName("cssformat");

                    b.Property<string>("Cssiconformat")
                        .HasColumnType("text")
                        .HasColumnName("cssiconformat");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Iframe")
                        .HasColumnType("text")
                        .HasColumnName("iframe");

                    b.Property<string>("Imageurl")
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<int?>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool?>("Iscount")
                        .HasColumnType("boolean")
                        .HasColumnName("iscount");

                    b.Property<bool?>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Israwsql")
                        .HasColumnType("boolean")
                        .HasColumnName("israwsql");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<int?>("Menuid")
                        .HasColumnType("integer")
                        .HasColumnName("menuid");

                    b.Property<string>("Mobilelink")
                        .HasColumnType("text")
                        .HasColumnName("mobilelink");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Organizationid")
                        .HasColumnType("integer")
                        .HasColumnName("organizationid");

                    b.Property<int?>("Parent")
                        .HasColumnType("integer")
                        .HasColumnName("parent");

                    b.Property<int?>("Parentorgid")
                        .HasColumnType("integer")
                        .HasColumnName("parentorgid");

                    b.Property<string>("Requiredpermissionname")
                        .HasColumnType("text")
                        .HasColumnName("requiredpermissionname");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Sqlcountstore")
                        .HasColumnType("text")
                        .HasColumnName("sqlcountstore");

                    b.Property<string>("Sqlstring")
                        .HasColumnType("text")
                        .HasColumnName("sqlstring");

                    b.Property<string>("Textcolor")
                        .HasColumnType("text")
                        .HasColumnName("textcolor");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("Typecheck")
                        .HasColumnType("integer")
                        .HasColumnName("typecheck");

                    b.Property<long?>("Userid")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_net_menu");

                    b.ToTable("net_menu", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetMenurole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int?>("Labelid")
                        .HasColumnType("integer")
                        .HasColumnName("labelid");

                    b.Property<int?>("Menuid")
                        .HasColumnType("integer")
                        .HasColumnName("menuid");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<int?>("Rolemappergroupid")
                        .HasColumnType("integer")
                        .HasColumnName("rolemappergroupid");

                    b.Property<int?>("Tenantid")
                        .HasColumnType("integer")
                        .HasColumnName("tenantid");

                    b.HasKey("Id")
                        .HasName("pk_net_menurole");

                    b.HasIndex(new[] { "Tenantid" }, "idx_ix_net_menurole_tenantid");

                    b.ToTable("net_menurole", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Allowedapi")
                        .HasColumnType("text")
                        .HasColumnName("allowedapi");

                    b.Property<string>("Allowedpagesizes")
                        .HasColumnType("text")
                        .HasColumnName("allowedpagesizes");

                    b.Property<bool?>("Cache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("cache");

                    b.Property<int?>("Chartviewdisplay")
                        .HasColumnType("integer")
                        .HasColumnName("chartviewdisplay");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int?>("Colcount")
                        .HasColumnType("integer")
                        .HasColumnName("colcount");

                    b.Property<int?>("Colspan")
                        .HasColumnType("integer")
                        .HasColumnName("colspan");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Datasourceid")
                        .HasColumnType("bigint")
                        .HasColumnName("datasourceid");

                    b.Property<string>("Defaultparam")
                        .HasColumnType("text")
                        .HasColumnName("defaultparam");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Disablehandlecollumn")
                        .HasColumnType("boolean")
                        .HasColumnName("disablehandlecollumn");

                    b.Property<bool?>("Disablesearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("disablesearch");

                    b.Property<int?>("Displaytype")
                        .HasColumnType("integer")
                        .HasColumnName("displaytype");

                    b.Property<string>("Editingmode")
                        .HasColumnType("text")
                        .HasColumnName("editingmode");

                    b.Property<bool?>("Enablemasterdetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("enablemasterdetail");

                    b.Property<string>("Excel")
                        .HasColumnType("text")
                        .HasColumnName("excel");

                    b.Property<long?>("Formid")
                        .HasColumnType("bigint")
                        .HasColumnName("formid");

                    b.Property<string>("Functioncode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("functioncode");

                    b.Property<int?>("Funtionid")
                        .HasColumnType("integer")
                        .HasColumnName("funtionid");

                    b.Property<long?>("Grouplevel")
                        .HasColumnType("bigint")
                        .HasColumnName("grouplevel");

                    b.Property<bool?>("Isautocollapse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isautocollapse");

                    b.Property<bool?>("Isbackviewer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isbackviewer");

                    b.Property<bool?>("Isbtnhandle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isbtnhandle");

                    b.Property<bool?>("Iscreateeditor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("iscreateeditor");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isdeleteeditor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdeleteeditor");

                    b.Property<bool?>("Isdynamiccolumn")
                        .HasColumnType("boolean")
                        .HasColumnName("isdynamiccolumn");

                    b.Property<bool?>("Isediteditor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isediteditor");

                    b.Property<bool?>("Isexportexcel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isexportexcel");

                    b.Property<bool?>("Isexportword")
                        .HasColumnType("boolean")
                        .HasColumnName("isexportword");

                    b.Property<bool?>("Isfreepane")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isfreepane");

                    b.Property<bool?>("Isrecieverealtime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isrecieverealtime");

                    b.Property<bool?>("Issearchbar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("issearchbar");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Layoutpfilter")
                        .HasColumnType("text")
                        .HasColumnName("layoutpfilter");

                    b.Property<string>("Masterdetailreportcode")
                        .HasColumnType("text")
                        .HasColumnName("masterdetailreportcode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("Pagination")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("pagination");

                    b.Property<int?>("Positionbutton")
                        .HasColumnType("integer")
                        .HasColumnName("positionbutton");

                    b.Property<string>("Reportcoderecieverealtime")
                        .HasColumnType("text")
                        .HasColumnName("reportcoderecieverealtime");

                    b.Property<int?>("Reporttype")
                        .HasColumnType("integer")
                        .HasColumnName("reporttype");

                    b.Property<string>("Selectiontype")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("selectiontype");

                    b.Property<int?>("Servicehiddenfilter")
                        .HasColumnType("integer")
                        .HasColumnName("servicehiddenfilter");

                    b.Property<bool?>("Showheaderfilter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("showheaderfilter");

                    b.Property<bool?>("Showiconfilter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("showiconfilter");

                    b.Property<bool?>("Showpage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("showpage");

                    b.Property<bool?>("Showtoolbar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("showtoolbar");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Sqlcontent")
                        .HasColumnType("text")
                        .HasColumnName("sqlcontent");

                    b.Property<string>("Sqlcontentm")
                        .HasColumnType("text")
                        .HasColumnName("sqlcontentm");

                    b.Property<string>("Sqldefaultcontent")
                        .HasColumnType("text")
                        .HasColumnName("sqldefaultcontent");

                    b.Property<string>("Sqleditcontent")
                        .HasColumnType("text")
                        .HasColumnName("sqleditcontent");

                    b.Property<string>("Sqledittemplatecontent")
                        .HasColumnType("text")
                        .HasColumnName("sqledittemplatecontent");

                    b.Property<string>("Sqlexportdata")
                        .HasColumnType("text")
                        .HasColumnName("sqlexportdata");

                    b.Property<string>("Sqlexportfield")
                        .HasColumnType("text")
                        .HasColumnName("sqlexportfield");

                    b.Property<string>("Sqlstoredlabelaction")
                        .HasColumnType("text")
                        .HasColumnName("sqlstoredlabelaction");

                    b.Property<bool?>("Sqltype")
                        .HasColumnType("boolean")
                        .HasColumnName("sqltype");

                    b.Property<bool?>("Sqltypem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("sqltypem");

                    b.Property<string>("Storecheckurl")
                        .HasColumnType("text")
                        .HasColumnName("storecheckurl");

                    b.Property<string>("Storedrag")
                        .HasColumnType("text")
                        .HasColumnName("storedrag");

                    b.Property<string>("Storedrdisplay")
                        .HasColumnType("text")
                        .HasColumnName("storedrdisplay");

                    b.Property<string>("Templateids")
                        .HasColumnType("text")
                        .HasColumnName("templateids");

                    b.Property<int?>("Typegetcolumn")
                        .HasColumnType("integer")
                        .HasColumnName("typegetcolumn");

                    b.Property<string>("Word")
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("Id")
                        .HasName("pk_net_report");

                    b.ToTable("net_report", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Cache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("cache");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Coldisplay")
                        .HasColumnType("text")
                        .HasColumnName("coldisplay");

                    b.Property<string>("Colparent")
                        .HasColumnType("text")
                        .HasColumnName("colparent");

                    b.Property<string>("Colvalue")
                        .HasColumnType("text")
                        .HasColumnName("colvalue");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Datasourceid")
                        .HasColumnType("bigint")
                        .HasColumnName("datasourceid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Sqlcontent")
                        .HasColumnType("text")
                        .HasColumnName("sqlcontent");

                    b.Property<bool?>("Sqltype")
                        .HasColumnType("boolean")
                        .HasColumnName("sqltype");

                    b.Property<string>("Storeddefaultparam")
                        .HasColumnType("text")
                        .HasColumnName("storeddefaultparam");

                    b.HasKey("Id")
                        .HasName("pk_net_service");

                    b.ToTable("net_service", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetTabpanel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aftereffecticon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("aftereffecticon");

                    b.Property<string>("Aftereffecticoncolor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("aftereffecticoncolor");

                    b.Property<string>("Beforeeffecticon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("beforeeffecticon");

                    b.Property<string>("Beforeeffecticoncolor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("beforeeffecticoncolor");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Datasourceid")
                        .HasColumnType("integer")
                        .HasColumnName("datasourceid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Filetemplate")
                        .HasColumnType("text")
                        .HasColumnName("filetemplate");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Iseffecticon")
                        .HasColumnType("boolean")
                        .HasColumnName("iseffecticon");

                    b.Property<bool?>("Isexportexcel")
                        .HasColumnType("boolean")
                        .HasColumnName("isexportexcel");

                    b.Property<bool?>("Isexportwordtemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("isexportwordtemplate");

                    b.Property<bool?>("Ispermission")
                        .HasColumnType("boolean")
                        .HasColumnName("ispermission");

                    b.Property<bool?>("Ispermissionbyrecord")
                        .HasColumnType("boolean")
                        .HasColumnName("ispermissionbyrecord");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderid");

                    b.Property<int?>("Selectedindex")
                        .HasColumnType("integer")
                        .HasColumnName("selectedindex");

                    b.Property<int?>("Servicegetfilename")
                        .HasColumnType("integer")
                        .HasColumnName("servicegetfilename");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Storechecktabdetail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("storechecktabdetail");

                    b.Property<string>("Storecheckurl")
                        .HasColumnType("text")
                        .HasColumnName("storecheckurl");

                    b.Property<string>("Storecountnotify")
                        .HasColumnType("text")
                        .HasColumnName("storecountnotify");

                    b.Property<string>("Storeexportfile")
                        .HasColumnType("text")
                        .HasColumnName("storeexportfile");

                    b.Property<string>("Storegetdata")
                        .HasColumnType("text")
                        .HasColumnName("storegetdata");

                    b.Property<string>("Storegetfieldexportdatagrid")
                        .HasColumnType("text")
                        .HasColumnName("storegetfieldexportdatagrid");

                    b.Property<string>("Storegetfieldexportform")
                        .HasColumnType("text")
                        .HasColumnName("storegetfieldexportform");

                    b.Property<string>("Storepermissionbyrecord")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("storepermissionbyrecord");

                    b.Property<string>("Storetabpermission")
                        .HasColumnType("text")
                        .HasColumnName("storetabpermission");

                    b.HasKey("Id")
                        .HasName("pk_net_tabpanel");

                    b.ToTable("net_tabpanel", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetTabpanelDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Hintabpanelcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("hintabpanelcode");

                    b.Property<long?>("Hintabpanelid")
                        .HasColumnType("bigint")
                        .HasColumnName("hintabpanelid");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<bool?>("Isloop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isloop");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Options")
                        .HasColumnType("text")
                        .HasColumnName("options");

                    b.Property<long?>("Orderid")
                        .HasColumnType("bigint")
                        .HasColumnName("orderid");

                    b.Property<string>("Storeloop")
                        .HasColumnType("text")
                        .HasColumnName("storeloop");

                    b.Property<string>("Tabicon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tabicon");

                    b.Property<string>("Template")
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_net_tabpanel_detail");

                    b.ToTable("net_tabpanel_detail", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<int?>("Creatoruserid")
                        .HasColumnType("integer")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Datasourceid")
                        .HasColumnType("integer")
                        .HasColumnName("datasourceid");

                    b.Property<int?>("Deleteruserid")
                        .HasColumnType("integer")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<int?>("Isactive")
                        .HasColumnType("integer")
                        .HasColumnName("isactive");

                    b.Property<int?>("Isdeleted")
                        .HasColumnType("integer")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<int?>("Lastmodifieruserid")
                        .HasColumnType("integer")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<int?>("Max")
                        .HasColumnType("integer")
                        .HasColumnName("max");

                    b.Property<string>("Message")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("message");

                    b.Property<int?>("Min")
                        .HasColumnType("integer")
                        .HasColumnName("min");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Pattern")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pattern");

                    b.Property<string>("Sitecode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sitecode");

                    b.Property<int?>("Siteid")
                        .HasColumnType("integer")
                        .HasColumnName("siteid");

                    b.Property<string>("Store")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("store");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk__drvalida__3214ec07c8d7f405");

                    b.ToTable("net_validation", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetWidget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("Displaytypecode")
                        .HasColumnType("text")
                        .HasColumnName("displaytypecode");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Widgetcode")
                        .HasColumnType("text")
                        .HasColumnName("widgetcode");

                    b.HasKey("Id")
                        .HasName("pk_net_widget");

                    b.ToTable("net_widget", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetWidgetdefaultconfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Defaultvalue")
                        .HasColumnType("text")
                        .HasColumnName("defaultvalue");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<int?>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<int?>("Indexnumber")
                        .HasColumnType("integer")
                        .HasColumnName("indexnumber");

                    b.Property<bool?>("Isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Widgetlayoutid")
                        .HasColumnType("integer")
                        .HasColumnName("widgetlayoutid");

                    b.HasKey("Id")
                        .HasName("pk_net_widgetdefaultconfig");

                    b.ToTable("net_widgetdefaultconfig", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetWidgetgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<string>("Groupname")
                        .HasColumnType("text")
                        .HasColumnName("groupname");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.HasKey("Id")
                        .HasName("pk_net_widgetgroup");

                    b.ToTable("net_widgetgroup", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetWidgetitem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<int?>("Datasourceid")
                        .HasColumnType("integer")
                        .HasColumnName("datasourceid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<int?>("Groupwidgetid")
                        .HasColumnType("integer")
                        .HasColumnName("groupwidgetid");

                    b.Property<string>("Imgreview")
                        .HasColumnType("text")
                        .HasColumnName("imgreview");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Templateids")
                        .HasColumnType("text")
                        .HasColumnName("templateids");

                    b.Property<int?>("Widgetlayoutid")
                        .HasColumnType("integer")
                        .HasColumnName("widgetlayoutid");

                    b.HasKey("Id")
                        .HasName("pk_net_widgetitem");

                    b.ToTable("net_widgetitem", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetWidgetmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Creationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<long?>("Creatoruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("creatoruserid");

                    b.Property<long?>("Deleteruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("deleteruserid");

                    b.Property<DateTime?>("Deletiontime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletiontime");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int?>("Indexnumber")
                        .HasColumnType("integer")
                        .HasColumnName("indexnumber");

                    b.Property<bool?>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Lastmodificationtime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodificationtime");

                    b.Property<long?>("Lastmodifieruserid")
                        .HasColumnType("bigint")
                        .HasColumnName("lastmodifieruserid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Pageid")
                        .HasColumnType("integer")
                        .HasColumnName("pageid");

                    b.Property<int?>("Positionx")
                        .HasColumnType("integer")
                        .HasColumnName("positionx");

                    b.Property<int?>("Positiony")
                        .HasColumnType("integer")
                        .HasColumnName("positiony");

                    b.Property<int?>("Widgetitemid")
                        .HasColumnType("integer")
                        .HasColumnName("widgetitemid");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_net_widgetmap");

                    b.ToTable("net_widgetmap", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.NetWidgetvalueconfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descriptions")
                        .HasColumnType("text")
                        .HasColumnName("descriptions");

                    b.Property<int?>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<bool?>("Isdelete")
                        .HasColumnType("boolean")
                        .HasColumnName("isdelete");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<int?>("Widgetitemid")
                        .HasColumnType("integer")
                        .HasColumnName("widgetitemid");

                    b.HasKey("Id")
                        .HasName("pk_net_widgetvalueconfig");

                    b.HasIndex(new[] { "Widgetitemid", "Isdelete" }, "idx_ix_missingindex_4_3");

                    b.ToTable("net_widgetvalueconfig", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.Tempqueriescopy", b =>
                {
                    b.Property<string>("Col1")
                        .HasMaxLength(376)
                        .HasColumnType("character varying(376)")
                        .HasColumnName("col1");

                    b.Property<string>("Col2")
                        .HasColumnType("text")
                        .HasColumnName("col2");

                    b.Property<string>("Col3")
                        .HasMaxLength(259)
                        .HasColumnType("character varying(259)")
                        .HasColumnName("col3");

                    b.Property<long?>("Rownum")
                        .HasColumnType("bigint")
                        .HasColumnName("rownum");

                    b.ToTable("tempqueriescopy", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.Tempquery", b =>
                {
                    b.Property<string>("Col1")
                        .HasMaxLength(376)
                        .HasColumnType("character varying(376)")
                        .HasColumnName("col1");

                    b.Property<string>("Col2")
                        .HasColumnType("text")
                        .HasColumnName("col2");

                    b.Property<string>("Col3")
                        .HasMaxLength(259)
                        .HasColumnType("character varying(259)")
                        .HasColumnName("col3");

                    b.Property<long?>("Rownum")
                        .HasColumnType("bigint")
                        .HasColumnName("rownum");

                    b.ToTable("tempqueries", "dbo");
                });

            modelBuilder.Entity("KOAHome.EntityFramework.WidgetlayoutTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Createdat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Dashboardid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("dashboardid");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Userid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("userid");

                    b.Property<string>("Widgetid")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("widgetid");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk__widgetla__3214ec07b34c3338");

                    b.ToTable("widgetlayout_test", "dbo");
                });
#pragma warning restore 612, 618
        }
    }
}
